(set-logic QF_ALL_SUPPORTED)
(set-option :strings-exp true)
(declare-datatypes () ((Location (loc.home) (loc.work) (loc.current_location) (loc.absolute (loc.lat Real) (loc.lon Real)))))
(declare-datatypes () ((Entity_tt_contact (mk.Entity_tt_contact (Entity_tt_contact.get String)))))
(declare-datatypes () ((Entity_tt_contact_group (mk.Entity_tt_contact_group (Entity_tt_contact_group.get String)))))
(declare-fun Entity_tt_contact.getGroups (Entity_tt_contact) (Set Entity_tt_contact_group))
(declare-fun Allowed_onedrive_file_created_0 () Bool)
(declare-fun param_onedrive_file_created_0_file_name () String)
(declare-fun Allowed_builtin_hello_1 () Bool)
(declare-fun pi () Entity_tt_contact)
(declare-fun prog_v_file_name_0 () String)
(assert (= (Entity_tt_contact.getGroups (mk.Entity_tt_contact "omlet-messaging:testtesttest")) (insert (mk.Entity_tt_contact_group "role:mom") (singleton (mk.Entity_tt_contact_group "omlet-feed:family")))))
(assert (= pi (mk.Entity_tt_contact "omlet-messaging:testtesttest")))
(assert (and (or (= param_onedrive_file_created_0_file_name "i'm happy") (str.contains param_onedrive_file_created_0_file_name "you would never believe what happened"))))
(assert (= prog_v_file_name_0 param_onedrive_file_created_0_file_name))
(assert true)
(assert (! (not (! (or (! (= param_onedrive_file_created_0_file_name "i'm happy") :named constr_2) (! (= param_onedrive_file_created_0_file_name "merry christmas") :named constr_3) (! (str.contains param_onedrive_file_created_0_file_name "love you") :named constr_4) (! (= param_onedrive_file_created_0_file_name "you would never believe what happened") :named constr_5)) :named constr_1)) :named constr_0))
(check-sat)