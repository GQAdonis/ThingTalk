(set-logic QF_ALL_SUPPORTED)
(set-option :strings-exp true)
(set-option :produce-assignments true)
(set-option :produce-models true)
(declare-datatypes () ((Location (loc.home) (loc.work) (loc.current_location) (loc.absolute (loc.lat Real) (loc.lon Real)))))
(declare-datatypes () ((Entity_tt_contact (mk.Entity_tt_contact (Entity_tt_contact.get String)))))
(declare-fun Allowed___dyn_0_receive_0 () Bool)
(declare-fun param___dyn_0_receive_0___principal () Entity_tt_contact)
(declare-datatypes () ((Entity_tt_flow_token (mk.Entity_tt_flow_token (Entity_tt_flow_token.get String)))))
(declare-fun param___dyn_0_receive_0___token () Entity_tt_flow_token)
(declare-datatypes () ((Entity_tt_function (mk.Entity_tt_function (Entity_tt_function.get String)))))
(declare-fun param___dyn_0_receive_0___kindChannel () Entity_tt_function)
(declare-fun param___dyn_0_receive_0_q1 () String)
(declare-fun param___dyn_0_receive_0_q2 () String)
(declare-fun Allowed_twitter_search_1 () Bool)
(declare-fun param_twitter_search_1_query () String)
(declare-fun param_twitter_search_1_count () Real)
(declare-fun param_twitter_search_1_text () String)
(declare-datatypes () ((Entity_tt_hashtag (mk.Entity_tt_hashtag (Entity_tt_hashtag.get String)))))
(declare-fun param_twitter_search_1_hashtags () (Set Entity_tt_hashtag))
(declare-datatypes () ((Entity_tt_url (mk.Entity_tt_url (Entity_tt_url.get String)))))
(declare-fun param_twitter_search_1_urls () (Set Entity_tt_url))
(declare-datatypes () ((Entity_tt_username (mk.Entity_tt_username (Entity_tt_username.get String)))))
(declare-fun param_twitter_search_1_from () Entity_tt_username)
(declare-fun param_twitter_search_1_in_reply_to () Entity_tt_username)
(declare-fun Allowed_facebook_post_2 () Bool)
(declare-fun param_facebook_post_2_status () String)
(declare-fun pi () Entity_tt_contact)
(declare-fun precon_0 () Bool)
(declare-fun prog_v_q1_0 () String)
(declare-fun prog_v_q2_0 () String)
(declare-fun precon_1 () Bool)
(declare-fun precon_2 () Bool)
(declare-fun prog_v_txt_0 () String)
(declare-fun precon_3 () Bool)
(declare-fun precon_4 () Bool)
(assert (= pi (mk.Entity_tt_contact "omlet-messaging:testtesttest")))
(assert (= precon_0 (! (= param___dyn_0_receive_0___principal pi) :named constr_0)))
(assert (=> precon_0 (! Allowed___dyn_0_receive_0 :named allowed_0)))
(assert (=> precon_0 (! true :named postcon_0)))
(assert (= param___dyn_0_receive_0___principal (mk.Entity_tt_contact "omlet-messaging:testtesttest")))
(assert (= param___dyn_0_receive_0___token (mk.Entity_tt_flow_token "123456789")))
(assert (= param___dyn_0_receive_0___kindChannel (mk.Entity_tt_function "")))
(assert true)
(assert (= prog_v_q1_0 param___dyn_0_receive_0_q1))
(assert (= prog_v_q2_0 param___dyn_0_receive_0_q2))
(assert (= precon_1 (! (= param_twitter_search_1_query "cats") :named constr_1)))
(assert (=> precon_1 (! Allowed_twitter_search_1 :named allowed_1)))
(assert (=> precon_1 (! (! (member (mk.Entity_tt_hashtag "cat") param_twitter_search_1_hashtags) :named constr_2) :named postcon_1)))
(assert (= precon_2 (! (= param_twitter_search_1_query "dogs") :named constr_3)))
(assert (=> precon_2 (! Allowed_twitter_search_1 :named allowed_2)))
(assert (=> precon_2 (! (! (member (mk.Entity_tt_hashtag "dog") param_twitter_search_1_hashtags) :named constr_4) :named postcon_2)))
(assert (= param_twitter_search_1_query "cats"))
(assert (and (or (and true)) (or (and (member (mk.Entity_tt_hashtag "cat") param_twitter_search_1_hashtags))) (or (and (str.contains param_twitter_search_1_text "funny lol")))))
(assert (= prog_v_txt_0 param_twitter_search_1_text))
(assert (= precon_3 (! (and (! (str.contains param_facebook_post_2_status "funny") :named constr_6) (! (str.contains param_facebook_post_2_status "lol") :named constr_7)) :named constr_5)))
(assert (=> precon_3 (! Allowed_facebook_post_2 :named allowed_3)))
(assert (=> precon_3 (! true :named postcon_3)))
(assert (= precon_4 (! (or (! (str.contains param_facebook_post_2_status "https://www.wsj.com") :named constr_9) (! (str.contains param_facebook_post_2_status "https://www.washingtonpost.com") :named constr_10)) :named constr_8)))
(assert (=> precon_4 (! Allowed_facebook_post_2 :named allowed_4)))
(assert (=> precon_4 (! true :named postcon_4)))
(assert (= param_facebook_post_2_status prog_v_txt_0))
(assert true)
(assert (not (and (! Allowed___dyn_0_receive_0 :named check_0) (! Allowed_twitter_search_1 :named check_1) (! Allowed_facebook_post_2 :named check_2))))
(check-sat)
