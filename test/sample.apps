// -* mode: js -*-

ParameterPassing() {
    @(type="xkcd",id="com.xkcd-6").new_comic(), v_title := title, v_picture_url := picture_url
    => @(type="twitter",id="twitter-foo").post_picture(caption=v_title, picture_url=v_picture_url);
}

====

DoOnlyOnce() {
    once @builtin.at(time=$makeTime(12, 30)) => notify;
}

====

SecurityCamera() {
    now => @security-camera.get_snapshot(), pic := picture_url => notify;
}

====

SearchYoutube() {
        now => @youtube.search_videos(), video_url = "http://www.youtube.com"^^tt:url =>  notify;
}

====

TimeTest() {
        @builtin.at(time=$makeTime(12, 30)) => notify;
}

====

PhoneNumberTest() {
  now => @phone.send_sms(to="+15555555555", body="");
  now => @phone.send_sms(to="+15555555555"^^tt:phone_number, body="");
  @phone.receive_sms(), from="+15555555555"^^phone_number => notify;
}

====

InvalidPhoneNumberTest() {
  now => @phone.send_sms(to="+15555555555"^^tt:email_address, body="");
}

====

LocationAsTriggerParam() {
  @weatherapi.weather(location=$makeLocation(1, 3)) => notify;
}

====

LocationWithDisplayAsTriggerParam() {
  @weatherapi.weather(location=$makeLocation(1, 3, "Somewhere")) => notify;
}

====

SabrinaGeneratedMonitorTwitter() {
    @(type="twitter", id="twitter-foo").source(), from="HillaryClinton"^^tt:username => notify;
}

====

CommandTest() {
  now => @builtin.notify(message="test");
}

====

SabrinaLikesItHot(Threshold : Measure(C)) {
@(type="thermostat").temperature(), temperature > Threshold => @builtin.notify(message="bla");
}

====

/* This should not run directly, but it gives an idea of the syntax */
/* They should all at least parse successfully. */

Test() {
    @test.source() => @builtin.debug_log(message="Test App received an event on Test Channel");
}
