// -* mode: js -*-

SearchYoutube() {
        now => @youtube.search_videos(foo, link), link = $makeURL("http://www.youtube.com") =>  notify;
}

====

TimeTest() {
        @$at($makeTime(12, 30)) => notify;
}

====

RandomMeme() {
@$timer(24h), meme := $choice([["the most interesting man in the world", "I don't always make memes", "but when I do it's on Sabrina"],
                              ["futurama fry", "Not sure if automated", "Or just dumber than usual"],["ancient aliens", "", "Research"],
                              ["brace yourselves", "Brace yourselves", "Automated memes are coming"]])
=> @imgflip.generate($at(meme, 0), $at(meme, 1), $at(meme, 2), _, url) => @facebook.post_picture(url);
}

====

PhoneNumberTest() {
  now => @phone.send_sms("+15555555555", "");
  now => @phone.send_sms($makePhoneNumber("+15555555555"), "");
  @phone.receive_sms($makePhoneNumber("+15555555555"), _) => notify;
}

====

InvalidPhoneNumberTest() {
  now => @phone.send_sms($makeEmailAddress("+15555555555"), "");
}

====

EnumTest() {
  @omlet.incomingmessage(_, "new", text) => notify;
}

====

InvalidTriggerParam() {
  @sabrina.listen($choice(["bla", "blo"])) => notify;
}

====

LocationAsTriggerParam() {
  @weatherapi.weather($makeLocation(1, 3), temperature) => notify;
}

====

SabrinaGeneratedMonitorTwitter() {
    @(type="twitter", id="twitter-foo").source(text, hashtags, urls, "HillaryClinton", inreplyto, __reserved) => notify;
}

====

CommandTest() {
  now => @sabrina.say("test");
  now => @ninegag.get_latest(title, link, pic) => @sabrina.picture(pic);
}

====

SabrinaChangeNestTemperature(Thermostat : String) {
@sabrina.listen(text), $regex(text, "set\\s+nest\\s+temp(?:erature)?\\s+(?:to\\s+)?([0-9\\.]+)\\s*C?", "i", temp) =>
@(type="thermostat", name=Thermostat).set_target_temperature($valueOf(temp)*1C);
}

====

SabrinaLikesItHot(Thermostat : String, Threshold : Measure(C)) {
@(type="thermostat", name=Thermostat).temperature(_, t), t > Threshold => @$notify("bla");
@(type="thermostat", name=Thermostat).temperature(_, t), t > Threshold => @$notify("bla " + $toString(t));
@(type="thermostat", name=Thermostat).temperature(_, t), t > Threshold => @$notify("bla " + $toString($random()));
}

====

GetRetweets() {
    @sabrina.listen(what), $regex(what, "get retweets from ([a-z0-9]+)", "i", who) =>
    @twitter.retweets_of_me(text, hashtags, urls, who) => @sabrina.say("Retweet from " + who + ": " + text);
}

====

RandomTest2() {
now => @$logger($toString($choice([1,2,3])));
}

====

TestOpOrder() {
now => @sabrina.say($toString(5-2+1));
}

====

MultiparamRegex() {
@sabrina.listen(foo), $regex(foo, "([0-9]+) ([0-9]+)", "", v1, v2) =>
@$logger($toString(v1) + " " + $toString(v2));
}

====

CompareTest() {
var V1 : Number;
var V2 : Number;

@$timer(10s), (V1 - V2 < 3) => @$notify("foo");
}

====

SabrinaTestCapturingGroup() {
@sabrina.listen(text), $regex(text, "^on\\s+hashtag\\s+([a-z0-9]+)", "i", hashtag)
    => @sabrina.say("hashtag " + hashtag);
}

====

TestComputeApp() {
    module random {
        event out(x : Number);
        function ask() {
            out(Math.floor(42 + Math.random() * 42));
        }
    }

    @$timer(30s) => @random.ask();
    @random.out(x) => @$logger('number: ' + $toString(x));
}

====

/* This should not run directly, but it gives an idea of the syntax */
/* They should all at least parse successfully. */

Test() {
    @test.source() => @$logger("Test App received an event on Test Channel");
}
