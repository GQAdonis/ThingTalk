// -* mode: js -*-

// ** typecheck: expect Error **
ArrayPrincipals() {
    now => @org.thingpedia.builtin.test(principal=["matrix-account:@testuser2:camembert.stanford.edu"^^tt:contact, "matrix-account:@testuser3:camembert.stanford.edu"^^tt:contact]).eat_data(data='AAAAAA');
}

====

Array() {
    @twitter.source(), in_array(from, ["alice"^^tt:hashtag, "bob"^^tt:hashtag]) => notify;
}

====

TestExternalPredicate() {
    @twitter.source(), @builtin.get_time() { time >= makeTime(9,0) && time <= makeTime(10, 0) } => notify;
    @twitter.source(), text =~ "lol" && @builtin.get_time() { time >= makeTime(9,0) && time <= makeTime(10, 0) } => notify;
}

====

// ** typecheck: expect TypeError **
// these should not typecheck
TestInvalidExternalPredicate1() {
    @twitter.source(), @builtin.get_time() { time =~ "lol" } => notify;
}

====

// ** typecheck: expect TypeError **
TestInvalidExternalPredicate2() {
    @twitter.source(), @builtin.get_time() { text =~ "lol" } => notify;
}

====

// ** typecheck: expect Error **
TestInvalidExternalPredicate3() {
    @twitter.source(), @twitter.source() { text =~ "lol" } => notify;
}

====

"bob"^^tt:contact_name : TestReturn() {
    @org.twitter.source() => return;
}

====

self : ExplicitSelf() {
    now => @builtin.say(message="lol");
}

====

"matrix-account:@gcampax:matrix.org"^^tt:contact : WithPrincipal() {
    now => @builtin.say(message="lol");
}

====

CompareDate() {
    now => @builtin.get_time(), time > makeTime(10,0) => notify;
}

====

StartsWith() {
    @twitter.source(), starts_with(text, "foo") => notify;
}

====

EntityNames() {
    now => @twitter.post_picture(caption="lol", picture_url="http://foo.com/bar.jpg"^^tt:picture("A funny picture"));
}

====

DownCast() {
    @xkcd(id="com.xkcd-6").new_comic(), v_title := title, v_picture_url := picture_url
    => @twitter.sink(status=v_picture_url);
}

====

EventType() {
    @twitter.source() => @builtin.say(message=$event.type);
}

====

FormatEvent() {
    @twitter.source() => @builtin.say(message=$event.title);
}

====

ComplexFilter() {
    @twitter.source(), text =~ "foo" || (text =~"bar" && !(text =~ "lol")) => notify;
}

====

WithClassDef() {
    class @dyn_0 extends @remote {
        action send(in req foo : String);
    }
    now => @dyn_0.send(foo="foo");
}

====

// ** typecheck: expect TypeError **
WrongClassDef() {
    class @dyn_0 extends @remote {
        action send(in req foo : Number);
    }
    now => @dyn_0.send(foo="foo");
}

====

// without wrapping it should still work

@twitter.source() => notify;

====

// same for immediates
now => @security-camera.get_snapshot() => notify;

====

// same for multiple rules
@twitter.source() => notify;
@builtin.at(time=makeTime(20,30)) => notify;

====

PrimaryKind() {
    @org.twitter.source() => notify;
}

====

Principals() {
    @twitter(principal="omlet-account:foo"^^tt:contact).source() => notify;
    @twitter(principal="giovanni"^^tt:contact_name).source() => notify;
    // the following is identical to the previous one
    @twitter(principal="giovanni").source() => notify;
}

====

Contains() {
    @twitter.source(), contains(hashtags, "lol") => notify;
}

====

ParameterPassing() {
    @xkcd(id="com.xkcd-6").new_comic(), v_title := title, v_picture_url := picture_url
    => @twitter(id="twitter-foo").post_picture(caption=v_title, picture_url=v_picture_url);
}

====

DoOnlyOnce() {
    once @builtin.at(time=makeTime(12, 30)) => notify;
}

====

SecurityCamera() {
    now => @security-camera.get_snapshot(), pic := picture_url => notify;
}

====

SearchYoutube() {
    now => @youtube.search_videos(query="lol"), video_url = "http://www.youtube.com"^^tt:url =>  notify;
}

====

TimeTest() {
    @builtin.at(time=makeTime(12, 30)) => notify;
}

====

PhoneNumberTest() {
    now => @phone.send_sms(to="+15555555555", body="");
    now => @phone.send_sms(to="+15555555555"^^tt:phone_number, body="");
    @phone.receive_sms(), from="+15555555555"^^phone_number => notify;
}

====

// ** typecheck: expect TypeError **
InvalidPhoneNumberTest() {
    now => @phone.send_sms(to="+15555555555"^^tt:email_address, body="");
}

====

LocationAsTriggerParam() {
    @weatherapi.weather(location=makeLocation(1, 3)) => notify;
}

====

RelativeLocation() {
    @weatherapi.weather(location=$context.location.current_location) => notify;
}

====

LocationWithDisplayAsTriggerParam() {
    @weatherapi.weather(location=makeLocation(1, 3, "Somewhere")) => notify;
}

====

SabrinaGeneratedMonitorTwitter() {
    @twitter(id="twitter-foo").source(), from="HillaryClinton"^^tt:username => notify;
}

====

CommandTest() {
  now => @builtin.say(message="test");
}

====

SabrinaLikesItHot(Threshold : Measure(C)) {
    @thermostat.temperature(), temperature > Threshold => @builtin.say(message="bla");
}

====

/* This should not run directly, but it gives an idea of the syntax */
/* They should all at least parse successfully. */

Test() {
    @test.source() => @builtin.debug_log(message="Test App received an event on Test Channel");
}

====

LogQueryTest() {
    now => get_record(table="t") => notify;
}

====

LogQueryTestProjection() {
    now => get_record(table="Q1"), v_1 := col1 => notify;
}

====

LogQueryTestSelection() {
    now => get_record(table="Q1"), col2 >= 42, v_1 := col1 => notify;
}

/* select col1 as v_1 from Q1 where col2 >= 42 */

====

LogQueryTestJoin() {
    now => get_record(table="Q1"), v_1 := col1 => get_record(table="Q2"), col2 >= v_1, v_2 := col2 => notify;
}

====

LogQueryAggregationTest() {
    now => get_record(table="Q1"), v_field := max(field) => notify;
}

====

LogQueryArgmTest() {
    now => get_record(table="Q0"), [v_field1, v_field2] := argmax(another_field, 3, [field1, field2]) => notify;
}

====

WithSave() {
    now => @fitbit.get_steps() => notify;
    table = "my_table" : now => get_record(table="Q1"), max_steps := max(steps) => notify;
    now => get_record(table="my_table"), v_steps := max_steps => notify;
}

/* need save */
/* "Q0": now => @fitbit.get_steps() => save; */
/* "Q1": now => log.get(table="Q0"), max_steps := max(steps) => save; */
/* "Q2": now => log.get(table="Q1"), v_steps = max_steps => notify; */

====

LogTriggerTest() {
    new_record(table="Q1") => get_record(table="Q2") => notify;
}

====

LogTriggerAggregationTest() {
    new_record(table="Q1"), v_field := max(field) => notify;
}

====

LogTriggerArgmTest() {
    new_record(table="Q0"), [v_field1, v_field2] := argmax(another_field, [field1, field2]) => notify;
}

====

LogTestAll() {
    new_record(table="Q0") => get_record(table="Q1"), v_foo := foo => save;
}

====

LogTestTableName() {
    table = "lol" : new_record(table="Q0") => get_record(table="Q1"), v_foo := foo => save;
}
