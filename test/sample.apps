// -* mode: js -*-

TestExternalPredicate() {
    @twitter.source(), @builtin.get_time() { time >= makeTime(9,0) && time <= makeTime(10, 0) } => notify;
    @twitter.source(), text =~ "lol" && @builtin.get_time() { time >= makeTime(9,0) && time <= makeTime(10, 0) } => notify;
}

====

// these should not typecheck
TestInvalidExternalPredicate1() {
    @twitter.source(), @builtin.get_time() { time =~ "lol" } => notify;
}

====

TestInvalidExternalPredicate2() {
    @twitter.source(), @builtin.get_time() { text =~ "lol" } => notify;
}

====

TestInvalidExternalPredicate3() {
    @twitter.source(), @twitter.source() { text =~ "lol" } => notify;
}

====

"bob"^^tt:contact_name : TestReturn() {
    @org.twitter.source() => return;
}

====

self : ExplicitSelf() {
    now => @builtin.say(message="lol");
}

====

"matrix-account:@gcampax:matrix.org"^^tt:contact : WithPrincipal() {
    now => @builtin.say(message="lol");
}

====

CompareDate() {
    now => @builtin.get_time(), time > makeTime(10,0) => notify;
}

====

StartsWith() {
    @twitter.source(), starts_with(text, "foo") => notify;
}

====

EntityNames() {
    now => @twitter.post_picture(caption="lol", picture_url="http://foo.com/bar.jpg"^^tt:picture("A funny picture"));
}

====

DownCast() {
    @xkcd(id="com.xkcd-6").new_comic(), v_title := title, v_picture_url := picture_url
    => @twitter.sink(status=v_picture_url);
}

====

EventType() {
    @twitter.source() => @builtin.say(message=$event.type);
}

====

FormatEvent() {
    @twitter.source() => @builtin.say(message=$event.title);
}

====

ComplexFilter() {
    @twitter.source(), text =~ "foo" || (text =~"bar" && !(text =~ "lol")) => notify;
}

====

WithClassDef() {
    class @dyn_0 extends @remote {
        action send(in req foo : String);
    }
    now => @dyn_0.send(foo="foo");
}

====

WrongClassDef() {
    class @dyn_0 extends @remote {
        action send(in req foo : Number);
    }
    now => @dyn_0.send(foo="foo");
}

====

// without wrapping it should still work

@twitter.source() => notify;

====

// same for immediates
now => @security-camera.get_snapshot() => notify;

====

// same for multiple rules
@twitter.source() => notify;
@builtin.at(time=makeTime(20,30)) => notify;

====

PrimaryKind() {
    @org.twitter.source() => notify;
}

====

Principals() {
    @twitter(principal="omlet-account:foo"^^tt:contact).source() => notify;
    @twitter(principal="giovanni"^^tt:contact_name).source() => notify;
    // the following is identical to the previous one
    @twitter(principal="giovanni").source() => notify;
}

====

Contains() {
    @twitter.source(), contains(hashtags, "lol") => notify;
}

====

ParameterPassing() {
    @xkcd(id="com.xkcd-6").new_comic(), v_title := title, v_picture_url := picture_url
    => @twitter(id="twitter-foo").post_picture(caption=v_title, picture_url=v_picture_url);
}

====

DoOnlyOnce() {
    once @builtin.at(time=makeTime(12, 30)) => notify;
}

====

SecurityCamera() {
    now => @security-camera.get_snapshot(), pic := picture_url => notify;
}

====

SearchYoutube() {
        now => @youtube.search_videos(query="lol"), video_url = "http://www.youtube.com"^^tt:url =>  notify;
}

====

TimeTest() {
        @builtin.at(time=makeTime(12, 30)) => notify;
}

====

PhoneNumberTest() {
  now => @phone.send_sms(to="+15555555555", body="");
  now => @phone.send_sms(to="+15555555555"^^tt:phone_number, body="");
  @phone.receive_sms(), from="+15555555555"^^phone_number => notify;
}

====

InvalidPhoneNumberTest() {
    now => @phone.send_sms(to="+15555555555"^^tt:email_address, body="");
}

====

LocationAsTriggerParam() {
    @weatherapi.weather(location=makeLocation(1, 3)) => notify;
}

====

RelativeLocation() {
    @weatherapi.weather(location=$context.location.current_location) => notify;
}

====

LocationWithDisplayAsTriggerParam() {
    @weatherapi.weather(location=makeLocation(1, 3, "Somewhere")) => notify;
}

====

SabrinaGeneratedMonitorTwitter() {
    @twitter(id="twitter-foo").source(), from="HillaryClinton"^^tt:username => notify;
}

====

CommandTest() {
  now => @builtin.say(message="test");
}

====

SabrinaLikesItHot(Threshold : Measure(C)) {
    @thermostat.temperature(), temperature > Threshold => @builtin.say(message="bla");
}

====

/* This should not run directly, but it gives an idea of the syntax */
/* They should all at least parse successfully. */

Test() {
    @test.source() => @builtin.debug_log(message="Test App received an event on Test Channel");
}
