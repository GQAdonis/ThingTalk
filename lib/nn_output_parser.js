// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingEngine
//
// Copyright 2017 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details
"use strict";

const Ast = require('./ast');
const Generate = require('./generate');

/**
 * Differences with the actual NN Grammar (as written in
 * almond-nnparser/grammar/thingtalk.py):
 *
 * - almond-nnparser's grammar distinguishes $get and $do, while
 *   while this one uses just $call
 *   almond-nnparser can do that because it knows the full list of
 *   gets and dos (and knows that they don't interset), whereas here
 *   we have a single FUNCTION token
 * - almond-nnparser's grammar is typed around parameter types and
 *   constants, this one is not because otherwise it would be too unwieldly
 *   to write
 * - almond-nnparser uses different terminals for <entity>_i because
 *   it autogenerates the grammar; this grammar uses a single terminal
 *   <entity> plus a lexical analysis step because I was too lazy to write
 *   down all cases by hand
 *
 * Missing features, compared with full TT:
 * - single statement
 * - no complex selectors
 * - no remote primitives (yet)
 * - no declarations
 * - no multi-field projection
 * - no alias (in aggregate and as a table/stream operator)
 * - no compute
 *
 * Differences with full TT:
 * - all filter operators are infix
 * - multiple parameter passings are prefixed with on in a join
 * - function names are one token
 * - parameter names are prefixed with param:
 * - enum choices are prefixed with enum:
 * - units are prefixed with unit:
 * - relative locations are prefixed with location:
 *
 * What to keep in mind when writing the grammar:
 * - shifts are cheap, reduces are expensive
 * - adding more symbols to a rule only increases the number of shifts
 * - adding more non-terminals to the grammar increases the number of
 *   reduces
 * - splitting a rule into multiple non-terminals increases the number of
 *   reduces
 * - the breadth of reduces matters too
 * - the overall number of rules affects the breadth of reduces
 */

const identity = (x) => x;

function parseDate(form) {
    if (form instanceof Date)
        return form;
    let now = new Date;
    let year = form.year;
    if (year < 0)
        year = now.getFullYear();
    let month = form.month;
    if (month < 0)
        month = now.getMonth() + 1;
    let day = form.day;
    if (day < 0)
        day = now.getDate();
    let hour = 0, minute = 0, second = 0;
    hour = form.hour;
    if (hour < 0)
        hour = now.getHours();
    minute = form.minute;
    if (minute < 0)
        minute = now.getMinutes();
    second = form.second;
    if (second < 0)
        second = now.getSeconds();

    return new Date(year, month-1, day, hour, minute, second);
}

module.exports = {
    '$input':         [[['$program',], identity],
                       [['answer', '$constant'], (_, constant) => constant]],

    '$program':       [[['$rule',], (rule) => new Ast.Program([], [], [rule], null)],
                       [['$constant_Entity(tt:username)', ':', '$rule'], (user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })]],

    '$rule':          [[['$stream', '=>', '$action'], (stream, _, action) => new Ast.Statement.Rule(stream, [action])],
                       [['now', '=>', '$table', '=>', '$action'], (_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])],
                       [['now', '=>', '$action'], (_1, _2, action) => new Ast.Statement.Command(null, [action])],
                       [['$rule', 'on', '$param_passing'], (rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }]],

    '$table':         [[['$call',], (get) => Ast.Table.Invocation(get, null)],
                       [['(', '$table', ')', 'filter', '$filter'], (_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)],
                       [['aggregate', 'min', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'max', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'sum', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'avg', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'count', 'of', '(', '$table', ')'], (_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)],
                       [['aggregate', 'argmin', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['aggregate', 'argmax', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['$table_join'], identity],
                       [['window', '$constant_Number', ',', '$constant_Number', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)],
                       [['timeseries', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)],
                       [['sequence', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)],
                       [['history', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)]],

    '$table_join':    [[['(', '$table', ')', 'join', '(', '$table', ')'], (_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)],
                       [['$table_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$stream':        [[['timer', 'base', '=', '$constant_Date', ',', 'interval', '=', '$constant_Measure(ms)'], (_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)],
                       [['attimer', 'time', '=', '$constant_Time'], (_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)],
                       [['monitor', '(', '$table', ')'], (monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null, null)],
                       [['monitor', '(', '$table', ')', 'on', 'new', '$out_param'], (monitor, _1, table, _2, _3, _4, pname) => new Ast.Stream.Monitor(table, [pname.name], null)],
                       [['monitor', '(', '$table', ')', 'on', 'new', '[', '$out_param_list', ']'], (monitor, _1, table, _2, _3, _4, _5, pnames, _6) => new Ast.Stream.Monitor(table, pnames.map((p) => p.name), null)],
                       [['edge', '(', '$stream', ')', 'on', '$filter'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, filter, null)],
                       // edge on true is the equivalent of "only once"
                       [['edge', '(', '$stream', ')', 'on', 'true'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, Ast.BooleanExpression.True, null)],
                       [['$stream_join'], identity]],

    '$stream_join':   [[['(', '$stream', ')', 'join', '(', '$table', ')'], (_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)],
                       [['$stream_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$action':        [[['notify'], () => Generate.notifyAction()],
                       [['$call'], identity]],

    '$call':           [[['FUNCTION'], (fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)],
                       [['$call', '$const_param'], (inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }]],

    '$param_passing': [[['PARAM_NAME', '=', '$out_param'], (pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)],
                       [['PARAM_NAME', '=', 'event'], (pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))]],

    '$const_param':   [[['PARAM_NAME', '=', '$constant'], (pname, _1, v) => new Ast.InputParam(pname.value, v)]],

    '$out_param':     [[['PARAM_NAME'], (pname) => new Ast.Value.VarRef(pname.value)]],

    '$out_param_list':[[['$out_param'], (pname) => [pname]],
                       [['$out_param_list', ',', '$out_param'], (list, _, pname) => list.concat(pname)]],

    // note that $filter is not recursive!
    // it must be in CNF form
    // also note that and takes priority over or
    // this is the opposite of regular TT (which copies JS in that respect)
    // because most filters are just a list of
    // "condition and this or that and foo or bar"
    // to be read as
    // "condition and (this or that) and (foo or bar)"
    '$filter':        [[['$or_filter'], identity],
                       [['$filter', 'and', '$or_filter'], (f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])]],

    '$or_filter':     [[['$atom_filter'], identity],
                       [['not', '$atom_filter'], (_, f) => new Ast.BooleanExpression.Not(f)],
                       [['$or_filter', 'or', '$atom_filter'], (f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])]],

    '$atom_filter':   [[['PARAM_NAME', '$value_filter'], (pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)]],

    // in almond-nnparser these are strongly typed constants, so only
    // numbers and measures can be compared for order, etc
    // we're a little looser here because otherwise it becomes unwieldly
    '$value_filter':  [[['==', '$constant'], (op, v) => [op, v]],
                       [['>=', '$constant'], (op, v) => [op, v]],
                       [['<=', '$constant'], (op, v) => [op, v]],
                       [['>', '$constant'], (op, v) => [op, v]],
                       [['<', '$constant'], (op, v) => [op, v]],
                       [['=~', '$constant_String'], (op, v) => [op, v]],
                       [['~=', '$constant_String'], (op, v) => [op, v]],
                       [['starts_with', '$constant_String'], (op, v) => [op, v]],
                       [['ends_with',  '$constant_String'], (op, v) => [op, v]],
                       [['prefix_of',  '$constant_String'], (op, v) => [op, v]],
                       [['suffix_of',  '$constant_String'], (op, v) => [op, v]],
                       [['contains',  '$constant'], (op, v) => [op, v]],
                       [['in_array',  '$constant_Array'], (op, v) => [op, v]],

                       [['==', '$out_param'], (op, v) => [op, v]],
                       [['>=', '$out_param'], (op, v) => [op, v]],
                       [['<=', '$out_param'], (op, v) => [op, v]],
                       [['>', '$out_param'], (op, v) => [op, v]],
                       [['<', '$out_param'], (op, v) => [op, v]],
                       [['=~', '$out_param'], (op, v) => [op, v]],
                       [['~=', '$out_param'], (op, v) => [op, v]],
                       [['starts_with', '$out_param'], (op, v) => [op, v]],
                       [['ends_with',  '$out_param'], (op, v) => [op, v]],
                       [['prefix_of',  '$out_param'], (op, v) => [op, v]],
                       [['suffix_of',  '$out_param'], (op, v) => [op, v]],
                       [['contains',  '$out_param'], (op, v) => [op, v]],
                       [['in_array',  '$out_param'], (op, v) => [op, v]]],

    // this non-terminal exists only for convenience
    // the almond nn-parser grammar does not have it
    '$constant':      [[['$constant_Array'], identity],
                       [['$constant_Boolean'], identity],
                       [['$constant_String'], identity],
                       [['$constant_Measure'], identity],
                       [['DURATION'], (tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)],
                       [['$constant_Number'], identity],
                       [['$constant_Location'], identity],
                       [['$constant_Date'], identity],
                       [['$constant_Time'], identity],
                       [['$constant_Entity(unknown)'], identity],
                       [['$constant_Entity(tt:username)'], identity],
                       [['$constant_Entity(tt:hashtag)'], identity],
                       [['$constant_Entity(tt:phone_number)'], identity],
                       [['$constant_Entity(tt:email_address)'], identity],
                       [['$constant_Entity(tt:path_name)'], identity],
                       [['$constant_Entity(tt:url)'], identity],
                       [['$constant_Entity(tt:device)'], identity],
                       [['$constant_Entity(tt:function)'], identity],
                       [['$constant_Enum'], identity]],

    // we cannot represent an empty array
    // I don't think that's useful anyway
    '$constant_Array': [[['[', '$constant_array_values', ']'], (_1, values, _2) => new Ast.Value.Array(values)]],

    '$constant_array_values': [[['$constant'], (v) => [v]],
                               [['$constant_array_values', ',', '$constant'], (array, _, v) => {
                                   array.push(v);
                                   return array;
                               }]],

    '$constant_Boolean': [[['true'], () => new Ast.Value.Boolean(true)],
                          [['false'], () => new Ast.Value.Boolean(false)]],

    '$constant_String': [[['""'], (str) => new Ast.Value.String('')],
                         [['QUOTED_STRING'], (str) => new Ast.Value.String(str.value)]],

    // play fast and loose with units here, because I don't want to write
    // everything by hand
    // almond-nnparser autogenerates this part
    '$constant_Measure': [[['$constant_Number', 'UNIT'], (num, unit) => new Ast.Value.Measure(num.value, unit.value)],
                          [['$constant_Measure', '$constant_Number', 'UNIT'], (v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }]],
    '$constant_Measure(ms)': [[['$constant_Measure'], identity],
                              [['DURATION'], (tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)]],

    '$constant_Number': [[['NUMBER'], (num) => new Ast.Value.Number(num.value)],
                         [['1'], () => new Ast.Value.Number(1)],
                         [['0'], () => new Ast.Value.Number(0)]],

    '$constant_Location': [[['location:current_location'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:home'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:work'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['LOCATION'], (loc) => new Ast.Value.Location(new Ast.Location.Absolute(loc.value.latitude, loc.value.longitude, loc.value.display||null))]],

    // start_of/end_of with less than 1h are not supported
    // (they don't make sense)
    '$constant_Date': [[['now'], (loc) => new Ast.Value.Date(null, '+', null)],
                       [['start_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)],
                       [['end_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)],
                       [['DATE'], (abs) => new Ast.Value.Date(parseDate(abs.value), '+', null)],
                       [['$constant_Date', '+', '$constant_Measure(ms)'], (date, op, offset) => new Ast.Value.Date(date.value, op, offset)],
                       [['$constant_Date', '-', '$constant_Measure(ms)'], (date, op, offset) => new Ast.Value.Date(date.value, op, offset)]],

    '$constant_Time': [[['TIME'], (time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second||0)]],

    // almond-nnparser expands this into the various enums in the right
    // place for a parameter (as the meaning of an enum changes according
    // to the parameter anyway)
    '$constant_Enum': [[['ENUM'], (venum) => new Ast.Value.Enum(venum.value)]],

    '$constant_Entity(unknown)': [[['GENERIC_ENTITY'], (entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)]],

    '$constant_Entity(tt:username)': [[['USERNAME'], (entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)]],

    '$constant_Entity(tt:hashtag)': [[['HASHTAG'], (entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)]],

    '$constant_Entity(tt:url)': [[['URL'], (entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)]],

    '$constant_Entity(tt:phone_number)': [[['PHONE_NUMBER'], (entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)]],

    '$constant_Entity(tt:email_address)': [[['EMAIL_ADDRESS'], (entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)]],

    '$constant_Entity(tt:path_name)': [[['PATH_NAME'], (entity) => new Ast.Value.Entity(entity.value, 'tt:path_name', null)]],

    '$constant_Entity(tt:device)': [[['DEVICE'], (entity) => new Ast.Value.Entity(entity.value, 'tt:device', null)]],

    '$constant_Entity(tt:function)': [[['FUNCTION'], (entity) => new Ast.Value.Entity(entity.kind + ':' + entity.device)]],

};

const TERMINAL_IDS = {"0":6,"1":7,"\"\"":0,"(":1,")":2,"+":3,",":4,"-":5,":":8,"<":9,"<<EOF>>":10,"<=":11,"=":12,"==":13,"=>":14,"=~":15,">":16,">=":17,"DATE":18,"DEVICE":19,"DURATION":20,"EMAIL_ADDRESS":21,"ENUM":22,"FUNCTION":23,"GENERIC_ENTITY":24,"HASHTAG":25,"LOCATION":26,"NUMBER":27,"PARAM_NAME":28,"PATH_NAME":29,"PHONE_NUMBER":30,"QUOTED_STRING":31,"TIME":32,"UNIT":33,"URL":34,"USERNAME":35,"[":36,"]":37,"aggregate":38,"and":39,"answer":40,"argmax":41,"argmin":42,"attimer":43,"avg":44,"base":45,"contains":46,"count":47,"edge":48,"end_of":49,"ends_with":50,"event":51,"false":52,"filter":53,"history":54,"in_array":55,"interval":56,"join":57,"location:current_location":58,"location:home":59,"location:work":60,"max":61,"min":62,"monitor":63,"new":64,"not":65,"notify":66,"now":67,"of":68,"on":69,"or":70,"prefix_of":71,"sequence":72,"start_of":73,"starts_with":74,"suffix_of":75,"sum":76,"time":77,"timer":78,"timeseries":79,"true":80,"window":81,"~=":82};
const RULE_NON_TERMINALS = [27,27,32,32,33,33,33,33,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,34,34,34,34,34,34,34,34,35,35,1,1,3,3,31,31,4,29,30,30,26,26,28,28,28,2,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,25,25,7,7,23,23,20,20,21,21,22,22,22,19,19,19,19,8,8,8,8,8,8,24,18,17,16,12,15,14,10,13,9,11,0];
const ARITY = [1,2,1,3,3,5,3,3,1,5,7,7,7,7,6,10,10,1,8,8,8,8,7,3,8,4,4,7,9,6,6,1,7,3,1,1,1,2,3,3,3,1,1,3,1,3,1,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,1,1,1,1,2,3,1,1,1,1,1,1,1,1,1,1,2,2,1,3,3,1,1,1,1,1,1,1,1,1,1,1,2];
const GOTO = [{"16":5,"27":2,"32":9,"33":4,"34":7,"35":13},{},{},{"5":17,"6":41,"7":18,"8":24,"9":33,"10":30,"11":34,"12":28,"13":31,"14":29,"15":32,"16":27,"17":26,"18":35,"19":23,"20":20,"22":22,"23":19,"24":25},{},{},{},{},{},{},{},{},{},{},{"34":71,"35":13},{},{},{},{},{},{"22":73},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"5":80,"6":41,"7":18,"8":24,"9":33,"10":30,"11":34,"12":28,"13":31,"14":29,"15":32,"16":27,"17":26,"18":35,"19":23,"20":20,"22":22,"23":19,"24":25,"25":79},{"31":81},{"33":83,"34":7,"35":13},{"1":84,"3":86},{"1":92,"3":90,"36":89,"37":93},{},{"3":101,"36":100,"37":93},{"34":102,"35":13},{"31":103},{},{},{"8":106},{},{},{"20":109,"21":108,"22":111},{"20":109,"21":112,"22":111},{},{},{},{},{},{},{},{},{},{"4":116},{},{},{},{"4":116},{"3":101,"36":127,"37":93},{},{},{"22":129},{"8":130},{"22":131},{"8":132},{"24":133},{},{},{"4":116},{},{},{"3":101,"36":136,"37":93},{},{},{},{},{"22":73},{},{},{},{},{"5":139,"6":41,"7":18,"8":24,"9":33,"10":30,"11":34,"12":28,"13":31,"14":29,"15":32,"16":27,"17":26,"18":35,"19":23,"20":20,"22":22,"23":19,"24":25},{"29":140},{},{},{"29":144},{"29":145},{"29":146},{"29":147},{},{"29":149},{"29":150},{"1":151,"3":86},{},{},{"31":153},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"5":163,"6":41,"7":18,"8":24,"9":33,"10":30,"11":34,"12":28,"13":31,"14":29,"15":32,"16":27,"17":26,"18":35,"19":23,"20":20,"22":22,"23":19,"24":25},{},{},{},{},{},{"22":169},{"22":170},{},{},{},{"22":173},{"20":109,"21":174,"22":111},{"22":175},{"20":109,"21":176,"22":111},{},{"2":181,"26":178,"28":180},{},{"3":101,"36":184,"37":93},{},{},{},{},{},{},{"3":101,"36":190,"37":93},{},{},{"2":181,"26":193,"28":180},{},{},{},{},{},{"29":200},{},{},{},{},{"2":203},{"38":205},{},{"20":109,"21":219,"22":111},{"3":101,"36":220,"37":93},{"3":101,"36":221,"37":93},{"3":101,"36":222,"37":93},{"3":101,"36":223,"37":93},{},{"22":225},{"22":226},{},{"3":101,"36":227,"37":93},{},{},{},{},{"29":233,"30":232},{},{"2":181,"28":234},{"2":235},{},{"6":236,"29":237},{},{"5":238,"6":41,"7":18,"8":24,"9":33,"10":30,"11":34,"12":28,"13":31,"14":29,"15":32,"16":27,"17":26,"18":35,"19":23,"20":20,"22":22,"23":19,"24":25,"29":239},{"5":240,"6":41,"7":18,"8":24,"9":33,"10":30,"11":34,"12":28,"13":31,"14":29,"15":32,"16":27,"17":26,"18":35,"19":23,"20":20,"22":22,"23":19,"24":25,"29":241},{"5":242,"6":41,"7":18,"8":24,"9":33,"10":30,"11":34,"12":28,"13":31,"14":29,"15":32,"16":27,"17":26,"18":35,"19":23,"20":20,"22":22,"23":19,"24":25,"29":243},{"5":244,"6":41,"7":18,"8":24,"9":33,"10":30,"11":34,"12":28,"13":31,"14":29,"15":32,"16":27,"17":26,"18":35,"19":23,"20":20,"22":22,"23":19,"24":25,"29":245},{"23":246,"29":247},{"23":248,"29":249},{"23":250,"29":251},{"23":252,"29":253},{"23":254,"29":255},{"23":256,"29":257},{"5":258,"6":41,"7":18,"8":24,"9":33,"10":30,"11":34,"12":28,"13":31,"14":29,"15":32,"16":27,"17":26,"18":35,"19":23,"20":20,"22":22,"23":19,"24":25,"29":259},{"5":260,"6":41,"7":18,"8":24,"9":33,"10":30,"11":34,"12":28,"13":31,"14":29,"15":32,"16":27,"17":26,"18":35,"19":23,"20":20,"22":22,"23":19,"24":25,"29":261},{},{},{},{},{},{},{},{},{},{},{"34":269,"35":13},{"34":270,"35":13},{"3":101,"36":271,"37":93},{"3":101,"36":272,"37":93},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"29":281},{"3":101,"36":282,"37":93},{"3":101,"36":283,"37":93},{},{},{},{},{},{},{},{},{}];
const PARSER_ACTION = [{"1":[1,14],"35":[1,6],"40":[1,3],"43":[1,10],"48":[1,12],"63":[1,11],"67":[1,8],"78":[1,1]},{"45":[1,15]},{"10":[0]},{"0":[1,57],"6":[1,56],"7":[1,55],"18":[1,49],"19":[1,38],"20":[1,21],"21":[1,16],"22":[1,36],"23":[1,37],"24":[1,44],"25":[1,43],"26":[1,53],"27":[1,54],"29":[1,40],"30":[1,42],"31":[1,58],"32":[1,45],"34":[1,39],"35":[1,6],"36":[1,61],"49":[1,48],"52":[1,60],"58":[1,50],"59":[1,51],"60":[1,52],"67":[1,46],"73":[1,47],"80":[1,59]},{"10":[2,2],"69":[1,62]},{"8":[1,63]},{"2":[2,122],"4":[2,122],"8":[2,122],"10":[2,122],"14":[2,122],"28":[2,122],"37":[2,122],"39":[2,122],"69":[2,122],"70":[2,122]},{"14":[1,64]},{"14":[1,65]},{"10":[2,0]},{"77":[1,66]},{"1":[1,67]},{"1":[1,68]},{"2":[2,31],"14":[2,31],"69":[1,69]},{"1":[1,14],"43":[1,10],"48":[1,12],"63":[1,70],"78":[1,1]},{"12":[1,72]},{"2":[2,126],"4":[2,126],"10":[2,126],"14":[2,126],"28":[2,126],"37":[2,126],"39":[2,126],"69":[2,126],"70":[2,126]},{"10":[2,1]},{"2":[2,77],"4":[2,77],"10":[2,77],"14":[2,77],"28":[2,77],"37":[2,77],"39":[2,77],"69":[2,77],"70":[2,77]},{"2":[2,78],"4":[2,78],"10":[2,78],"14":[2,78],"28":[2,78],"37":[2,78],"39":[2,78],"69":[2,78],"70":[2,78]},{"2":[2,79],"4":[2,79],"6":[1,56],"7":[1,55],"10":[2,79],"14":[2,79],"27":[1,54],"28":[2,79],"37":[2,79],"39":[2,79],"69":[2,79],"70":[2,79]},{"2":[2,80],"4":[2,80],"10":[2,80],"14":[2,80],"28":[2,80],"37":[2,80],"39":[2,80],"69":[2,80],"70":[2,80]},{"2":[2,81],"4":[2,81],"10":[2,81],"14":[2,81],"28":[2,81],"33":[1,74],"37":[2,81],"39":[2,81],"69":[2,81],"70":[2,81]},{"2":[2,82],"4":[2,82],"10":[2,82],"14":[2,82],"28":[2,82],"37":[2,82],"39":[2,82],"69":[2,82],"70":[2,82]},{"2":[2,83],"3":[1,75],"4":[2,83],"5":[1,76],"10":[2,83],"14":[2,83],"28":[2,83],"37":[2,83],"39":[2,83],"69":[2,83],"70":[2,83]},{"2":[2,84],"4":[2,84],"10":[2,84],"14":[2,84],"28":[2,84],"37":[2,84],"39":[2,84],"69":[2,84],"70":[2,84]},{"2":[2,85],"4":[2,85],"10":[2,85],"14":[2,85],"28":[2,85],"37":[2,85],"39":[2,85],"69":[2,85],"70":[2,85]},{"2":[2,86],"4":[2,86],"10":[2,86],"14":[2,86],"28":[2,86],"37":[2,86],"39":[2,86],"69":[2,86],"70":[2,86]},{"2":[2,87],"4":[2,87],"10":[2,87],"14":[2,87],"28":[2,87],"37":[2,87],"39":[2,87],"69":[2,87],"70":[2,87]},{"2":[2,88],"4":[2,88],"10":[2,88],"14":[2,88],"28":[2,88],"37":[2,88],"39":[2,88],"69":[2,88],"70":[2,88]},{"2":[2,89],"4":[2,89],"10":[2,89],"14":[2,89],"28":[2,89],"37":[2,89],"39":[2,89],"69":[2,89],"70":[2,89]},{"2":[2,90],"4":[2,90],"10":[2,90],"14":[2,90],"28":[2,90],"37":[2,90],"39":[2,90],"69":[2,90],"70":[2,90]},{"2":[2,91],"4":[2,91],"10":[2,91],"14":[2,91],"28":[2,91],"37":[2,91],"39":[2,91],"69":[2,91],"70":[2,91]},{"2":[2,92],"4":[2,92],"10":[2,92],"14":[2,92],"28":[2,92],"37":[2,92],"39":[2,92],"69":[2,92],"70":[2,92]},{"2":[2,93],"4":[2,93],"10":[2,93],"14":[2,93],"28":[2,93],"37":[2,93],"39":[2,93],"69":[2,93],"70":[2,93]},{"2":[2,94],"4":[2,94],"10":[2,94],"14":[2,94],"28":[2,94],"37":[2,94],"39":[2,94],"69":[2,94],"70":[2,94]},{"2":[2,120],"4":[2,120],"10":[2,120],"14":[2,120],"28":[2,120],"37":[2,120],"39":[2,120],"69":[2,120],"70":[2,120]},{"2":[2,129],"4":[2,129],"10":[2,129],"14":[2,129],"28":[2,129],"37":[2,129],"39":[2,129],"69":[2,129],"70":[2,129]},{"2":[2,128],"4":[2,128],"10":[2,128],"14":[2,128],"28":[2,128],"37":[2,128],"39":[2,128],"69":[2,128],"70":[2,128]},{"2":[2,124],"4":[2,124],"10":[2,124],"14":[2,124],"28":[2,124],"37":[2,124],"39":[2,124],"69":[2,124],"70":[2,124]},{"2":[2,127],"4":[2,127],"10":[2,127],"14":[2,127],"28":[2,127],"37":[2,127],"39":[2,127],"69":[2,127],"70":[2,127]},{"2":[2,76],"4":[2,76],"10":[2,76],"14":[2,76],"28":[2,76],"37":[2,76],"39":[2,76],"69":[2,76],"70":[2,76]},{"2":[2,125],"4":[2,125],"10":[2,125],"14":[2,125],"28":[2,125],"37":[2,125],"39":[2,125],"69":[2,125],"70":[2,125]},{"2":[2,123],"4":[2,123],"10":[2,123],"14":[2,123],"28":[2,123],"37":[2,123],"39":[2,123],"69":[2,123],"70":[2,123]},{"2":[2,121],"4":[2,121],"10":[2,121],"14":[2,121],"28":[2,121],"37":[2,121],"39":[2,121],"69":[2,121],"70":[2,121]},{"2":[2,119],"4":[2,119],"10":[2,119],"14":[2,119],"28":[2,119],"37":[2,119],"39":[2,119],"69":[2,119],"70":[2,119]},{"2":[2,113],"3":[2,113],"4":[2,113],"5":[2,113],"10":[2,113],"14":[2,113],"28":[2,113],"37":[2,113],"39":[2,113],"69":[2,113],"70":[2,113]},{"33":[1,77]},{"33":[1,78]},{"2":[2,116],"3":[2,116],"4":[2,116],"5":[2,116],"10":[2,116],"14":[2,116],"28":[2,116],"37":[2,116],"39":[2,116],"69":[2,116],"70":[2,116]},{"2":[2,109],"4":[2,109],"10":[2,109],"14":[2,109],"28":[2,109],"37":[2,109],"39":[2,109],"69":[2,109],"70":[2,109]},{"2":[2,110],"4":[2,110],"10":[2,110],"14":[2,110],"28":[2,110],"37":[2,110],"39":[2,110],"69":[2,110],"70":[2,110]},{"2":[2,111],"4":[2,111],"10":[2,111],"14":[2,111],"28":[2,111],"37":[2,111],"39":[2,111],"69":[2,111],"70":[2,111]},{"2":[2,112],"4":[2,112],"10":[2,112],"14":[2,112],"28":[2,112],"37":[2,112],"39":[2,112],"69":[2,112],"70":[2,112]},{"2":[2,106],"4":[2,106],"10":[2,106],"14":[2,106],"28":[2,106],"33":[2,106],"37":[2,106],"39":[2,106],"68":[2,106],"69":[2,106],"70":[2,106]},{"2":[2,107],"4":[2,107],"10":[2,107],"14":[2,107],"28":[2,107],"33":[2,107],"37":[2,107],"39":[2,107],"68":[2,107],"69":[2,107],"70":[2,107]},{"2":[2,108],"4":[2,108],"10":[2,108],"14":[2,108],"28":[2,108],"33":[2,108],"37":[2,108],"39":[2,108],"68":[2,108],"69":[2,108],"70":[2,108]},{"2":[2,100],"4":[2,100],"10":[2,100],"14":[2,100],"28":[2,100],"37":[2,100],"39":[2,100],"69":[2,100],"70":[2,100]},{"2":[2,101],"4":[2,101],"10":[2,101],"14":[2,101],"28":[2,101],"37":[2,101],"39":[2,101],"69":[2,101],"70":[2,101]},{"2":[2,98],"4":[2,98],"10":[2,98],"14":[2,98],"28":[2,98],"37":[2,98],"39":[2,98],"69":[2,98],"70":[2,98]},{"2":[2,99],"4":[2,99],"10":[2,99],"14":[2,99],"28":[2,99],"37":[2,99],"39":[2,99],"69":[2,99],"70":[2,99]},{"0":[1,57],"6":[1,56],"7":[1,55],"18":[1,49],"19":[1,38],"20":[1,21],"21":[1,16],"22":[1,36],"23":[1,37],"24":[1,44],"25":[1,43],"26":[1,53],"27":[1,54],"29":[1,40],"30":[1,42],"31":[1,58],"32":[1,45],"34":[1,39],"35":[1,6],"36":[1,61],"49":[1,48],"52":[1,60],"58":[1,50],"59":[1,51],"60":[1,52],"67":[1,46],"73":[1,47],"80":[1,59]},{"28":[1,82]},{"1":[1,14],"43":[1,10],"48":[1,12],"63":[1,11],"67":[1,8],"78":[1,1]},{"23":[1,87],"66":[1,85]},{"1":[1,91],"23":[1,87],"38":[1,88],"54":[1,97],"66":[1,85],"72":[1,96],"79":[1,95],"81":[1,94]},{"12":[1,98]},{"1":[1,91],"23":[1,87],"38":[1,99],"54":[1,97],"72":[1,96],"79":[1,95],"81":[1,94]},{"1":[1,14],"43":[1,10],"48":[1,12],"63":[1,70],"78":[1,1]},{"28":[1,82]},{"1":[1,104]},{"2":[1,105]},{"18":[1,49],"49":[1,48],"67":[1,46],"73":[1,47]},{"33":[1,107]},{"2":[2,102],"3":[2,102],"4":[2,102],"5":[2,102],"6":[2,102],"7":[2,102],"10":[2,102],"14":[2,102],"27":[2,102],"28":[2,102],"37":[2,102],"39":[2,102],"68":[2,102],"69":[2,102],"70":[2,102]},{"6":[1,56],"7":[1,55],"20":[1,110],"27":[1,54]},{"6":[1,56],"7":[1,55],"20":[1,110],"27":[1,54]},{"2":[2,114],"3":[2,114],"4":[2,114],"5":[2,114],"10":[2,114],"14":[2,114],"28":[2,114],"37":[2,114],"39":[2,114],"69":[2,114],"70":[2,114]},{"2":[2,115],"3":[2,115],"4":[2,115],"5":[2,115],"10":[2,115],"14":[2,115],"28":[2,115],"37":[2,115],"39":[2,115],"69":[2,115],"70":[2,115]},{"4":[1,114],"37":[1,113]},{"4":[2,96],"37":[2,96]},{"10":[2,7],"69":[2,7]},{"12":[1,115]},{"10":[2,3],"69":[1,62]},{"10":[2,4],"69":[2,4]},{"10":[2,34],"69":[2,34]},{"10":[2,35],"28":[1,117],"69":[2,35]},{"2":[2,36],"10":[2,36],"14":[2,36],"28":[2,36],"69":[2,36]},{"41":[1,124],"42":[1,123],"44":[1,118],"47":[1,122],"61":[1,120],"62":[1,119],"76":[1,121]},{"14":[1,125]},{"2":[2,8],"10":[2,35],"14":[2,8],"28":[1,117],"69":[2,35]},{"1":[1,91],"23":[1,87],"38":[1,126],"54":[1,97],"72":[1,96],"79":[1,95],"81":[1,94]},{"10":[2,6],"69":[2,6]},{"2":[2,17],"14":[2,17],"69":[1,128]},{"6":[1,56],"7":[1,55],"27":[1,54]},{"18":[1,49],"49":[1,48],"67":[1,46],"73":[1,47]},{"6":[1,56],"7":[1,55],"27":[1,54]},{"18":[1,49],"49":[1,48],"67":[1,46],"73":[1,47]},{"32":[1,45]},{"41":[1,124],"42":[1,123],"44":[1,118],"47":[1,122],"61":[1,120],"62":[1,119],"76":[1,121]},{"2":[1,134]},{"2":[2,8],"14":[2,8],"28":[1,117]},{"2":[1,135]},{"2":[2,33],"14":[2,33],"69":[2,33]},{"1":[1,91],"23":[1,87],"38":[1,99],"54":[1,97],"72":[1,96],"79":[1,95],"81":[1,94]},{"57":[1,137]},{"3":[1,75],"4":[1,138],"5":[1,76]},{"2":[2,103],"3":[2,103],"4":[2,103],"5":[2,103],"6":[2,103],"7":[2,103],"10":[2,103],"14":[2,103],"27":[2,103],"28":[2,103],"37":[2,103],"39":[2,103],"68":[2,103],"69":[2,103],"70":[2,103]},{"2":[2,117],"3":[2,117],"4":[2,117],"5":[2,117],"10":[2,117],"14":[2,117],"28":[2,117],"37":[2,117],"39":[2,117],"69":[2,117],"70":[2,117]},{"2":[2,104],"3":[2,104],"4":[2,104],"5":[2,104],"6":[1,56],"7":[1,55],"10":[2,104],"14":[2,104],"27":[1,54],"28":[2,104],"37":[2,104],"39":[2,104],"68":[2,104],"69":[2,104],"70":[2,104]},{"2":[2,105],"3":[2,105],"4":[2,105],"5":[2,105],"10":[2,105],"14":[2,105],"28":[2,105],"37":[2,105],"39":[2,105],"68":[2,105],"69":[2,105],"70":[2,105]},{"33":[1,74]},{"2":[2,118],"3":[2,118],"4":[2,118],"5":[2,118],"10":[2,118],"14":[2,118],"28":[2,118],"37":[2,118],"39":[2,118],"69":[2,118],"70":[2,118]},{"2":[2,95],"4":[2,95],"10":[2,95],"14":[2,95],"28":[2,95],"37":[2,95],"39":[2,95],"69":[2,95],"70":[2,95]},{"0":[1,57],"6":[1,56],"7":[1,55],"18":[1,49],"19":[1,38],"20":[1,21],"21":[1,16],"22":[1,36],"23":[1,37],"24":[1,44],"25":[1,43],"26":[1,53],"27":[1,54],"29":[1,40],"30":[1,42],"31":[1,58],"32":[1,45],"34":[1,39],"35":[1,6],"36":[1,61],"49":[1,48],"52":[1,60],"58":[1,50],"59":[1,51],"60":[1,52],"67":[1,46],"73":[1,47],"80":[1,59]},{"28":[1,142],"51":[1,141]},{"2":[2,37],"10":[2,37],"14":[2,37],"28":[2,37],"69":[2,37]},{"12":[1,143]},{"28":[1,142]},{"28":[1,142]},{"28":[1,142]},{"28":[1,142]},{"68":[1,148]},{"28":[1,142]},{"28":[1,142]},{"23":[1,87],"66":[1,85]},{"41":[1,124],"42":[1,123],"44":[1,118],"47":[1,122],"61":[1,120],"62":[1,119],"76":[1,121]},{"2":[1,152]},{"28":[1,82]},{"4":[1,154]},{"3":[1,75],"4":[1,155],"5":[1,76]},{"4":[1,156]},{"3":[1,75],"4":[1,157],"5":[1,76]},{"2":[2,25],"14":[2,25]},{"2":[2,26],"14":[2,26],"69":[1,158]},{"69":[1,159]},{"2":[1,160]},{"1":[1,161]},{"56":[1,162]},{"4":[2,97],"37":[2,97]},{"2":[2,38],"10":[2,38],"14":[2,38],"69":[2,38]},{"2":[2,39],"10":[2,39],"14":[2,39],"69":[2,39]},{"2":[2,41],"4":[2,41],"6":[2,41],"7":[2,41],"10":[2,41],"14":[2,41],"27":[2,41],"37":[2,41],"39":[2,41],"68":[2,41],"69":[2,41],"70":[2,41]},{"0":[1,57],"6":[1,56],"7":[1,55],"18":[1,49],"19":[1,38],"20":[1,21],"21":[1,16],"22":[1,36],"23":[1,37],"24":[1,44],"25":[1,43],"26":[1,53],"27":[1,54],"29":[1,40],"30":[1,42],"31":[1,58],"32":[1,45],"34":[1,39],"35":[1,6],"36":[1,61],"49":[1,48],"52":[1,60],"58":[1,50],"59":[1,51],"60":[1,52],"67":[1,46],"73":[1,47],"80":[1,59]},{"68":[1,164]},{"68":[1,165]},{"68":[1,166]},{"68":[1,167]},{"1":[1,168]},{"6":[1,56],"7":[1,55],"27":[1,54]},{"6":[1,56],"7":[1,55],"27":[1,54]},{"10":[2,5],"69":[2,5]},{"53":[1,171],"57":[1,172]},{"2":[2,23],"14":[2,23],"69":[2,23]},{"6":[1,56],"7":[1,55],"27":[1,54]},{"6":[1,56],"7":[1,55],"20":[1,110],"27":[1,54]},{"6":[1,56],"7":[1,55],"27":[1,54]},{"6":[1,56],"7":[1,55],"20":[1,110],"27":[1,54]},{"64":[1,177]},{"28":[1,183],"65":[1,182],"80":[1,179]},{"2":[2,26],"14":[2,26],"69":[1,158]},{"1":[1,91],"23":[1,87],"38":[1,126],"54":[1,97],"72":[1,96],"79":[1,95],"81":[1,94]},{"12":[1,185]},{"2":[2,40],"10":[2,40],"14":[2,40],"28":[2,40],"69":[2,40]},{"1":[1,186]},{"1":[1,187]},{"1":[1,188]},{"1":[1,189]},{"1":[1,91],"23":[1,87],"38":[1,126],"54":[1,97],"72":[1,96],"79":[1,95],"81":[1,94]},{"4":[1,191]},{"4":[1,192]},{"28":[1,183],"65":[1,182]},{"1":[1,194]},{"68":[1,195]},{"68":[1,196]},{"68":[1,197]},{"68":[1,198]},{"28":[1,142],"36":[1,199]},{"2":[2,29],"14":[2,29],"39":[1,201]},{"2":[2,30],"14":[2,30]},{"2":[2,44],"14":[2,44],"39":[2,44],"70":[1,202]},{"2":[2,46],"14":[2,46],"39":[2,46],"70":[2,46]},{"28":[1,183]},{"9":[1,209],"11":[1,207],"13":[1,217],"15":[1,210],"16":[1,208],"17":[1,206],"46":[1,216],"50":[1,213],"55":[1,204],"71":[1,214],"74":[1,212],"75":[1,215],"82":[1,211]},{"2":[1,218]},{"6":[1,56],"7":[1,55],"20":[1,110],"27":[1,54]},{"1":[1,91],"23":[1,87],"38":[1,126],"54":[1,97],"72":[1,96],"79":[1,95],"81":[1,94]},{"1":[1,91],"23":[1,87],"38":[1,126],"54":[1,97],"72":[1,96],"79":[1,95],"81":[1,94]},{"1":[1,91],"23":[1,87],"38":[1,126],"54":[1,97],"72":[1,96],"79":[1,95],"81":[1,94]},{"1":[1,91],"23":[1,87],"38":[1,126],"54":[1,97],"72":[1,96],"79":[1,95],"81":[1,94]},{"2":[1,224]},{"6":[1,56],"7":[1,55],"27":[1,54]},{"6":[1,56],"7":[1,55],"27":[1,54]},{"2":[2,9],"14":[2,9],"39":[1,201]},{"1":[1,91],"23":[1,87],"38":[1,126],"54":[1,97],"72":[1,96],"79":[1,95],"81":[1,94]},{"1":[1,228]},{"1":[1,229]},{"1":[1,230]},{"1":[1,231]},{"28":[1,142]},{"2":[2,27],"14":[2,27]},{"28":[1,183],"65":[1,182]},{"28":[1,183]},{"2":[2,47],"14":[2,47],"39":[2,47],"70":[2,47]},{"28":[1,142],"36":[1,61]},{"2":[2,49],"14":[2,49],"39":[2,49],"70":[2,49]},{"0":[1,57],"6":[1,56],"7":[1,55],"18":[1,49],"19":[1,38],"20":[1,21],"21":[1,16],"22":[1,36],"23":[1,37],"24":[1,44],"25":[1,43],"26":[1,53],"27":[1,54],"28":[1,142],"29":[1,40],"30":[1,42],"31":[1,58],"32":[1,45],"34":[1,39],"35":[1,6],"36":[1,61],"49":[1,48],"52":[1,60],"58":[1,50],"59":[1,51],"60":[1,52],"67":[1,46],"73":[1,47],"80":[1,59]},{"0":[1,57],"6":[1,56],"7":[1,55],"18":[1,49],"19":[1,38],"20":[1,21],"21":[1,16],"22":[1,36],"23":[1,37],"24":[1,44],"25":[1,43],"26":[1,53],"27":[1,54],"28":[1,142],"29":[1,40],"30":[1,42],"31":[1,58],"32":[1,45],"34":[1,39],"35":[1,6],"36":[1,61],"49":[1,48],"52":[1,60],"58":[1,50],"59":[1,51],"60":[1,52],"67":[1,46],"73":[1,47],"80":[1,59]},{"0":[1,57],"6":[1,56],"7":[1,55],"18":[1,49],"19":[1,38],"20":[1,21],"21":[1,16],"22":[1,36],"23":[1,37],"24":[1,44],"25":[1,43],"26":[1,53],"27":[1,54],"28":[1,142],"29":[1,40],"30":[1,42],"31":[1,58],"32":[1,45],"34":[1,39],"35":[1,6],"36":[1,61],"49":[1,48],"52":[1,60],"58":[1,50],"59":[1,51],"60":[1,52],"67":[1,46],"73":[1,47],"80":[1,59]},{"0":[1,57],"6":[1,56],"7":[1,55],"18":[1,49],"19":[1,38],"20":[1,21],"21":[1,16],"22":[1,36],"23":[1,37],"24":[1,44],"25":[1,43],"26":[1,53],"27":[1,54],"28":[1,142],"29":[1,40],"30":[1,42],"31":[1,58],"32":[1,45],"34":[1,39],"35":[1,6],"36":[1,61],"49":[1,48],"52":[1,60],"58":[1,50],"59":[1,51],"60":[1,52],"67":[1,46],"73":[1,47],"80":[1,59]},{"0":[1,57],"28":[1,142],"31":[1,58]},{"0":[1,57],"28":[1,142],"31":[1,58]},{"0":[1,57],"28":[1,142],"31":[1,58]},{"0":[1,57],"28":[1,142],"31":[1,58]},{"0":[1,57],"28":[1,142],"31":[1,58]},{"0":[1,57],"28":[1,142],"31":[1,58]},{"0":[1,57],"6":[1,56],"7":[1,55],"18":[1,49],"19":[1,38],"20":[1,21],"21":[1,16],"22":[1,36],"23":[1,37],"24":[1,44],"25":[1,43],"26":[1,53],"27":[1,54],"28":[1,142],"29":[1,40],"30":[1,42],"31":[1,58],"32":[1,45],"34":[1,39],"35":[1,6],"36":[1,61],"49":[1,48],"52":[1,60],"58":[1,50],"59":[1,51],"60":[1,52],"67":[1,46],"73":[1,47],"80":[1,59]},{"0":[1,57],"6":[1,56],"7":[1,55],"18":[1,49],"19":[1,38],"20":[1,21],"21":[1,16],"22":[1,36],"23":[1,37],"24":[1,44],"25":[1,43],"26":[1,53],"27":[1,54],"28":[1,142],"29":[1,40],"30":[1,42],"31":[1,58],"32":[1,45],"34":[1,39],"35":[1,6],"36":[1,61],"49":[1,48],"52":[1,60],"58":[1,50],"59":[1,51],"60":[1,52],"67":[1,46],"73":[1,47],"80":[1,59]},{"2":[2,32],"14":[2,32],"69":[2,32]},{"2":[2,24],"14":[2,24]},{"2":[1,262]},{"2":[1,263]},{"2":[1,264]},{"2":[1,265]},{"2":[2,14],"14":[2,14]},{"68":[1,266]},{"68":[1,267]},{"2":[1,268]},{"1":[1,14],"43":[1,10],"48":[1,12],"63":[1,70],"78":[1,1]},{"1":[1,14],"43":[1,10],"48":[1,12],"63":[1,70],"78":[1,1]},{"1":[1,91],"23":[1,87],"38":[1,126],"54":[1,97],"72":[1,96],"79":[1,95],"81":[1,94]},{"1":[1,91],"23":[1,87],"38":[1,126],"54":[1,97],"72":[1,96],"79":[1,95],"81":[1,94]},{"4":[1,274],"37":[1,273]},{"4":[2,42],"37":[2,42]},{"2":[2,45],"14":[2,45],"39":[2,45],"70":[1,202]},{"2":[2,48],"14":[2,48],"39":[2,48],"70":[2,48]},{"2":[2,62],"14":[2,62],"39":[2,62],"70":[2,62]},{"2":[2,75],"14":[2,75],"39":[2,75],"70":[2,75]},{"2":[2,51],"14":[2,51],"39":[2,51],"70":[2,51]},{"2":[2,64],"14":[2,64],"39":[2,64],"70":[2,64]},{"2":[2,52],"14":[2,52],"39":[2,52],"70":[2,52]},{"2":[2,65],"14":[2,65],"39":[2,65],"70":[2,65]},{"2":[2,53],"14":[2,53],"39":[2,53],"70":[2,53]},{"2":[2,66],"14":[2,66],"39":[2,66],"70":[2,66]},{"2":[2,54],"14":[2,54],"39":[2,54],"70":[2,54]},{"2":[2,67],"14":[2,67],"39":[2,67],"70":[2,67]},{"2":[2,55],"14":[2,55],"39":[2,55],"70":[2,55]},{"2":[2,68],"14":[2,68],"39":[2,68],"70":[2,68]},{"2":[2,56],"14":[2,56],"39":[2,56],"70":[2,56]},{"2":[2,69],"14":[2,69],"39":[2,69],"70":[2,69]},{"2":[2,57],"14":[2,57],"39":[2,57],"70":[2,57]},{"2":[2,70],"14":[2,70],"39":[2,70],"70":[2,70]},{"2":[2,58],"14":[2,58],"39":[2,58],"70":[2,58]},{"2":[2,71],"14":[2,71],"39":[2,71],"70":[2,71]},{"2":[2,59],"14":[2,59],"39":[2,59],"70":[2,59]},{"2":[2,72],"14":[2,72],"39":[2,72],"70":[2,72]},{"2":[2,60],"14":[2,60],"39":[2,60],"70":[2,60]},{"2":[2,73],"14":[2,73],"39":[2,73],"70":[2,73]},{"2":[2,61],"14":[2,61],"39":[2,61],"70":[2,61]},{"2":[2,74],"14":[2,74],"39":[2,74],"70":[2,74]},{"2":[2,50],"14":[2,50],"39":[2,50],"70":[2,50]},{"2":[2,63],"14":[2,63],"39":[2,63],"70":[2,63]},{"2":[2,13],"14":[2,13]},{"2":[2,10],"14":[2,10]},{"2":[2,11],"14":[2,11]},{"2":[2,12],"14":[2,12]},{"1":[1,275]},{"1":[1,276]},{"2":[2,22],"14":[2,22],"69":[2,22]},{"2":[1,277]},{"2":[1,278]},{"2":[1,279]},{"2":[1,280]},{"2":[2,28],"14":[2,28]},{"28":[1,142]},{"1":[1,91],"23":[1,87],"38":[1,126],"54":[1,97],"72":[1,96],"79":[1,95],"81":[1,94]},{"1":[1,91],"23":[1,87],"38":[1,126],"54":[1,97],"72":[1,96],"79":[1,95],"81":[1,94]},{"2":[2,18],"14":[2,18]},{"2":[2,19],"14":[2,19]},{"2":[2,20],"14":[2,20]},{"2":[2,21],"14":[2,21]},{"4":[2,43],"37":[2,43]},{"2":[1,284]},{"2":[1,285]},{"2":[2,15],"14":[2,15]},{"2":[2,16],"14":[2,16]}];
const SEMANTIC_ACTION = [
((x) => x),
((_, constant) => constant),
((rule) => new Ast.Program([], [], [rule], null)),
((user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })),
((stream, _, action) => new Ast.Statement.Rule(stream, [action])),
((_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])),
((_1, _2, action) => new Ast.Statement.Command(null, [action])),
((rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }),
((get) => Ast.Table.Invocation(get, null)),
((_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((x) => x),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)),
((_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
((_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)),
((_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)),
((monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null, null)),
((monitor, _1, table, _2, _3, _4, pname) => new Ast.Stream.Monitor(table, [pname.name], null)),
((monitor, _1, table, _2, _3, _4, _5, pnames, _6) => new Ast.Stream.Monitor(table, pnames.map((p) => p.name), null)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, filter, null)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, Ast.BooleanExpression.True, null)),
((x) => x),
((_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
(() => Generate.notifyAction()),
((x) => x),
((fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)),
((inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }),
((pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)),
((pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))),
((pname, _1, v) => new Ast.InputParam(pname.value, v)),
((pname) => new Ast.Value.VarRef(pname.value)),
((pname) => [pname]),
((list, _, pname) => list.concat(pname)),
((x) => x),
((f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])),
((x) => x),
((_, f) => new Ast.BooleanExpression.Not(f)),
((f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])),
((pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((_1, values, _2) => new Ast.Value.Array(values)),
((v) => [v]),
((array, _, v) => {
                                   array.push(v);
                                   return array;
                               }),
(() => new Ast.Value.Boolean(true)),
(() => new Ast.Value.Boolean(false)),
((str) => new Ast.Value.String('')),
((str) => new Ast.Value.String(str.value)),
((num, unit) => new Ast.Value.Measure(num.value, unit.value)),
((v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }),
((x) => x),
((tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)),
((num) => new Ast.Value.Number(num.value)),
(() => new Ast.Value.Number(1)),
(() => new Ast.Value.Number(0)),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((loc) => new Ast.Value.Location(new Ast.Location.Absolute(loc.value.latitude, loc.value.longitude, loc.value.display||null))),
((loc) => new Ast.Value.Date(null, '+', null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)),
((abs) => new Ast.Value.Date(parseDate(abs.value), '+', null)),
((date, op, offset) => new Ast.Value.Date(date.value, op, offset)),
((date, op, offset) => new Ast.Value.Date(date.value, op, offset)),
((time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second||0)),
((venum) => new Ast.Value.Enum(venum.value)),
((entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:path_name', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:device', null)),
((entity) => new Ast.Value.Entity(entity.kind + ':' + entity.device)),
((x, _) => x),
];
module.exports = require('./sr_parser')(TERMINAL_IDS, RULE_NON_TERMINALS, ARITY, GOTO, PARSER_ACTION, SEMANTIC_ACTION);
