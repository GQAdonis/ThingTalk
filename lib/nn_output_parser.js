// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingEngine
//
// Copyright 2017 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details
"use strict";

const Ast = require('./ast');
const Generate = require('./generate');

/**
 * Differences with the actual NN Grammar (as written in
 * almond-nnparser/grammar/thingtalk.py):
 *
 * - almond-nnparser's grammar distinguishes $get and $do, while
 *   while this one uses just $call
 *   almond-nnparser can do that because it knows the full list of
 *   gets and dos (and knows that they don't interset), whereas here
 *   we have a single FUNCTION token
 * - almond-nnparser's grammar is typed around parameter types and
 *   constants, this one is not because otherwise it would be too unwieldly
 *   to write
 * - almond-nnparser uses different terminals for <entity>_i because
 *   it autogenerates the grammar; this grammar uses a single terminal
 *   <entity> plus a lexical analysis step because I was too lazy to write
 *   down all cases by hand
 *
 * Missing features, compared with full TT:
 * - single statement
 * - no complex selectors
 * - no remote primitives (yet)
 * - no declarations
 * - no multi-field projection
 * - no alias (in aggregate and as a table/stream operator)
 * - no compute
 *
 * Differences with full TT:
 * - all filter operators are infix
 * - multiple parameter passings are prefixed with on in a join
 * - function names are one token
 * - parameter names are prefixed with param:
 * - enum choices are prefixed with enum:
 * - units are prefixed with unit:
 * - relative locations are prefixed with location:
 *
 * What to keep in mind when writing the grammar:
 * - shifts are cheap, reduces are expensive
 * - adding more symbols to a rule only increases the number of shifts
 * - adding more non-terminals to the grammar increases the number of
 *   reduces
 * - splitting a rule into multiple non-terminals increases the number of
 *   reduces
 * - the breadth of reduces matters too
 * - the overall number of rules affects the breadth of reduces
 */

const identity = (x) => x;

function parseDate(form) {
    if (form instanceof Date)
        return form;
    let now = new Date;
    let year = form.year;
    if (year < 0)
        year = now.getFullYear();
    let month = form.month;
    if (month < 0)
        month = now.getMonth() + 1;
    let day = form.day;
    if (day < 0)
        day = now.getDate();
    let hour = 0, minute = 0, second = 0;
    hour = form.hour;
    if (hour < 0)
        hour = now.getHours();
    minute = form.minute;
    if (minute < 0)
        minute = now.getMinutes();
    second = form.second;
    if (second < 0)
        second = now.getSeconds();

    return new Date(year, month-1, day, hour, minute, second);
}

module.exports = {
    '$input':         [[['$program',], identity],
                       [['answer', '$constant'], (_, constant) => constant]],

    '$program':       [[['$rule',], (rule) => new Ast.Program([], [], [rule], null)],
                       [['$constant_Entity(tt:username)', ':', '$rule'], (user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })]],

    '$rule':          [[['$stream', '=>', '$action'], (stream, _, action) => new Ast.Statement.Rule(stream, [action])],
                       [['now', '=>', '$table', '=>', '$action'], (_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])],
                       [['now', '=>', '$action'], (_1, _2, action) => new Ast.Statement.Command(null, [action])],
                       [['$rule', 'on', '$param_passing'], (rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }]],

    '$table':         [[['$call',], (get) => Ast.Table.Invocation(get, null)],
                       [['(', '$table', ')', 'filter', '$filter'], (_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)],
                       [['aggregate', 'min', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'max', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'sum', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'avg', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'count', 'of', '(', '$table', ')'], (_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)],
                       [['aggregate', 'argmin', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['aggregate', 'argmax', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['$table_join'], identity],
                       [['window', '$constant_Number', ',', '$constant_Number', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)],
                       [['timeseries', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)],
                       [['sequence', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)],
                       [['history', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)]],

    '$table_join':    [[['(', '$table', ')', 'join', '(', '$table', ')'], (_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)],
                       [['$table_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$stream':        [[['timer', 'base', '=', '$constant_Date', ',', 'interval', '=', '$constant_Measure(ms)'], (_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)],
                       [['attimer', 'time', '=', '$constant_Time'], (_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)],
                       [['monitor', '(', '$table', ')'], (monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null, null)],
                       [['monitor', '(', '$table', ')', 'on', 'new', '$out_param'], (monitor, _1, table, _2, _3, _4, pname) => new Ast.Stream.Monitor(table, [pname.name], null)],
                       [['monitor', '(', '$table', ')', 'on', 'new', '[', '$out_param_list', ']'], (monitor, _1, table, _2, _3, _4, _5, pnames, _6) => new Ast.Stream.Monitor(table, pnames.map((p) => p.name), null)],
                       [['edge', '(', '$stream', ')', 'on', '$filter'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, filter, null)],
                       // edge on true is the equivalent of "only once"
                       [['edge', '(', '$stream', ')', 'on', 'true'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, Ast.BooleanExpression.True, null)],
                       [['$stream_join'], identity]],

    '$stream_join':   [[['(', '$stream', ')', 'join', '(', '$table', ')'], (_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)],
                       [['$stream_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$action':        [[['notify'], () => Generate.notifyAction()],
                       [['$call'], identity]],

    '$call':           [[['FUNCTION'], (fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)],
                       [['$call', '$const_param'], (inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }]],

    '$param_passing': [[['PARAM_NAME', '=', '$out_param'], (pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)],
                       [['PARAM_NAME', '=', 'event'], (pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))]],

    '$const_param':   [[['PARAM_NAME', '=', '$constant'], (pname, _1, v) => new Ast.InputParam(pname.value, v)]],

    '$out_param':     [[['PARAM_NAME'], (pname) => new Ast.Value.VarRef(pname.value)]],

    '$out_param_list':[[['$out_param'], (pname) => [pname]],
                       [['$out_param_list', ',', '$out_param'], (list, _, pname) => list.concat(pname)]],

    // note that $filter is not recursive!
    // it must be in CNF form
    // also note that and takes priority over or
    // this is the opposite of regular TT (which copies JS in that respect)
    // because most filters are just a list of
    // "condition and this or that and foo or bar"
    // to be read as
    // "condition and (this or that) and (foo or bar)"
    '$filter':        [[['$or_filter'], identity],
                       [['$filter', 'and', '$or_filter'], (f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])]],

    '$or_filter':     [[['$atom_filter'], identity],
                       [['not', '$atom_filter'], (_, f) => new Ast.BooleanExpression.Not(f)],
                       [['$or_filter', 'or', '$atom_filter'], (f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])]],

    '$atom_filter':   [[['PARAM_NAME', '$value_filter'], (pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)]],

    // in almond-nnparser these are strongly typed constants, so only
    // numbers and measures can be compared for order, etc
    // we're a little looser here because otherwise it becomes unwieldly
    '$value_filter':  [[['==', '$constant'], (op, v) => [op, v]],
                       [['>=', '$constant'], (op, v) => [op, v]],
                       [['<=', '$constant'], (op, v) => [op, v]],
                       [['>', '$constant'], (op, v) => [op, v]],
                       [['<', '$constant'], (op, v) => [op, v]],
                       [['=~', '$constant_String'], (op, v) => [op, v]],
                       [['~=', '$constant_String'], (op, v) => [op, v]],
                       [['starts_with', '$constant_String'], (op, v) => [op, v]],
                       [['ends_with',  '$constant_String'], (op, v) => [op, v]],
                       [['prefix_of',  '$constant_String'], (op, v) => [op, v]],
                       [['suffix_of',  '$constant_String'], (op, v) => [op, v]],
                       [['contains',  '$constant'], (op, v) => [op, v]],
                       [['in_array',  '$constant_Array'], (op, v) => [op, v]],

                       [['==', '$out_param'], (op, v) => [op, v]],
                       [['>=', '$out_param'], (op, v) => [op, v]],
                       [['<=', '$out_param'], (op, v) => [op, v]],
                       [['>', '$out_param'], (op, v) => [op, v]],
                       [['<', '$out_param'], (op, v) => [op, v]],
                       [['=~', '$out_param'], (op, v) => [op, v]],
                       [['~=', '$out_param'], (op, v) => [op, v]],
                       [['starts_with', '$out_param'], (op, v) => [op, v]],
                       [['ends_with',  '$out_param'], (op, v) => [op, v]],
                       [['prefix_of',  '$out_param'], (op, v) => [op, v]],
                       [['suffix_of',  '$out_param'], (op, v) => [op, v]],
                       [['contains',  '$out_param'], (op, v) => [op, v]],
                       [['in_array',  '$out_param'], (op, v) => [op, v]]],

    // this non-terminal exists only for convenience
    // the almond nn-parser grammar does not have it
    '$constant':      [[['$constant_Array'], identity],
                       [['$constant_Boolean'], identity],
                       [['$constant_String'], identity],
                       [['$constant_Measure'], identity],
                       [['DURATION'], (tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)],
                       [['$constant_Number'], identity],
                       [['$constant_Currency'], identity],
                       [['$constant_Location'], identity],
                       [['$constant_Date'], identity],
                       [['$constant_Time'], identity],
                       [['$constant_Entity(unknown)'], identity],
                       [['$constant_Entity(tt:username)'], identity],
                       [['$constant_Entity(tt:hashtag)'], identity],
                       [['$constant_Entity(tt:phone_number)'], identity],
                       [['$constant_Entity(tt:email_address)'], identity],
                       [['$constant_Entity(tt:path_name)'], identity],
                       [['$constant_Entity(tt:url)'], identity],
                       [['$constant_Entity(tt:device)'], identity],
                       [['$constant_Entity(tt:function)'], identity],
                       [['$constant_Enum'], identity]],

    // we cannot represent an empty array
    // I don't think that's useful anyway
    '$constant_Array': [[['[', '$constant_array_values', ']'], (_1, values, _2) => new Ast.Value.Array(values)]],

    '$constant_array_values': [[['$constant'], (v) => [v]],
                               [['$constant_array_values', ',', '$constant'], (array, _, v) => {
                                   array.push(v);
                                   return array;
                               }]],

    '$constant_Boolean': [[['true'], () => new Ast.Value.Boolean(true)],
                          [['false'], () => new Ast.Value.Boolean(false)]],

    '$constant_String': [[['""'], (str) => new Ast.Value.String('')],
                         [['QUOTED_STRING'], (str) => new Ast.Value.String(str.value)]],

    // play fast and loose with units here, because I don't want to write
    // everything by hand
    // almond-nnparser autogenerates this part
    '$constant_Measure': [[['$constant_Number', 'UNIT'], (num, unit) => new Ast.Value.Measure(num.value, unit.value)],
                          [['$constant_Measure', '$constant_Number', 'UNIT'], (v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }]],
    '$constant_Measure(ms)': [[['$constant_Measure'], identity],
                              [['DURATION'], (tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)]],

    '$constant_Number': [[['NUMBER'], (num) => new Ast.Value.Number(num.value)],
                         [['1'], () => new Ast.Value.Number(1)],
                         [['0'], () => new Ast.Value.Number(0)]],

    '$constant_Currency': [[['CURRENCY'], (tok) => new Ast.Value.Currency(tok.value.value, tok.value.unit)]],

    '$constant_Location': [[['location:current_location'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:home'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:work'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['LOCATION'], (loc) => new Ast.Value.Location(new Ast.Location.Absolute(loc.value.latitude, loc.value.longitude, loc.value.display||null))]],

    // start_of/end_of with less than 1h are not supported
    // (they don't make sense)
    '$constant_Date': [[['now'], (loc) => new Ast.Value.Date(null, '+', null)],
                       [['start_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)],
                       [['end_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)],
                       [['DATE'], (abs) => new Ast.Value.Date(parseDate(abs.value), '+', null)],
                       [['$constant_Date', '+', '$constant_Measure(ms)'], (date, op, offset) => new Ast.Value.Date(date.value, op, offset)],
                       [['$constant_Date', '-', '$constant_Measure(ms)'], (date, op, offset) => new Ast.Value.Date(date.value, op, offset)]],

    '$constant_Time': [[['TIME'], (time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second||0)]],

    // almond-nnparser expands this into the various enums in the right
    // place for a parameter (as the meaning of an enum changes according
    // to the parameter anyway)
    '$constant_Enum': [[['ENUM'], (venum) => new Ast.Value.Enum(venum.value)]],

    '$constant_Entity(unknown)': [[['GENERIC_ENTITY'], (entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)]],

    '$constant_Entity(tt:username)': [[['USERNAME'], (entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)]],

    '$constant_Entity(tt:hashtag)': [[['HASHTAG'], (entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)]],

    '$constant_Entity(tt:url)': [[['URL'], (entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)]],

    '$constant_Entity(tt:phone_number)': [[['PHONE_NUMBER'], (entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)]],

    '$constant_Entity(tt:email_address)': [[['EMAIL_ADDRESS'], (entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)]],

    '$constant_Entity(tt:path_name)': [[['PATH_NAME'], (entity) => new Ast.Value.Entity(entity.value, 'tt:path_name', null)]],

    '$constant_Entity(tt:device)': [[['DEVICE'], (entity) => new Ast.Value.Entity(entity.value, 'tt:device', null)]],

    '$constant_Entity(tt:function)': [[['FUNCTION'], (entity) => new Ast.Value.Entity(entity.kind + ':' + entity.device)]],

};

const TERMINAL_IDS = {"0":6,"1":7,"\"\"":0,"(":1,")":2,"+":3,",":4,"-":5,":":8,"<":9,"<<EOF>>":10,"<=":11,"=":12,"==":13,"=>":14,"=~":15,">":16,">=":17,"CURRENCY":18,"DATE":19,"DEVICE":20,"DURATION":21,"EMAIL_ADDRESS":22,"ENUM":23,"FUNCTION":24,"GENERIC_ENTITY":25,"HASHTAG":26,"LOCATION":27,"NUMBER":28,"PARAM_NAME":29,"PATH_NAME":30,"PHONE_NUMBER":31,"QUOTED_STRING":32,"TIME":33,"UNIT":34,"URL":35,"USERNAME":36,"[":37,"]":38,"aggregate":39,"and":40,"answer":41,"argmax":42,"argmin":43,"attimer":44,"avg":45,"base":46,"contains":47,"count":48,"edge":49,"end_of":50,"ends_with":51,"event":52,"false":53,"filter":54,"history":55,"in_array":56,"interval":57,"join":58,"location:current_location":59,"location:home":60,"location:work":61,"max":62,"min":63,"monitor":64,"new":65,"not":66,"notify":67,"now":68,"of":69,"on":70,"or":71,"prefix_of":72,"sequence":73,"start_of":74,"starts_with":75,"suffix_of":76,"sum":77,"time":78,"timer":79,"timeseries":80,"true":81,"window":82,"~=":83};
const RULE_NON_TERMINALS = [28,28,33,33,34,34,34,34,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,35,35,35,35,35,35,35,35,36,36,1,1,3,3,32,32,4,30,31,31,27,27,29,29,29,2,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,26,26,7,7,24,24,21,21,22,22,23,23,23,8,20,20,20,20,9,9,9,9,9,9,25,19,18,17,13,16,15,11,14,10,12,0];
const ARITY = [1,2,1,3,3,5,3,3,1,5,7,7,7,7,6,10,10,1,8,8,8,8,7,3,8,4,4,7,9,6,6,1,7,3,1,1,1,2,3,3,3,1,1,3,1,3,1,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,1,1,1,1,2,3,1,1,1,1,1,1,1,1,1,1,1,2,2,1,3,3,1,1,1,1,1,1,1,1,1,1,1,2];
const GOTO = [{"17":5,"28":2,"33":9,"34":4,"35":7,"36":13},{},{},{"5":17,"6":42,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26},{},{},{},{},{},{},{},{},{},{},{"35":73,"36":13},{},{},{},{},{},{"23":75},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"5":82,"6":42,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26,"26":81},{"32":83},{"34":85,"35":7,"36":13},{"1":86,"3":88},{"1":94,"3":92,"37":91,"38":95},{},{"3":103,"37":102,"38":95},{"35":104,"36":13},{"32":105},{},{},{"9":108},{},{},{"21":111,"22":110,"23":113},{"21":111,"22":114,"23":113},{},{},{},{},{},{},{},{},{},{"4":118},{},{},{},{"4":118},{"3":103,"37":129,"38":95},{},{},{"23":131},{"9":132},{"23":133},{"9":134},{"25":135},{},{},{"4":118},{},{},{"3":103,"37":138,"38":95},{},{},{},{},{"23":75},{},{},{},{},{"5":141,"6":42,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26},{"30":142},{},{},{"30":146},{"30":147},{"30":148},{"30":149},{},{"30":151},{"30":152},{"1":153,"3":88},{},{},{"32":155},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"5":165,"6":42,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26},{},{},{},{},{},{"23":171},{"23":172},{},{},{},{"23":175},{"21":111,"22":176,"23":113},{"23":177},{"21":111,"22":178,"23":113},{},{"2":183,"27":180,"29":182},{},{"3":103,"37":186,"38":95},{},{},{},{},{},{},{"3":103,"37":192,"38":95},{},{},{"2":183,"27":195,"29":182},{},{},{},{},{},{"30":202},{},{},{},{},{"2":205},{"39":207},{},{"21":111,"22":221,"23":113},{"3":103,"37":222,"38":95},{"3":103,"37":223,"38":95},{"3":103,"37":224,"38":95},{"3":103,"37":225,"38":95},{},{"23":227},{"23":228},{},{"3":103,"37":229,"38":95},{},{},{},{},{"30":235,"31":234},{},{"2":183,"29":236},{"2":237},{},{"6":238,"30":239},{},{"5":240,"6":42,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26,"30":241},{"5":242,"6":42,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26,"30":243},{"5":244,"6":42,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26,"30":245},{"5":246,"6":42,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26,"30":247},{"24":248,"30":249},{"24":250,"30":251},{"24":252,"30":253},{"24":254,"30":255},{"24":256,"30":257},{"24":258,"30":259},{"5":260,"6":42,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26,"30":261},{"5":262,"6":42,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26,"30":263},{},{},{},{},{},{},{},{},{},{},{"35":271,"36":13},{"35":272,"36":13},{"3":103,"37":273,"38":95},{"3":103,"37":274,"38":95},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"30":283},{"3":103,"37":284,"38":95},{"3":103,"37":285,"38":95},{},{},{},{},{},{},{},{},{}];
const PARSER_ACTION = [{"1":[1,14],"36":[1,6],"41":[1,3],"44":[1,10],"49":[1,12],"64":[1,11],"68":[1,8],"79":[1,1]},{"46":[1,15]},{"10":[0]},{"0":[1,59],"6":[1,58],"7":[1,57],"18":[1,55],"19":[1,50],"20":[1,39],"21":[1,21],"22":[1,16],"23":[1,37],"24":[1,38],"25":[1,45],"26":[1,44],"27":[1,54],"28":[1,56],"30":[1,41],"31":[1,43],"32":[1,60],"33":[1,46],"35":[1,40],"36":[1,6],"37":[1,63],"50":[1,49],"53":[1,62],"59":[1,51],"60":[1,52],"61":[1,53],"68":[1,47],"74":[1,48],"81":[1,61]},{"10":[2,2],"70":[1,64]},{"8":[1,65]},{"2":[2,124],"4":[2,124],"8":[2,124],"10":[2,124],"14":[2,124],"29":[2,124],"38":[2,124],"40":[2,124],"70":[2,124],"71":[2,124]},{"14":[1,66]},{"14":[1,67]},{"10":[2,0]},{"78":[1,68]},{"1":[1,69]},{"1":[1,70]},{"2":[2,31],"14":[2,31],"70":[1,71]},{"1":[1,14],"44":[1,10],"49":[1,12],"64":[1,72],"79":[1,1]},{"12":[1,74]},{"2":[2,128],"4":[2,128],"10":[2,128],"14":[2,128],"29":[2,128],"38":[2,128],"40":[2,128],"70":[2,128],"71":[2,128]},{"10":[2,1]},{"2":[2,77],"4":[2,77],"10":[2,77],"14":[2,77],"29":[2,77],"38":[2,77],"40":[2,77],"70":[2,77],"71":[2,77]},{"2":[2,78],"4":[2,78],"10":[2,78],"14":[2,78],"29":[2,78],"38":[2,78],"40":[2,78],"70":[2,78],"71":[2,78]},{"2":[2,79],"4":[2,79],"6":[1,58],"7":[1,57],"10":[2,79],"14":[2,79],"28":[1,56],"29":[2,79],"38":[2,79],"40":[2,79],"70":[2,79],"71":[2,79]},{"2":[2,80],"4":[2,80],"10":[2,80],"14":[2,80],"29":[2,80],"38":[2,80],"40":[2,80],"70":[2,80],"71":[2,80]},{"2":[2,81],"4":[2,81],"10":[2,81],"14":[2,81],"29":[2,81],"34":[1,76],"38":[2,81],"40":[2,81],"70":[2,81],"71":[2,81]},{"2":[2,82],"4":[2,82],"10":[2,82],"14":[2,82],"29":[2,82],"38":[2,82],"40":[2,82],"70":[2,82],"71":[2,82]},{"2":[2,83],"4":[2,83],"10":[2,83],"14":[2,83],"29":[2,83],"38":[2,83],"40":[2,83],"70":[2,83],"71":[2,83]},{"2":[2,84],"3":[1,77],"4":[2,84],"5":[1,78],"10":[2,84],"14":[2,84],"29":[2,84],"38":[2,84],"40":[2,84],"70":[2,84],"71":[2,84]},{"2":[2,85],"4":[2,85],"10":[2,85],"14":[2,85],"29":[2,85],"38":[2,85],"40":[2,85],"70":[2,85],"71":[2,85]},{"2":[2,86],"4":[2,86],"10":[2,86],"14":[2,86],"29":[2,86],"38":[2,86],"40":[2,86],"70":[2,86],"71":[2,86]},{"2":[2,87],"4":[2,87],"10":[2,87],"14":[2,87],"29":[2,87],"38":[2,87],"40":[2,87],"70":[2,87],"71":[2,87]},{"2":[2,88],"4":[2,88],"10":[2,88],"14":[2,88],"29":[2,88],"38":[2,88],"40":[2,88],"70":[2,88],"71":[2,88]},{"2":[2,89],"4":[2,89],"10":[2,89],"14":[2,89],"29":[2,89],"38":[2,89],"40":[2,89],"70":[2,89],"71":[2,89]},{"2":[2,90],"4":[2,90],"10":[2,90],"14":[2,90],"29":[2,90],"38":[2,90],"40":[2,90],"70":[2,90],"71":[2,90]},{"2":[2,91],"4":[2,91],"10":[2,91],"14":[2,91],"29":[2,91],"38":[2,91],"40":[2,91],"70":[2,91],"71":[2,91]},{"2":[2,92],"4":[2,92],"10":[2,92],"14":[2,92],"29":[2,92],"38":[2,92],"40":[2,92],"70":[2,92],"71":[2,92]},{"2":[2,93],"4":[2,93],"10":[2,93],"14":[2,93],"29":[2,93],"38":[2,93],"40":[2,93],"70":[2,93],"71":[2,93]},{"2":[2,94],"4":[2,94],"10":[2,94],"14":[2,94],"29":[2,94],"38":[2,94],"40":[2,94],"70":[2,94],"71":[2,94]},{"2":[2,95],"4":[2,95],"10":[2,95],"14":[2,95],"29":[2,95],"38":[2,95],"40":[2,95],"70":[2,95],"71":[2,95]},{"2":[2,122],"4":[2,122],"10":[2,122],"14":[2,122],"29":[2,122],"38":[2,122],"40":[2,122],"70":[2,122],"71":[2,122]},{"2":[2,131],"4":[2,131],"10":[2,131],"14":[2,131],"29":[2,131],"38":[2,131],"40":[2,131],"70":[2,131],"71":[2,131]},{"2":[2,130],"4":[2,130],"10":[2,130],"14":[2,130],"29":[2,130],"38":[2,130],"40":[2,130],"70":[2,130],"71":[2,130]},{"2":[2,126],"4":[2,126],"10":[2,126],"14":[2,126],"29":[2,126],"38":[2,126],"40":[2,126],"70":[2,126],"71":[2,126]},{"2":[2,129],"4":[2,129],"10":[2,129],"14":[2,129],"29":[2,129],"38":[2,129],"40":[2,129],"70":[2,129],"71":[2,129]},{"2":[2,76],"4":[2,76],"10":[2,76],"14":[2,76],"29":[2,76],"38":[2,76],"40":[2,76],"70":[2,76],"71":[2,76]},{"2":[2,127],"4":[2,127],"10":[2,127],"14":[2,127],"29":[2,127],"38":[2,127],"40":[2,127],"70":[2,127],"71":[2,127]},{"2":[2,125],"4":[2,125],"10":[2,125],"14":[2,125],"29":[2,125],"38":[2,125],"40":[2,125],"70":[2,125],"71":[2,125]},{"2":[2,123],"4":[2,123],"10":[2,123],"14":[2,123],"29":[2,123],"38":[2,123],"40":[2,123],"70":[2,123],"71":[2,123]},{"2":[2,121],"4":[2,121],"10":[2,121],"14":[2,121],"29":[2,121],"38":[2,121],"40":[2,121],"70":[2,121],"71":[2,121]},{"2":[2,115],"3":[2,115],"4":[2,115],"5":[2,115],"10":[2,115],"14":[2,115],"29":[2,115],"38":[2,115],"40":[2,115],"70":[2,115],"71":[2,115]},{"34":[1,79]},{"34":[1,80]},{"2":[2,118],"3":[2,118],"4":[2,118],"5":[2,118],"10":[2,118],"14":[2,118],"29":[2,118],"38":[2,118],"40":[2,118],"70":[2,118],"71":[2,118]},{"2":[2,111],"4":[2,111],"10":[2,111],"14":[2,111],"29":[2,111],"38":[2,111],"40":[2,111],"70":[2,111],"71":[2,111]},{"2":[2,112],"4":[2,112],"10":[2,112],"14":[2,112],"29":[2,112],"38":[2,112],"40":[2,112],"70":[2,112],"71":[2,112]},{"2":[2,113],"4":[2,113],"10":[2,113],"14":[2,113],"29":[2,113],"38":[2,113],"40":[2,113],"70":[2,113],"71":[2,113]},{"2":[2,114],"4":[2,114],"10":[2,114],"14":[2,114],"29":[2,114],"38":[2,114],"40":[2,114],"70":[2,114],"71":[2,114]},{"2":[2,110],"4":[2,110],"10":[2,110],"14":[2,110],"29":[2,110],"38":[2,110],"40":[2,110],"70":[2,110],"71":[2,110]},{"2":[2,107],"4":[2,107],"10":[2,107],"14":[2,107],"29":[2,107],"34":[2,107],"38":[2,107],"40":[2,107],"69":[2,107],"70":[2,107],"71":[2,107]},{"2":[2,108],"4":[2,108],"10":[2,108],"14":[2,108],"29":[2,108],"34":[2,108],"38":[2,108],"40":[2,108],"69":[2,108],"70":[2,108],"71":[2,108]},{"2":[2,109],"4":[2,109],"10":[2,109],"14":[2,109],"29":[2,109],"34":[2,109],"38":[2,109],"40":[2,109],"69":[2,109],"70":[2,109],"71":[2,109]},{"2":[2,101],"4":[2,101],"10":[2,101],"14":[2,101],"29":[2,101],"38":[2,101],"40":[2,101],"70":[2,101],"71":[2,101]},{"2":[2,102],"4":[2,102],"10":[2,102],"14":[2,102],"29":[2,102],"38":[2,102],"40":[2,102],"70":[2,102],"71":[2,102]},{"2":[2,99],"4":[2,99],"10":[2,99],"14":[2,99],"29":[2,99],"38":[2,99],"40":[2,99],"70":[2,99],"71":[2,99]},{"2":[2,100],"4":[2,100],"10":[2,100],"14":[2,100],"29":[2,100],"38":[2,100],"40":[2,100],"70":[2,100],"71":[2,100]},{"0":[1,59],"6":[1,58],"7":[1,57],"18":[1,55],"19":[1,50],"20":[1,39],"21":[1,21],"22":[1,16],"23":[1,37],"24":[1,38],"25":[1,45],"26":[1,44],"27":[1,54],"28":[1,56],"30":[1,41],"31":[1,43],"32":[1,60],"33":[1,46],"35":[1,40],"36":[1,6],"37":[1,63],"50":[1,49],"53":[1,62],"59":[1,51],"60":[1,52],"61":[1,53],"68":[1,47],"74":[1,48],"81":[1,61]},{"29":[1,84]},{"1":[1,14],"44":[1,10],"49":[1,12],"64":[1,11],"68":[1,8],"79":[1,1]},{"24":[1,89],"67":[1,87]},{"1":[1,93],"24":[1,89],"39":[1,90],"55":[1,99],"67":[1,87],"73":[1,98],"80":[1,97],"82":[1,96]},{"12":[1,100]},{"1":[1,93],"24":[1,89],"39":[1,101],"55":[1,99],"73":[1,98],"80":[1,97],"82":[1,96]},{"1":[1,14],"44":[1,10],"49":[1,12],"64":[1,72],"79":[1,1]},{"29":[1,84]},{"1":[1,106]},{"2":[1,107]},{"19":[1,50],"50":[1,49],"68":[1,47],"74":[1,48]},{"34":[1,109]},{"2":[2,103],"3":[2,103],"4":[2,103],"5":[2,103],"6":[2,103],"7":[2,103],"10":[2,103],"14":[2,103],"28":[2,103],"29":[2,103],"38":[2,103],"40":[2,103],"69":[2,103],"70":[2,103],"71":[2,103]},{"6":[1,58],"7":[1,57],"21":[1,112],"28":[1,56]},{"6":[1,58],"7":[1,57],"21":[1,112],"28":[1,56]},{"2":[2,116],"3":[2,116],"4":[2,116],"5":[2,116],"10":[2,116],"14":[2,116],"29":[2,116],"38":[2,116],"40":[2,116],"70":[2,116],"71":[2,116]},{"2":[2,117],"3":[2,117],"4":[2,117],"5":[2,117],"10":[2,117],"14":[2,117],"29":[2,117],"38":[2,117],"40":[2,117],"70":[2,117],"71":[2,117]},{"4":[1,116],"38":[1,115]},{"4":[2,97],"38":[2,97]},{"10":[2,7],"70":[2,7]},{"12":[1,117]},{"10":[2,3],"70":[1,64]},{"10":[2,4],"70":[2,4]},{"10":[2,34],"70":[2,34]},{"10":[2,35],"29":[1,119],"70":[2,35]},{"2":[2,36],"10":[2,36],"14":[2,36],"29":[2,36],"70":[2,36]},{"42":[1,126],"43":[1,125],"45":[1,120],"48":[1,124],"62":[1,122],"63":[1,121],"77":[1,123]},{"14":[1,127]},{"2":[2,8],"10":[2,35],"14":[2,8],"29":[1,119],"70":[2,35]},{"1":[1,93],"24":[1,89],"39":[1,128],"55":[1,99],"73":[1,98],"80":[1,97],"82":[1,96]},{"10":[2,6],"70":[2,6]},{"2":[2,17],"14":[2,17],"70":[1,130]},{"6":[1,58],"7":[1,57],"28":[1,56]},{"19":[1,50],"50":[1,49],"68":[1,47],"74":[1,48]},{"6":[1,58],"7":[1,57],"28":[1,56]},{"19":[1,50],"50":[1,49],"68":[1,47],"74":[1,48]},{"33":[1,46]},{"42":[1,126],"43":[1,125],"45":[1,120],"48":[1,124],"62":[1,122],"63":[1,121],"77":[1,123]},{"2":[1,136]},{"2":[2,8],"14":[2,8],"29":[1,119]},{"2":[1,137]},{"2":[2,33],"14":[2,33],"70":[2,33]},{"1":[1,93],"24":[1,89],"39":[1,101],"55":[1,99],"73":[1,98],"80":[1,97],"82":[1,96]},{"58":[1,139]},{"3":[1,77],"4":[1,140],"5":[1,78]},{"2":[2,104],"3":[2,104],"4":[2,104],"5":[2,104],"6":[2,104],"7":[2,104],"10":[2,104],"14":[2,104],"28":[2,104],"29":[2,104],"38":[2,104],"40":[2,104],"69":[2,104],"70":[2,104],"71":[2,104]},{"2":[2,119],"3":[2,119],"4":[2,119],"5":[2,119],"10":[2,119],"14":[2,119],"29":[2,119],"38":[2,119],"40":[2,119],"70":[2,119],"71":[2,119]},{"2":[2,105],"3":[2,105],"4":[2,105],"5":[2,105],"6":[1,58],"7":[1,57],"10":[2,105],"14":[2,105],"28":[1,56],"29":[2,105],"38":[2,105],"40":[2,105],"69":[2,105],"70":[2,105],"71":[2,105]},{"2":[2,106],"3":[2,106],"4":[2,106],"5":[2,106],"10":[2,106],"14":[2,106],"29":[2,106],"38":[2,106],"40":[2,106],"69":[2,106],"70":[2,106],"71":[2,106]},{"34":[1,76]},{"2":[2,120],"3":[2,120],"4":[2,120],"5":[2,120],"10":[2,120],"14":[2,120],"29":[2,120],"38":[2,120],"40":[2,120],"70":[2,120],"71":[2,120]},{"2":[2,96],"4":[2,96],"10":[2,96],"14":[2,96],"29":[2,96],"38":[2,96],"40":[2,96],"70":[2,96],"71":[2,96]},{"0":[1,59],"6":[1,58],"7":[1,57],"18":[1,55],"19":[1,50],"20":[1,39],"21":[1,21],"22":[1,16],"23":[1,37],"24":[1,38],"25":[1,45],"26":[1,44],"27":[1,54],"28":[1,56],"30":[1,41],"31":[1,43],"32":[1,60],"33":[1,46],"35":[1,40],"36":[1,6],"37":[1,63],"50":[1,49],"53":[1,62],"59":[1,51],"60":[1,52],"61":[1,53],"68":[1,47],"74":[1,48],"81":[1,61]},{"29":[1,144],"52":[1,143]},{"2":[2,37],"10":[2,37],"14":[2,37],"29":[2,37],"70":[2,37]},{"12":[1,145]},{"29":[1,144]},{"29":[1,144]},{"29":[1,144]},{"29":[1,144]},{"69":[1,150]},{"29":[1,144]},{"29":[1,144]},{"24":[1,89],"67":[1,87]},{"42":[1,126],"43":[1,125],"45":[1,120],"48":[1,124],"62":[1,122],"63":[1,121],"77":[1,123]},{"2":[1,154]},{"29":[1,84]},{"4":[1,156]},{"3":[1,77],"4":[1,157],"5":[1,78]},{"4":[1,158]},{"3":[1,77],"4":[1,159],"5":[1,78]},{"2":[2,25],"14":[2,25]},{"2":[2,26],"14":[2,26],"70":[1,160]},{"70":[1,161]},{"2":[1,162]},{"1":[1,163]},{"57":[1,164]},{"4":[2,98],"38":[2,98]},{"2":[2,38],"10":[2,38],"14":[2,38],"70":[2,38]},{"2":[2,39],"10":[2,39],"14":[2,39],"70":[2,39]},{"2":[2,41],"4":[2,41],"6":[2,41],"7":[2,41],"10":[2,41],"14":[2,41],"28":[2,41],"38":[2,41],"40":[2,41],"69":[2,41],"70":[2,41],"71":[2,41]},{"0":[1,59],"6":[1,58],"7":[1,57],"18":[1,55],"19":[1,50],"20":[1,39],"21":[1,21],"22":[1,16],"23":[1,37],"24":[1,38],"25":[1,45],"26":[1,44],"27":[1,54],"28":[1,56],"30":[1,41],"31":[1,43],"32":[1,60],"33":[1,46],"35":[1,40],"36":[1,6],"37":[1,63],"50":[1,49],"53":[1,62],"59":[1,51],"60":[1,52],"61":[1,53],"68":[1,47],"74":[1,48],"81":[1,61]},{"69":[1,166]},{"69":[1,167]},{"69":[1,168]},{"69":[1,169]},{"1":[1,170]},{"6":[1,58],"7":[1,57],"28":[1,56]},{"6":[1,58],"7":[1,57],"28":[1,56]},{"10":[2,5],"70":[2,5]},{"54":[1,173],"58":[1,174]},{"2":[2,23],"14":[2,23],"70":[2,23]},{"6":[1,58],"7":[1,57],"28":[1,56]},{"6":[1,58],"7":[1,57],"21":[1,112],"28":[1,56]},{"6":[1,58],"7":[1,57],"28":[1,56]},{"6":[1,58],"7":[1,57],"21":[1,112],"28":[1,56]},{"65":[1,179]},{"29":[1,185],"66":[1,184],"81":[1,181]},{"2":[2,26],"14":[2,26],"70":[1,160]},{"1":[1,93],"24":[1,89],"39":[1,128],"55":[1,99],"73":[1,98],"80":[1,97],"82":[1,96]},{"12":[1,187]},{"2":[2,40],"10":[2,40],"14":[2,40],"29":[2,40],"70":[2,40]},{"1":[1,188]},{"1":[1,189]},{"1":[1,190]},{"1":[1,191]},{"1":[1,93],"24":[1,89],"39":[1,128],"55":[1,99],"73":[1,98],"80":[1,97],"82":[1,96]},{"4":[1,193]},{"4":[1,194]},{"29":[1,185],"66":[1,184]},{"1":[1,196]},{"69":[1,197]},{"69":[1,198]},{"69":[1,199]},{"69":[1,200]},{"29":[1,144],"37":[1,201]},{"2":[2,29],"14":[2,29],"40":[1,203]},{"2":[2,30],"14":[2,30]},{"2":[2,44],"14":[2,44],"40":[2,44],"71":[1,204]},{"2":[2,46],"14":[2,46],"40":[2,46],"71":[2,46]},{"29":[1,185]},{"9":[1,211],"11":[1,209],"13":[1,219],"15":[1,212],"16":[1,210],"17":[1,208],"47":[1,218],"51":[1,215],"56":[1,206],"72":[1,216],"75":[1,214],"76":[1,217],"83":[1,213]},{"2":[1,220]},{"6":[1,58],"7":[1,57],"21":[1,112],"28":[1,56]},{"1":[1,93],"24":[1,89],"39":[1,128],"55":[1,99],"73":[1,98],"80":[1,97],"82":[1,96]},{"1":[1,93],"24":[1,89],"39":[1,128],"55":[1,99],"73":[1,98],"80":[1,97],"82":[1,96]},{"1":[1,93],"24":[1,89],"39":[1,128],"55":[1,99],"73":[1,98],"80":[1,97],"82":[1,96]},{"1":[1,93],"24":[1,89],"39":[1,128],"55":[1,99],"73":[1,98],"80":[1,97],"82":[1,96]},{"2":[1,226]},{"6":[1,58],"7":[1,57],"28":[1,56]},{"6":[1,58],"7":[1,57],"28":[1,56]},{"2":[2,9],"14":[2,9],"40":[1,203]},{"1":[1,93],"24":[1,89],"39":[1,128],"55":[1,99],"73":[1,98],"80":[1,97],"82":[1,96]},{"1":[1,230]},{"1":[1,231]},{"1":[1,232]},{"1":[1,233]},{"29":[1,144]},{"2":[2,27],"14":[2,27]},{"29":[1,185],"66":[1,184]},{"29":[1,185]},{"2":[2,47],"14":[2,47],"40":[2,47],"71":[2,47]},{"29":[1,144],"37":[1,63]},{"2":[2,49],"14":[2,49],"40":[2,49],"71":[2,49]},{"0":[1,59],"6":[1,58],"7":[1,57],"18":[1,55],"19":[1,50],"20":[1,39],"21":[1,21],"22":[1,16],"23":[1,37],"24":[1,38],"25":[1,45],"26":[1,44],"27":[1,54],"28":[1,56],"29":[1,144],"30":[1,41],"31":[1,43],"32":[1,60],"33":[1,46],"35":[1,40],"36":[1,6],"37":[1,63],"50":[1,49],"53":[1,62],"59":[1,51],"60":[1,52],"61":[1,53],"68":[1,47],"74":[1,48],"81":[1,61]},{"0":[1,59],"6":[1,58],"7":[1,57],"18":[1,55],"19":[1,50],"20":[1,39],"21":[1,21],"22":[1,16],"23":[1,37],"24":[1,38],"25":[1,45],"26":[1,44],"27":[1,54],"28":[1,56],"29":[1,144],"30":[1,41],"31":[1,43],"32":[1,60],"33":[1,46],"35":[1,40],"36":[1,6],"37":[1,63],"50":[1,49],"53":[1,62],"59":[1,51],"60":[1,52],"61":[1,53],"68":[1,47],"74":[1,48],"81":[1,61]},{"0":[1,59],"6":[1,58],"7":[1,57],"18":[1,55],"19":[1,50],"20":[1,39],"21":[1,21],"22":[1,16],"23":[1,37],"24":[1,38],"25":[1,45],"26":[1,44],"27":[1,54],"28":[1,56],"29":[1,144],"30":[1,41],"31":[1,43],"32":[1,60],"33":[1,46],"35":[1,40],"36":[1,6],"37":[1,63],"50":[1,49],"53":[1,62],"59":[1,51],"60":[1,52],"61":[1,53],"68":[1,47],"74":[1,48],"81":[1,61]},{"0":[1,59],"6":[1,58],"7":[1,57],"18":[1,55],"19":[1,50],"20":[1,39],"21":[1,21],"22":[1,16],"23":[1,37],"24":[1,38],"25":[1,45],"26":[1,44],"27":[1,54],"28":[1,56],"29":[1,144],"30":[1,41],"31":[1,43],"32":[1,60],"33":[1,46],"35":[1,40],"36":[1,6],"37":[1,63],"50":[1,49],"53":[1,62],"59":[1,51],"60":[1,52],"61":[1,53],"68":[1,47],"74":[1,48],"81":[1,61]},{"0":[1,59],"29":[1,144],"32":[1,60]},{"0":[1,59],"29":[1,144],"32":[1,60]},{"0":[1,59],"29":[1,144],"32":[1,60]},{"0":[1,59],"29":[1,144],"32":[1,60]},{"0":[1,59],"29":[1,144],"32":[1,60]},{"0":[1,59],"29":[1,144],"32":[1,60]},{"0":[1,59],"6":[1,58],"7":[1,57],"18":[1,55],"19":[1,50],"20":[1,39],"21":[1,21],"22":[1,16],"23":[1,37],"24":[1,38],"25":[1,45],"26":[1,44],"27":[1,54],"28":[1,56],"29":[1,144],"30":[1,41],"31":[1,43],"32":[1,60],"33":[1,46],"35":[1,40],"36":[1,6],"37":[1,63],"50":[1,49],"53":[1,62],"59":[1,51],"60":[1,52],"61":[1,53],"68":[1,47],"74":[1,48],"81":[1,61]},{"0":[1,59],"6":[1,58],"7":[1,57],"18":[1,55],"19":[1,50],"20":[1,39],"21":[1,21],"22":[1,16],"23":[1,37],"24":[1,38],"25":[1,45],"26":[1,44],"27":[1,54],"28":[1,56],"29":[1,144],"30":[1,41],"31":[1,43],"32":[1,60],"33":[1,46],"35":[1,40],"36":[1,6],"37":[1,63],"50":[1,49],"53":[1,62],"59":[1,51],"60":[1,52],"61":[1,53],"68":[1,47],"74":[1,48],"81":[1,61]},{"2":[2,32],"14":[2,32],"70":[2,32]},{"2":[2,24],"14":[2,24]},{"2":[1,264]},{"2":[1,265]},{"2":[1,266]},{"2":[1,267]},{"2":[2,14],"14":[2,14]},{"69":[1,268]},{"69":[1,269]},{"2":[1,270]},{"1":[1,14],"44":[1,10],"49":[1,12],"64":[1,72],"79":[1,1]},{"1":[1,14],"44":[1,10],"49":[1,12],"64":[1,72],"79":[1,1]},{"1":[1,93],"24":[1,89],"39":[1,128],"55":[1,99],"73":[1,98],"80":[1,97],"82":[1,96]},{"1":[1,93],"24":[1,89],"39":[1,128],"55":[1,99],"73":[1,98],"80":[1,97],"82":[1,96]},{"4":[1,276],"38":[1,275]},{"4":[2,42],"38":[2,42]},{"2":[2,45],"14":[2,45],"40":[2,45],"71":[1,204]},{"2":[2,48],"14":[2,48],"40":[2,48],"71":[2,48]},{"2":[2,62],"14":[2,62],"40":[2,62],"71":[2,62]},{"2":[2,75],"14":[2,75],"40":[2,75],"71":[2,75]},{"2":[2,51],"14":[2,51],"40":[2,51],"71":[2,51]},{"2":[2,64],"14":[2,64],"40":[2,64],"71":[2,64]},{"2":[2,52],"14":[2,52],"40":[2,52],"71":[2,52]},{"2":[2,65],"14":[2,65],"40":[2,65],"71":[2,65]},{"2":[2,53],"14":[2,53],"40":[2,53],"71":[2,53]},{"2":[2,66],"14":[2,66],"40":[2,66],"71":[2,66]},{"2":[2,54],"14":[2,54],"40":[2,54],"71":[2,54]},{"2":[2,67],"14":[2,67],"40":[2,67],"71":[2,67]},{"2":[2,55],"14":[2,55],"40":[2,55],"71":[2,55]},{"2":[2,68],"14":[2,68],"40":[2,68],"71":[2,68]},{"2":[2,56],"14":[2,56],"40":[2,56],"71":[2,56]},{"2":[2,69],"14":[2,69],"40":[2,69],"71":[2,69]},{"2":[2,57],"14":[2,57],"40":[2,57],"71":[2,57]},{"2":[2,70],"14":[2,70],"40":[2,70],"71":[2,70]},{"2":[2,58],"14":[2,58],"40":[2,58],"71":[2,58]},{"2":[2,71],"14":[2,71],"40":[2,71],"71":[2,71]},{"2":[2,59],"14":[2,59],"40":[2,59],"71":[2,59]},{"2":[2,72],"14":[2,72],"40":[2,72],"71":[2,72]},{"2":[2,60],"14":[2,60],"40":[2,60],"71":[2,60]},{"2":[2,73],"14":[2,73],"40":[2,73],"71":[2,73]},{"2":[2,61],"14":[2,61],"40":[2,61],"71":[2,61]},{"2":[2,74],"14":[2,74],"40":[2,74],"71":[2,74]},{"2":[2,50],"14":[2,50],"40":[2,50],"71":[2,50]},{"2":[2,63],"14":[2,63],"40":[2,63],"71":[2,63]},{"2":[2,13],"14":[2,13]},{"2":[2,10],"14":[2,10]},{"2":[2,11],"14":[2,11]},{"2":[2,12],"14":[2,12]},{"1":[1,277]},{"1":[1,278]},{"2":[2,22],"14":[2,22],"70":[2,22]},{"2":[1,279]},{"2":[1,280]},{"2":[1,281]},{"2":[1,282]},{"2":[2,28],"14":[2,28]},{"29":[1,144]},{"1":[1,93],"24":[1,89],"39":[1,128],"55":[1,99],"73":[1,98],"80":[1,97],"82":[1,96]},{"1":[1,93],"24":[1,89],"39":[1,128],"55":[1,99],"73":[1,98],"80":[1,97],"82":[1,96]},{"2":[2,18],"14":[2,18]},{"2":[2,19],"14":[2,19]},{"2":[2,20],"14":[2,20]},{"2":[2,21],"14":[2,21]},{"4":[2,43],"38":[2,43]},{"2":[1,286]},{"2":[1,287]},{"2":[2,15],"14":[2,15]},{"2":[2,16],"14":[2,16]}];
const SEMANTIC_ACTION = [
((x) => x),
((_, constant) => constant),
((rule) => new Ast.Program([], [], [rule], null)),
((user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })),
((stream, _, action) => new Ast.Statement.Rule(stream, [action])),
((_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])),
((_1, _2, action) => new Ast.Statement.Command(null, [action])),
((rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }),
((get) => Ast.Table.Invocation(get, null)),
((_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((x) => x),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)),
((_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
((_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)),
((_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)),
((monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null, null)),
((monitor, _1, table, _2, _3, _4, pname) => new Ast.Stream.Monitor(table, [pname.name], null)),
((monitor, _1, table, _2, _3, _4, _5, pnames, _6) => new Ast.Stream.Monitor(table, pnames.map((p) => p.name), null)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, filter, null)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, Ast.BooleanExpression.True, null)),
((x) => x),
((_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
(() => Generate.notifyAction()),
((x) => x),
((fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)),
((inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }),
((pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)),
((pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))),
((pname, _1, v) => new Ast.InputParam(pname.value, v)),
((pname) => new Ast.Value.VarRef(pname.value)),
((pname) => [pname]),
((list, _, pname) => list.concat(pname)),
((x) => x),
((f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])),
((x) => x),
((_, f) => new Ast.BooleanExpression.Not(f)),
((f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])),
((pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((_1, values, _2) => new Ast.Value.Array(values)),
((v) => [v]),
((array, _, v) => {
                                   array.push(v);
                                   return array;
                               }),
(() => new Ast.Value.Boolean(true)),
(() => new Ast.Value.Boolean(false)),
((str) => new Ast.Value.String('')),
((str) => new Ast.Value.String(str.value)),
((num, unit) => new Ast.Value.Measure(num.value, unit.value)),
((v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }),
((x) => x),
((tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)),
((num) => new Ast.Value.Number(num.value)),
(() => new Ast.Value.Number(1)),
(() => new Ast.Value.Number(0)),
((tok) => new Ast.Value.Currency(tok.value.value, tok.value.unit)),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((loc) => new Ast.Value.Location(new Ast.Location.Absolute(loc.value.latitude, loc.value.longitude, loc.value.display||null))),
((loc) => new Ast.Value.Date(null, '+', null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)),
((abs) => new Ast.Value.Date(parseDate(abs.value), '+', null)),
((date, op, offset) => new Ast.Value.Date(date.value, op, offset)),
((date, op, offset) => new Ast.Value.Date(date.value, op, offset)),
((time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second||0)),
((venum) => new Ast.Value.Enum(venum.value)),
((entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:path_name', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:device', null)),
((entity) => new Ast.Value.Entity(entity.kind + ':' + entity.device)),
((x, _) => x),
];
module.exports = require('./sr_parser')(TERMINAL_IDS, RULE_NON_TERMINALS, ARITY, GOTO, PARSER_ACTION, SEMANTIC_ACTION);
