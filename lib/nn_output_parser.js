// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingEngine
//
// Copyright 2017 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details
"use strict";

const Ast = require('./ast');
const Generate = require('./generate');

/**
 * Differences with the actual NN Grammar (as written in
 * almond-nnparser/grammar/thingtalk.py):
 *
 * - almond-nnparser's grammar distinguishes $get and $do, while
 *   while this one uses just $call
 *   almond-nnparser can do that because it knows the full list of
 *   gets and dos (and knows that they don't interset), whereas here
 *   we have a single FUNCTION token
 * - almond-nnparser's grammar is typed around parameter types and
 *   constants, this one is not because otherwise it would be too unwieldly
 *   to write
 * - almond-nnparser uses different terminals for <entity>_i because
 *   it autogenerates the grammar; this grammar uses a single terminal
 *   <entity> plus a lexical analysis step because I was too lazy to write
 *   down all cases by hand
 *
 * Missing features, compared with full TT:
 * - single statement
 * - no complex selectors
 * - no remote primitives (yet)
 * - no declarations
 * - no multi-field projection
 * - no alias (in aggregate and as a table/stream operator)
 * - no compute
 *
 * Differences with full TT:
 * - all filter operators are infix
 * - multiple parameter passings are prefixed with on in a join
 * - function names are one token
 * - parameter names are prefixed with param:
 * - enum choices are prefixed with enum:
 * - units are prefixed with unit:
 * - relative locations are prefixed with location:
 *
 * What to keep in mind when writing the grammar:
 * - shifts are cheap, reduces are expensive
 * - adding more symbols to a rule only increases the number of shifts
 * - adding more non-terminals to the grammar increases the number of
 *   reduces
 * - splitting a rule into multiple non-terminals increases the number of
 *   reduces
 * - the breadth of reduces matters too
 * - the overall number of rules affects the breadth of reduces
 */

const identity = (x) => x;

function parseDate(form) {
    if (form instanceof Date)
        return form;
    let now = new Date;
    let year = form.year;
    if (year < 0)
        year = now.getFullYear();
    let month = form.month;
    if (month < 0)
        month = now.getMonth() + 1;
    let day = form.day;
    if (day < 0)
        day = now.getDate();
    let hour = 0, minute = 0, second = 0;
    hour = form.hour;
    if (hour < 0)
        hour = now.getHours();
    minute = form.minute;
    if (minute < 0)
        minute = now.getMinutes();
    second = form.second;
    if (second < 0)
        second = now.getSeconds();

    return new Date(year, month-1, day, hour, minute, second);
}

module.exports = {
    '$input':         [[['$program',], identity],
                       [['answer', '$constant'], (_, constant) => constant]],

    '$program':       [[['$rule',], (rule) => new Ast.Program([], [], [rule], null)],
                       [['$constant_Entity(tt:username)', ':', '$rule'], (user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })]],

    '$rule':          [[['$stream', '=>', '$action'], (stream, _, action) => new Ast.Statement.Rule(stream, [action])],
                       [['now', '=>', '$table', '=>', '$action'], (_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])],
                       [['now', '=>', '$action'], (_1, _2, action) => new Ast.Statement.Command(null, [action])],
                       [['$rule', 'on', '$param_passing'], (rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }]],

    '$table':         [[['$call',], (get) => Ast.Table.Invocation(get, null)],
                       [['(', '$table', ')', 'filter', '$filter'], (_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)],
                       [['aggregate', 'min', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'max', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'sum', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'avg', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'count', 'of', '(', '$table', ')'], (_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)],
                       [['aggregate', 'argmin', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['aggregate', 'argmax', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['$table_join'], identity],
                       [['window', '$constant_Number', ',', '$constant_Number', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)],
                       [['timeseries', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)],
                       [['sequence', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)],
                       [['history', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)]],

    '$table_join':    [[['(', '$table', ')', 'join', '(', '$table', ')'], (_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)],
                       [['$table_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$stream':        [[['timer', 'base', '=', '$constant_Date', ',', 'interval', '=', '$constant_Measure(ms)'], (_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)],
                       [['attimer', 'time', '=', '$constant_Time'], (_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)],
                       [['monitor', '(', '$table', ')'], (monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null, null)],
                       [['monitor', '(', '$table', ')', 'on', 'new', '$out_param'], (monitor, _1, table, _2, _3, _4, pname) => new Ast.Stream.Monitor(table, [pname.name], null)],
                       [['monitor', '(', '$table', ')', 'on', 'new', '[', '$out_param_list', ']'], (monitor, _1, table, _2, _3, _4, _5, pnames, _6) => new Ast.Stream.Monitor(table, pnames.map((p) => p.name), null)],
                       [['edge', '(', '$stream', ')', 'on', '$filter'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, filter, null)],
                       // edge on true is the equivalent of "only once"
                       [['edge', '(', '$stream', ')', 'on', 'true'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, Ast.BooleanExpression.True, null)],
                       [['$stream_join'], identity]],

    '$stream_join':   [[['(', '$stream', ')', 'join', '(', '$table', ')'], (_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)],
                       [['$stream_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$action':        [[['notify'], () => Generate.notifyAction()],
                       [['$call'], identity]],

    '$call':           [[['FUNCTION'], (fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)],
                       [['$call', '$const_param'], (inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }]],

    '$param_passing': [[['PARAM_NAME', '=', '$out_param'], (pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)],
                       [['PARAM_NAME', '=', 'event'], (pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))]],

    '$const_param':   [[['PARAM_NAME', '=', '$constant'], (pname, _1, v) => new Ast.InputParam(pname.value, v)]],

    '$out_param':     [[['PARAM_NAME'], (pname) => new Ast.Value.VarRef(pname.value)]],

    '$out_param_list':[[['$out_param'], (pname) => [pname]],
                       [['$out_param_list', ',', '$out_param'], (list, _, pname) => list.concat(pname)]],

    // note that $filter is not recursive!
    // it must be in CNF form
    // also note that and takes priority over or
    // this is the opposite of regular TT (which copies JS in that respect)
    // because most filters are just a list of
    // "condition and this or that and foo or bar"
    // to be read as
    // "condition and (this or that) and (foo or bar)"
    '$filter':        [[['$or_filter'], identity],
                       [['$filter', 'and', '$or_filter'], (f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])]],

    '$or_filter':     [[['$atom_filter'], identity],
                       [['not', '$atom_filter'], (_, f) => new Ast.BooleanExpression.Not(f)],
                       [['$or_filter', 'or', '$atom_filter'], (f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])]],

    '$atom_filter':   [[['PARAM_NAME', '$value_filter'], (pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)]],

    // in almond-nnparser these are strongly typed constants, so only
    // numbers and measures can be compared for order, etc
    // we're a little looser here because otherwise it becomes unwieldly
    '$value_filter':  [[['==', '$constant'], (op, v) => [op, v]],
                       [['>=', '$constant'], (op, v) => [op, v]],
                       [['<=', '$constant'], (op, v) => [op, v]],
                       [['>', '$constant'], (op, v) => [op, v]],
                       [['<', '$constant'], (op, v) => [op, v]],
                       [['=~', '$constant_String'], (op, v) => [op, v]],
                       [['~=', '$constant_String'], (op, v) => [op, v]],
                       [['starts_with', '$constant_String'], (op, v) => [op, v]],
                       [['ends_with',  '$constant_String'], (op, v) => [op, v]],
                       [['prefix_of',  '$constant_String'], (op, v) => [op, v]],
                       [['suffix_of',  '$constant_String'], (op, v) => [op, v]],
                       [['contains',  '$constant'], (op, v) => [op, v]],
                       [['in_array',  '$constant_Array'], (op, v) => [op, v]],

                       [['==', '$out_param'], (op, v) => [op, v]],
                       [['>=', '$out_param'], (op, v) => [op, v]],
                       [['<=', '$out_param'], (op, v) => [op, v]],
                       [['>', '$out_param'], (op, v) => [op, v]],
                       [['<', '$out_param'], (op, v) => [op, v]],
                       [['=~', '$out_param'], (op, v) => [op, v]],
                       [['~=', '$out_param'], (op, v) => [op, v]],
                       [['starts_with', '$out_param'], (op, v) => [op, v]],
                       [['ends_with',  '$out_param'], (op, v) => [op, v]],
                       [['prefix_of',  '$out_param'], (op, v) => [op, v]],
                       [['suffix_of',  '$out_param'], (op, v) => [op, v]],
                       [['contains',  '$out_param'], (op, v) => [op, v]],
                       [['in_array',  '$out_param'], (op, v) => [op, v]]],

    // this non-terminal exists only for convenience
    // the almond nn-parser grammar does not have it
    '$constant':      [[['$constant_Array'], identity],
                       [['$constant_Boolean'], identity],
                       [['$constant_String'], identity],
                       [['$constant_Measure'], identity],
                       [['DURATION'], (tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)],
                       [['$constant_Number'], identity],
                       [['$constant_Currency'], identity],
                       [['$constant_Location'], identity],
                       [['$constant_Date'], identity],
                       [['$constant_Time'], identity],
                       [['$constant_Entity(unknown)'], identity],
                       [['$constant_Entity(tt:username)'], identity],
                       [['$constant_Entity(tt:hashtag)'], identity],
                       [['$constant_Entity(tt:phone_number)'], identity],
                       [['$constant_Entity(tt:email_address)'], identity],
                       [['$constant_Entity(tt:path_name)'], identity],
                       [['$constant_Entity(tt:url)'], identity],
                       [['$constant_Entity(tt:device)'], identity],
                       [['$constant_Entity(tt:function)'], identity],
                       [['$constant_Enum'], identity],
                       [['SLOT'], (slot) => slot.value === undefined ? Ast.Value.Undefined(true) : slot.value]],

    // we cannot represent an empty array
    // I don't think that's useful anyway
    '$constant_Array': [[['[', '$constant_array_values', ']'], (_1, values, _2) => new Ast.Value.Array(values)]],

    '$constant_array_values': [[['$constant'], (v) => [v]],
                               [['$constant_array_values', ',', '$constant'], (array, _, v) => {
                                   array.push(v);
                                   return array;
                               }]],

    '$constant_Boolean': [[['true'], () => new Ast.Value.Boolean(true)],
                          [['false'], () => new Ast.Value.Boolean(false)]],

    '$constant_String': [[['""'], (str) => new Ast.Value.String('')],
                         [['QUOTED_STRING'], (str) => new Ast.Value.String(str.value)]],

    // play fast and loose with units here, because I don't want to write
    // everything by hand
    // almond-nnparser autogenerates this part
    '$constant_Measure': [[['$constant_Number', 'UNIT'], (num, unit) => new Ast.Value.Measure(num.value, unit.value)],
                          [['$constant_Measure', '$constant_Number', 'UNIT'], (v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }]],
    '$constant_Measure(ms)': [[['$constant_Measure'], identity],
                              [['DURATION'], (tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)]],

    '$constant_Number': [[['NUMBER'], (num) => new Ast.Value.Number(num.value)],
                         [['1'], () => new Ast.Value.Number(1)],
                         [['0'], () => new Ast.Value.Number(0)]],

    '$constant_Currency': [[['CURRENCY'], (tok) => new Ast.Value.Currency(tok.value.value, tok.value.unit)]],

    '$constant_Location': [[['location:current_location'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:home'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:work'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['LOCATION'], (loc) => new Ast.Value.Location(new Ast.Location.Absolute(loc.value.latitude, loc.value.longitude, loc.value.display||null))]],

    // start_of/end_of with less than 1h are not supported
    // (they don't make sense)
    '$constant_Date': [[['now'], (loc) => new Ast.Value.Date(null, '+', null)],
                       [['start_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)],
                       [['end_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)],
                       [['DATE'], (abs) => new Ast.Value.Date(parseDate(abs.value), '+', null)],
                       [['$constant_Date', '+', '$constant_Measure(ms)'], (date, op, offset) => new Ast.Value.Date(date.value, op, offset)],
                       [['$constant_Date', '-', '$constant_Measure(ms)'], (date, op, offset) => new Ast.Value.Date(date.value, op, offset)]],

    '$constant_Time': [[['TIME'], (time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second||0)]],

    // almond-nnparser expands this into the various enums in the right
    // place for a parameter (as the meaning of an enum changes according
    // to the parameter anyway)
    '$constant_Enum': [[['ENUM'], (venum) => new Ast.Value.Enum(venum.value)]],

    '$constant_Entity(unknown)': [[['GENERIC_ENTITY'], (entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)]],

    '$constant_Entity(tt:username)': [[['USERNAME'], (entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)]],

    '$constant_Entity(tt:hashtag)': [[['HASHTAG'], (entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)]],

    '$constant_Entity(tt:url)': [[['URL'], (entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)]],

    '$constant_Entity(tt:phone_number)': [[['PHONE_NUMBER'], (entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)]],

    '$constant_Entity(tt:email_address)': [[['EMAIL_ADDRESS'], (entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)]],

    '$constant_Entity(tt:path_name)': [[['PATH_NAME'], (entity) => new Ast.Value.Entity(entity.value, 'tt:path_name', null)]],

    '$constant_Entity(tt:device)': [[['DEVICE'], (entity) => new Ast.Value.Entity(entity.value, 'tt:device', null)]],

    '$constant_Entity(tt:function)': [[['FUNCTION'], (entity) => new Ast.Value.Entity(entity.kind + ':' + entity.device)]],

};

const TERMINAL_IDS = {"0":6,"1":7,"\"\"":0,"(":1,")":2,"+":3,",":4,"-":5,":":8,"<":9,"<<EOF>>":10,"<=":11,"=":12,"==":13,"=>":14,"=~":15,">":16,">=":17,"CURRENCY":18,"DATE":19,"DEVICE":20,"DURATION":21,"EMAIL_ADDRESS":22,"ENUM":23,"FUNCTION":24,"GENERIC_ENTITY":25,"HASHTAG":26,"LOCATION":27,"NUMBER":28,"PARAM_NAME":29,"PATH_NAME":30,"PHONE_NUMBER":31,"QUOTED_STRING":32,"SLOT":33,"TIME":34,"UNIT":35,"URL":36,"USERNAME":37,"[":38,"]":39,"aggregate":40,"and":41,"answer":42,"argmax":43,"argmin":44,"attimer":45,"avg":46,"base":47,"contains":48,"count":49,"edge":50,"end_of":51,"ends_with":52,"event":53,"false":54,"filter":55,"history":56,"in_array":57,"interval":58,"join":59,"location:current_location":60,"location:home":61,"location:work":62,"max":63,"min":64,"monitor":65,"new":66,"not":67,"notify":68,"now":69,"of":70,"on":71,"or":72,"prefix_of":73,"sequence":74,"start_of":75,"starts_with":76,"suffix_of":77,"sum":78,"time":79,"timer":80,"timeseries":81,"true":82,"window":83,"~=":84};
const RULE_NON_TERMINALS = [28,28,33,33,34,34,34,34,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,35,35,35,35,35,35,35,35,36,36,1,1,3,3,32,32,4,30,31,31,27,27,29,29,29,2,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,26,26,7,7,24,24,21,21,22,22,23,23,23,8,20,20,20,20,9,9,9,9,9,9,25,19,18,17,13,16,15,11,14,10,12,0];
const ARITY = [1,2,1,3,3,5,3,3,1,5,7,7,7,7,6,10,10,1,8,8,8,8,7,3,8,4,4,7,9,6,6,1,7,3,1,1,1,2,3,3,3,1,1,3,1,3,1,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,1,1,1,1,2,3,1,1,1,1,1,1,1,1,1,1,1,2,2,1,3,3,1,1,1,1,1,1,1,1,1,1,1,2];
const GOTO = [{"17":5,"28":2,"33":9,"34":4,"35":7,"36":13},{},{},{"5":17,"6":43,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26},{},{},{},{},{},{},{},{},{},{},{"35":74,"36":13},{},{},{},{},{},{"23":76},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"5":83,"6":43,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26,"26":82},{"32":84},{"34":86,"35":7,"36":13},{"1":87,"3":89},{"1":95,"3":93,"37":92,"38":96},{},{"3":104,"37":103,"38":96},{"35":105,"36":13},{"32":106},{},{},{"9":109},{},{},{"21":112,"22":111,"23":114},{"21":112,"22":115,"23":114},{},{},{},{},{},{},{},{},{},{"4":119},{},{},{},{"4":119},{"3":104,"37":130,"38":96},{},{},{"23":132},{"9":133},{"23":134},{"9":135},{"25":136},{},{},{"4":119},{},{},{"3":104,"37":139,"38":96},{},{},{},{},{"23":76},{},{},{},{},{"5":142,"6":43,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26},{"30":143},{},{},{"30":147},{"30":148},{"30":149},{"30":150},{},{"30":152},{"30":153},{"1":154,"3":89},{},{},{"32":156},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"5":166,"6":43,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26},{},{},{},{},{},{"23":172},{"23":173},{},{},{},{"23":176},{"21":112,"22":177,"23":114},{"23":178},{"21":112,"22":179,"23":114},{},{"2":184,"27":181,"29":183},{},{"3":104,"37":187,"38":96},{},{},{},{},{},{},{"3":104,"37":193,"38":96},{},{},{"2":184,"27":196,"29":183},{},{},{},{},{},{"30":203},{},{},{},{},{"2":206},{"39":208},{},{"21":112,"22":222,"23":114},{"3":104,"37":223,"38":96},{"3":104,"37":224,"38":96},{"3":104,"37":225,"38":96},{"3":104,"37":226,"38":96},{},{"23":228},{"23":229},{},{"3":104,"37":230,"38":96},{},{},{},{},{"30":236,"31":235},{},{"2":184,"29":237},{"2":238},{},{"6":239,"30":240},{},{"5":241,"6":43,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26,"30":242},{"5":243,"6":43,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26,"30":244},{"5":245,"6":43,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26,"30":246},{"5":247,"6":43,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26,"30":248},{"24":249,"30":250},{"24":251,"30":252},{"24":253,"30":254},{"24":255,"30":256},{"24":257,"30":258},{"24":259,"30":260},{"5":261,"6":43,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26,"30":262},{"5":263,"6":43,"7":18,"8":23,"9":25,"10":34,"11":31,"12":35,"13":29,"14":32,"15":30,"16":33,"17":28,"18":27,"19":36,"20":24,"21":20,"23":22,"24":19,"25":26,"30":264},{},{},{},{},{},{},{},{},{},{},{"35":272,"36":13},{"35":273,"36":13},{"3":104,"37":274,"38":96},{"3":104,"37":275,"38":96},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"30":284},{"3":104,"37":285,"38":96},{"3":104,"37":286,"38":96},{},{},{},{},{},{},{},{},{}];
const PARSER_ACTION = [{"1":[1,14],"37":[1,6],"42":[1,3],"45":[1,10],"50":[1,12],"65":[1,11],"69":[1,8],"80":[1,1]},{"47":[1,15]},{"10":[0]},{"0":[1,60],"6":[1,59],"7":[1,58],"18":[1,56],"19":[1,51],"20":[1,40],"21":[1,21],"22":[1,16],"23":[1,38],"24":[1,39],"25":[1,46],"26":[1,45],"27":[1,55],"28":[1,57],"30":[1,42],"31":[1,44],"32":[1,61],"33":[1,37],"34":[1,47],"36":[1,41],"37":[1,6],"38":[1,64],"51":[1,50],"54":[1,63],"60":[1,52],"61":[1,53],"62":[1,54],"69":[1,48],"75":[1,49],"82":[1,62]},{"10":[2,2],"71":[1,65]},{"8":[1,66]},{"2":[2,125],"4":[2,125],"8":[2,125],"10":[2,125],"14":[2,125],"29":[2,125],"39":[2,125],"41":[2,125],"71":[2,125],"72":[2,125]},{"14":[1,67]},{"14":[1,68]},{"10":[2,0]},{"79":[1,69]},{"1":[1,70]},{"1":[1,71]},{"2":[2,31],"14":[2,31],"71":[1,72]},{"1":[1,14],"45":[1,10],"50":[1,12],"65":[1,73],"80":[1,1]},{"12":[1,75]},{"2":[2,129],"4":[2,129],"10":[2,129],"14":[2,129],"29":[2,129],"39":[2,129],"41":[2,129],"71":[2,129],"72":[2,129]},{"10":[2,1]},{"2":[2,77],"4":[2,77],"10":[2,77],"14":[2,77],"29":[2,77],"39":[2,77],"41":[2,77],"71":[2,77],"72":[2,77]},{"2":[2,78],"4":[2,78],"10":[2,78],"14":[2,78],"29":[2,78],"39":[2,78],"41":[2,78],"71":[2,78],"72":[2,78]},{"2":[2,79],"4":[2,79],"6":[1,59],"7":[1,58],"10":[2,79],"14":[2,79],"28":[1,57],"29":[2,79],"39":[2,79],"41":[2,79],"71":[2,79],"72":[2,79]},{"2":[2,80],"4":[2,80],"10":[2,80],"14":[2,80],"29":[2,80],"39":[2,80],"41":[2,80],"71":[2,80],"72":[2,80]},{"2":[2,81],"4":[2,81],"10":[2,81],"14":[2,81],"29":[2,81],"35":[1,77],"39":[2,81],"41":[2,81],"71":[2,81],"72":[2,81]},{"2":[2,82],"4":[2,82],"10":[2,82],"14":[2,82],"29":[2,82],"39":[2,82],"41":[2,82],"71":[2,82],"72":[2,82]},{"2":[2,83],"4":[2,83],"10":[2,83],"14":[2,83],"29":[2,83],"39":[2,83],"41":[2,83],"71":[2,83],"72":[2,83]},{"2":[2,84],"3":[1,78],"4":[2,84],"5":[1,79],"10":[2,84],"14":[2,84],"29":[2,84],"39":[2,84],"41":[2,84],"71":[2,84],"72":[2,84]},{"2":[2,85],"4":[2,85],"10":[2,85],"14":[2,85],"29":[2,85],"39":[2,85],"41":[2,85],"71":[2,85],"72":[2,85]},{"2":[2,86],"4":[2,86],"10":[2,86],"14":[2,86],"29":[2,86],"39":[2,86],"41":[2,86],"71":[2,86],"72":[2,86]},{"2":[2,87],"4":[2,87],"10":[2,87],"14":[2,87],"29":[2,87],"39":[2,87],"41":[2,87],"71":[2,87],"72":[2,87]},{"2":[2,88],"4":[2,88],"10":[2,88],"14":[2,88],"29":[2,88],"39":[2,88],"41":[2,88],"71":[2,88],"72":[2,88]},{"2":[2,89],"4":[2,89],"10":[2,89],"14":[2,89],"29":[2,89],"39":[2,89],"41":[2,89],"71":[2,89],"72":[2,89]},{"2":[2,90],"4":[2,90],"10":[2,90],"14":[2,90],"29":[2,90],"39":[2,90],"41":[2,90],"71":[2,90],"72":[2,90]},{"2":[2,91],"4":[2,91],"10":[2,91],"14":[2,91],"29":[2,91],"39":[2,91],"41":[2,91],"71":[2,91],"72":[2,91]},{"2":[2,92],"4":[2,92],"10":[2,92],"14":[2,92],"29":[2,92],"39":[2,92],"41":[2,92],"71":[2,92],"72":[2,92]},{"2":[2,93],"4":[2,93],"10":[2,93],"14":[2,93],"29":[2,93],"39":[2,93],"41":[2,93],"71":[2,93],"72":[2,93]},{"2":[2,94],"4":[2,94],"10":[2,94],"14":[2,94],"29":[2,94],"39":[2,94],"41":[2,94],"71":[2,94],"72":[2,94]},{"2":[2,95],"4":[2,95],"10":[2,95],"14":[2,95],"29":[2,95],"39":[2,95],"41":[2,95],"71":[2,95],"72":[2,95]},{"2":[2,96],"4":[2,96],"10":[2,96],"14":[2,96],"29":[2,96],"39":[2,96],"41":[2,96],"71":[2,96],"72":[2,96]},{"2":[2,123],"4":[2,123],"10":[2,123],"14":[2,123],"29":[2,123],"39":[2,123],"41":[2,123],"71":[2,123],"72":[2,123]},{"2":[2,132],"4":[2,132],"10":[2,132],"14":[2,132],"29":[2,132],"39":[2,132],"41":[2,132],"71":[2,132],"72":[2,132]},{"2":[2,131],"4":[2,131],"10":[2,131],"14":[2,131],"29":[2,131],"39":[2,131],"41":[2,131],"71":[2,131],"72":[2,131]},{"2":[2,127],"4":[2,127],"10":[2,127],"14":[2,127],"29":[2,127],"39":[2,127],"41":[2,127],"71":[2,127],"72":[2,127]},{"2":[2,130],"4":[2,130],"10":[2,130],"14":[2,130],"29":[2,130],"39":[2,130],"41":[2,130],"71":[2,130],"72":[2,130]},{"2":[2,76],"4":[2,76],"10":[2,76],"14":[2,76],"29":[2,76],"39":[2,76],"41":[2,76],"71":[2,76],"72":[2,76]},{"2":[2,128],"4":[2,128],"10":[2,128],"14":[2,128],"29":[2,128],"39":[2,128],"41":[2,128],"71":[2,128],"72":[2,128]},{"2":[2,126],"4":[2,126],"10":[2,126],"14":[2,126],"29":[2,126],"39":[2,126],"41":[2,126],"71":[2,126],"72":[2,126]},{"2":[2,124],"4":[2,124],"10":[2,124],"14":[2,124],"29":[2,124],"39":[2,124],"41":[2,124],"71":[2,124],"72":[2,124]},{"2":[2,122],"4":[2,122],"10":[2,122],"14":[2,122],"29":[2,122],"39":[2,122],"41":[2,122],"71":[2,122],"72":[2,122]},{"2":[2,116],"3":[2,116],"4":[2,116],"5":[2,116],"10":[2,116],"14":[2,116],"29":[2,116],"39":[2,116],"41":[2,116],"71":[2,116],"72":[2,116]},{"35":[1,80]},{"35":[1,81]},{"2":[2,119],"3":[2,119],"4":[2,119],"5":[2,119],"10":[2,119],"14":[2,119],"29":[2,119],"39":[2,119],"41":[2,119],"71":[2,119],"72":[2,119]},{"2":[2,112],"4":[2,112],"10":[2,112],"14":[2,112],"29":[2,112],"39":[2,112],"41":[2,112],"71":[2,112],"72":[2,112]},{"2":[2,113],"4":[2,113],"10":[2,113],"14":[2,113],"29":[2,113],"39":[2,113],"41":[2,113],"71":[2,113],"72":[2,113]},{"2":[2,114],"4":[2,114],"10":[2,114],"14":[2,114],"29":[2,114],"39":[2,114],"41":[2,114],"71":[2,114],"72":[2,114]},{"2":[2,115],"4":[2,115],"10":[2,115],"14":[2,115],"29":[2,115],"39":[2,115],"41":[2,115],"71":[2,115],"72":[2,115]},{"2":[2,111],"4":[2,111],"10":[2,111],"14":[2,111],"29":[2,111],"39":[2,111],"41":[2,111],"71":[2,111],"72":[2,111]},{"2":[2,108],"4":[2,108],"10":[2,108],"14":[2,108],"29":[2,108],"35":[2,108],"39":[2,108],"41":[2,108],"70":[2,108],"71":[2,108],"72":[2,108]},{"2":[2,109],"4":[2,109],"10":[2,109],"14":[2,109],"29":[2,109],"35":[2,109],"39":[2,109],"41":[2,109],"70":[2,109],"71":[2,109],"72":[2,109]},{"2":[2,110],"4":[2,110],"10":[2,110],"14":[2,110],"29":[2,110],"35":[2,110],"39":[2,110],"41":[2,110],"70":[2,110],"71":[2,110],"72":[2,110]},{"2":[2,102],"4":[2,102],"10":[2,102],"14":[2,102],"29":[2,102],"39":[2,102],"41":[2,102],"71":[2,102],"72":[2,102]},{"2":[2,103],"4":[2,103],"10":[2,103],"14":[2,103],"29":[2,103],"39":[2,103],"41":[2,103],"71":[2,103],"72":[2,103]},{"2":[2,100],"4":[2,100],"10":[2,100],"14":[2,100],"29":[2,100],"39":[2,100],"41":[2,100],"71":[2,100],"72":[2,100]},{"2":[2,101],"4":[2,101],"10":[2,101],"14":[2,101],"29":[2,101],"39":[2,101],"41":[2,101],"71":[2,101],"72":[2,101]},{"0":[1,60],"6":[1,59],"7":[1,58],"18":[1,56],"19":[1,51],"20":[1,40],"21":[1,21],"22":[1,16],"23":[1,38],"24":[1,39],"25":[1,46],"26":[1,45],"27":[1,55],"28":[1,57],"30":[1,42],"31":[1,44],"32":[1,61],"33":[1,37],"34":[1,47],"36":[1,41],"37":[1,6],"38":[1,64],"51":[1,50],"54":[1,63],"60":[1,52],"61":[1,53],"62":[1,54],"69":[1,48],"75":[1,49],"82":[1,62]},{"29":[1,85]},{"1":[1,14],"45":[1,10],"50":[1,12],"65":[1,11],"69":[1,8],"80":[1,1]},{"24":[1,90],"68":[1,88]},{"1":[1,94],"24":[1,90],"40":[1,91],"56":[1,100],"68":[1,88],"74":[1,99],"81":[1,98],"83":[1,97]},{"12":[1,101]},{"1":[1,94],"24":[1,90],"40":[1,102],"56":[1,100],"74":[1,99],"81":[1,98],"83":[1,97]},{"1":[1,14],"45":[1,10],"50":[1,12],"65":[1,73],"80":[1,1]},{"29":[1,85]},{"1":[1,107]},{"2":[1,108]},{"19":[1,51],"51":[1,50],"69":[1,48],"75":[1,49]},{"35":[1,110]},{"2":[2,104],"3":[2,104],"4":[2,104],"5":[2,104],"6":[2,104],"7":[2,104],"10":[2,104],"14":[2,104],"28":[2,104],"29":[2,104],"39":[2,104],"41":[2,104],"70":[2,104],"71":[2,104],"72":[2,104]},{"6":[1,59],"7":[1,58],"21":[1,113],"28":[1,57]},{"6":[1,59],"7":[1,58],"21":[1,113],"28":[1,57]},{"2":[2,117],"3":[2,117],"4":[2,117],"5":[2,117],"10":[2,117],"14":[2,117],"29":[2,117],"39":[2,117],"41":[2,117],"71":[2,117],"72":[2,117]},{"2":[2,118],"3":[2,118],"4":[2,118],"5":[2,118],"10":[2,118],"14":[2,118],"29":[2,118],"39":[2,118],"41":[2,118],"71":[2,118],"72":[2,118]},{"4":[1,117],"39":[1,116]},{"4":[2,98],"39":[2,98]},{"10":[2,7],"71":[2,7]},{"12":[1,118]},{"10":[2,3],"71":[1,65]},{"10":[2,4],"71":[2,4]},{"10":[2,34],"71":[2,34]},{"10":[2,35],"29":[1,120],"71":[2,35]},{"2":[2,36],"10":[2,36],"14":[2,36],"29":[2,36],"71":[2,36]},{"43":[1,127],"44":[1,126],"46":[1,121],"49":[1,125],"63":[1,123],"64":[1,122],"78":[1,124]},{"14":[1,128]},{"2":[2,8],"10":[2,35],"14":[2,8],"29":[1,120],"71":[2,35]},{"1":[1,94],"24":[1,90],"40":[1,129],"56":[1,100],"74":[1,99],"81":[1,98],"83":[1,97]},{"10":[2,6],"71":[2,6]},{"2":[2,17],"14":[2,17],"71":[1,131]},{"6":[1,59],"7":[1,58],"28":[1,57]},{"19":[1,51],"51":[1,50],"69":[1,48],"75":[1,49]},{"6":[1,59],"7":[1,58],"28":[1,57]},{"19":[1,51],"51":[1,50],"69":[1,48],"75":[1,49]},{"34":[1,47]},{"43":[1,127],"44":[1,126],"46":[1,121],"49":[1,125],"63":[1,123],"64":[1,122],"78":[1,124]},{"2":[1,137]},{"2":[2,8],"14":[2,8],"29":[1,120]},{"2":[1,138]},{"2":[2,33],"14":[2,33],"71":[2,33]},{"1":[1,94],"24":[1,90],"40":[1,102],"56":[1,100],"74":[1,99],"81":[1,98],"83":[1,97]},{"59":[1,140]},{"3":[1,78],"4":[1,141],"5":[1,79]},{"2":[2,105],"3":[2,105],"4":[2,105],"5":[2,105],"6":[2,105],"7":[2,105],"10":[2,105],"14":[2,105],"28":[2,105],"29":[2,105],"39":[2,105],"41":[2,105],"70":[2,105],"71":[2,105],"72":[2,105]},{"2":[2,120],"3":[2,120],"4":[2,120],"5":[2,120],"10":[2,120],"14":[2,120],"29":[2,120],"39":[2,120],"41":[2,120],"71":[2,120],"72":[2,120]},{"2":[2,106],"3":[2,106],"4":[2,106],"5":[2,106],"6":[1,59],"7":[1,58],"10":[2,106],"14":[2,106],"28":[1,57],"29":[2,106],"39":[2,106],"41":[2,106],"70":[2,106],"71":[2,106],"72":[2,106]},{"2":[2,107],"3":[2,107],"4":[2,107],"5":[2,107],"10":[2,107],"14":[2,107],"29":[2,107],"39":[2,107],"41":[2,107],"70":[2,107],"71":[2,107],"72":[2,107]},{"35":[1,77]},{"2":[2,121],"3":[2,121],"4":[2,121],"5":[2,121],"10":[2,121],"14":[2,121],"29":[2,121],"39":[2,121],"41":[2,121],"71":[2,121],"72":[2,121]},{"2":[2,97],"4":[2,97],"10":[2,97],"14":[2,97],"29":[2,97],"39":[2,97],"41":[2,97],"71":[2,97],"72":[2,97]},{"0":[1,60],"6":[1,59],"7":[1,58],"18":[1,56],"19":[1,51],"20":[1,40],"21":[1,21],"22":[1,16],"23":[1,38],"24":[1,39],"25":[1,46],"26":[1,45],"27":[1,55],"28":[1,57],"30":[1,42],"31":[1,44],"32":[1,61],"33":[1,37],"34":[1,47],"36":[1,41],"37":[1,6],"38":[1,64],"51":[1,50],"54":[1,63],"60":[1,52],"61":[1,53],"62":[1,54],"69":[1,48],"75":[1,49],"82":[1,62]},{"29":[1,145],"53":[1,144]},{"2":[2,37],"10":[2,37],"14":[2,37],"29":[2,37],"71":[2,37]},{"12":[1,146]},{"29":[1,145]},{"29":[1,145]},{"29":[1,145]},{"29":[1,145]},{"70":[1,151]},{"29":[1,145]},{"29":[1,145]},{"24":[1,90],"68":[1,88]},{"43":[1,127],"44":[1,126],"46":[1,121],"49":[1,125],"63":[1,123],"64":[1,122],"78":[1,124]},{"2":[1,155]},{"29":[1,85]},{"4":[1,157]},{"3":[1,78],"4":[1,158],"5":[1,79]},{"4":[1,159]},{"3":[1,78],"4":[1,160],"5":[1,79]},{"2":[2,25],"14":[2,25]},{"2":[2,26],"14":[2,26],"71":[1,161]},{"71":[1,162]},{"2":[1,163]},{"1":[1,164]},{"58":[1,165]},{"4":[2,99],"39":[2,99]},{"2":[2,38],"10":[2,38],"14":[2,38],"71":[2,38]},{"2":[2,39],"10":[2,39],"14":[2,39],"71":[2,39]},{"2":[2,41],"4":[2,41],"6":[2,41],"7":[2,41],"10":[2,41],"14":[2,41],"28":[2,41],"39":[2,41],"41":[2,41],"70":[2,41],"71":[2,41],"72":[2,41]},{"0":[1,60],"6":[1,59],"7":[1,58],"18":[1,56],"19":[1,51],"20":[1,40],"21":[1,21],"22":[1,16],"23":[1,38],"24":[1,39],"25":[1,46],"26":[1,45],"27":[1,55],"28":[1,57],"30":[1,42],"31":[1,44],"32":[1,61],"33":[1,37],"34":[1,47],"36":[1,41],"37":[1,6],"38":[1,64],"51":[1,50],"54":[1,63],"60":[1,52],"61":[1,53],"62":[1,54],"69":[1,48],"75":[1,49],"82":[1,62]},{"70":[1,167]},{"70":[1,168]},{"70":[1,169]},{"70":[1,170]},{"1":[1,171]},{"6":[1,59],"7":[1,58],"28":[1,57]},{"6":[1,59],"7":[1,58],"28":[1,57]},{"10":[2,5],"71":[2,5]},{"55":[1,174],"59":[1,175]},{"2":[2,23],"14":[2,23],"71":[2,23]},{"6":[1,59],"7":[1,58],"28":[1,57]},{"6":[1,59],"7":[1,58],"21":[1,113],"28":[1,57]},{"6":[1,59],"7":[1,58],"28":[1,57]},{"6":[1,59],"7":[1,58],"21":[1,113],"28":[1,57]},{"66":[1,180]},{"29":[1,186],"67":[1,185],"82":[1,182]},{"2":[2,26],"14":[2,26],"71":[1,161]},{"1":[1,94],"24":[1,90],"40":[1,129],"56":[1,100],"74":[1,99],"81":[1,98],"83":[1,97]},{"12":[1,188]},{"2":[2,40],"10":[2,40],"14":[2,40],"29":[2,40],"71":[2,40]},{"1":[1,189]},{"1":[1,190]},{"1":[1,191]},{"1":[1,192]},{"1":[1,94],"24":[1,90],"40":[1,129],"56":[1,100],"74":[1,99],"81":[1,98],"83":[1,97]},{"4":[1,194]},{"4":[1,195]},{"29":[1,186],"67":[1,185]},{"1":[1,197]},{"70":[1,198]},{"70":[1,199]},{"70":[1,200]},{"70":[1,201]},{"29":[1,145],"38":[1,202]},{"2":[2,29],"14":[2,29],"41":[1,204]},{"2":[2,30],"14":[2,30]},{"2":[2,44],"14":[2,44],"41":[2,44],"72":[1,205]},{"2":[2,46],"14":[2,46],"41":[2,46],"72":[2,46]},{"29":[1,186]},{"9":[1,212],"11":[1,210],"13":[1,220],"15":[1,213],"16":[1,211],"17":[1,209],"48":[1,219],"52":[1,216],"57":[1,207],"73":[1,217],"76":[1,215],"77":[1,218],"84":[1,214]},{"2":[1,221]},{"6":[1,59],"7":[1,58],"21":[1,113],"28":[1,57]},{"1":[1,94],"24":[1,90],"40":[1,129],"56":[1,100],"74":[1,99],"81":[1,98],"83":[1,97]},{"1":[1,94],"24":[1,90],"40":[1,129],"56":[1,100],"74":[1,99],"81":[1,98],"83":[1,97]},{"1":[1,94],"24":[1,90],"40":[1,129],"56":[1,100],"74":[1,99],"81":[1,98],"83":[1,97]},{"1":[1,94],"24":[1,90],"40":[1,129],"56":[1,100],"74":[1,99],"81":[1,98],"83":[1,97]},{"2":[1,227]},{"6":[1,59],"7":[1,58],"28":[1,57]},{"6":[1,59],"7":[1,58],"28":[1,57]},{"2":[2,9],"14":[2,9],"41":[1,204]},{"1":[1,94],"24":[1,90],"40":[1,129],"56":[1,100],"74":[1,99],"81":[1,98],"83":[1,97]},{"1":[1,231]},{"1":[1,232]},{"1":[1,233]},{"1":[1,234]},{"29":[1,145]},{"2":[2,27],"14":[2,27]},{"29":[1,186],"67":[1,185]},{"29":[1,186]},{"2":[2,47],"14":[2,47],"41":[2,47],"72":[2,47]},{"29":[1,145],"38":[1,64]},{"2":[2,49],"14":[2,49],"41":[2,49],"72":[2,49]},{"0":[1,60],"6":[1,59],"7":[1,58],"18":[1,56],"19":[1,51],"20":[1,40],"21":[1,21],"22":[1,16],"23":[1,38],"24":[1,39],"25":[1,46],"26":[1,45],"27":[1,55],"28":[1,57],"29":[1,145],"30":[1,42],"31":[1,44],"32":[1,61],"33":[1,37],"34":[1,47],"36":[1,41],"37":[1,6],"38":[1,64],"51":[1,50],"54":[1,63],"60":[1,52],"61":[1,53],"62":[1,54],"69":[1,48],"75":[1,49],"82":[1,62]},{"0":[1,60],"6":[1,59],"7":[1,58],"18":[1,56],"19":[1,51],"20":[1,40],"21":[1,21],"22":[1,16],"23":[1,38],"24":[1,39],"25":[1,46],"26":[1,45],"27":[1,55],"28":[1,57],"29":[1,145],"30":[1,42],"31":[1,44],"32":[1,61],"33":[1,37],"34":[1,47],"36":[1,41],"37":[1,6],"38":[1,64],"51":[1,50],"54":[1,63],"60":[1,52],"61":[1,53],"62":[1,54],"69":[1,48],"75":[1,49],"82":[1,62]},{"0":[1,60],"6":[1,59],"7":[1,58],"18":[1,56],"19":[1,51],"20":[1,40],"21":[1,21],"22":[1,16],"23":[1,38],"24":[1,39],"25":[1,46],"26":[1,45],"27":[1,55],"28":[1,57],"29":[1,145],"30":[1,42],"31":[1,44],"32":[1,61],"33":[1,37],"34":[1,47],"36":[1,41],"37":[1,6],"38":[1,64],"51":[1,50],"54":[1,63],"60":[1,52],"61":[1,53],"62":[1,54],"69":[1,48],"75":[1,49],"82":[1,62]},{"0":[1,60],"6":[1,59],"7":[1,58],"18":[1,56],"19":[1,51],"20":[1,40],"21":[1,21],"22":[1,16],"23":[1,38],"24":[1,39],"25":[1,46],"26":[1,45],"27":[1,55],"28":[1,57],"29":[1,145],"30":[1,42],"31":[1,44],"32":[1,61],"33":[1,37],"34":[1,47],"36":[1,41],"37":[1,6],"38":[1,64],"51":[1,50],"54":[1,63],"60":[1,52],"61":[1,53],"62":[1,54],"69":[1,48],"75":[1,49],"82":[1,62]},{"0":[1,60],"29":[1,145],"32":[1,61]},{"0":[1,60],"29":[1,145],"32":[1,61]},{"0":[1,60],"29":[1,145],"32":[1,61]},{"0":[1,60],"29":[1,145],"32":[1,61]},{"0":[1,60],"29":[1,145],"32":[1,61]},{"0":[1,60],"29":[1,145],"32":[1,61]},{"0":[1,60],"6":[1,59],"7":[1,58],"18":[1,56],"19":[1,51],"20":[1,40],"21":[1,21],"22":[1,16],"23":[1,38],"24":[1,39],"25":[1,46],"26":[1,45],"27":[1,55],"28":[1,57],"29":[1,145],"30":[1,42],"31":[1,44],"32":[1,61],"33":[1,37],"34":[1,47],"36":[1,41],"37":[1,6],"38":[1,64],"51":[1,50],"54":[1,63],"60":[1,52],"61":[1,53],"62":[1,54],"69":[1,48],"75":[1,49],"82":[1,62]},{"0":[1,60],"6":[1,59],"7":[1,58],"18":[1,56],"19":[1,51],"20":[1,40],"21":[1,21],"22":[1,16],"23":[1,38],"24":[1,39],"25":[1,46],"26":[1,45],"27":[1,55],"28":[1,57],"29":[1,145],"30":[1,42],"31":[1,44],"32":[1,61],"33":[1,37],"34":[1,47],"36":[1,41],"37":[1,6],"38":[1,64],"51":[1,50],"54":[1,63],"60":[1,52],"61":[1,53],"62":[1,54],"69":[1,48],"75":[1,49],"82":[1,62]},{"2":[2,32],"14":[2,32],"71":[2,32]},{"2":[2,24],"14":[2,24]},{"2":[1,265]},{"2":[1,266]},{"2":[1,267]},{"2":[1,268]},{"2":[2,14],"14":[2,14]},{"70":[1,269]},{"70":[1,270]},{"2":[1,271]},{"1":[1,14],"45":[1,10],"50":[1,12],"65":[1,73],"80":[1,1]},{"1":[1,14],"45":[1,10],"50":[1,12],"65":[1,73],"80":[1,1]},{"1":[1,94],"24":[1,90],"40":[1,129],"56":[1,100],"74":[1,99],"81":[1,98],"83":[1,97]},{"1":[1,94],"24":[1,90],"40":[1,129],"56":[1,100],"74":[1,99],"81":[1,98],"83":[1,97]},{"4":[1,277],"39":[1,276]},{"4":[2,42],"39":[2,42]},{"2":[2,45],"14":[2,45],"41":[2,45],"72":[1,205]},{"2":[2,48],"14":[2,48],"41":[2,48],"72":[2,48]},{"2":[2,62],"14":[2,62],"41":[2,62],"72":[2,62]},{"2":[2,75],"14":[2,75],"41":[2,75],"72":[2,75]},{"2":[2,51],"14":[2,51],"41":[2,51],"72":[2,51]},{"2":[2,64],"14":[2,64],"41":[2,64],"72":[2,64]},{"2":[2,52],"14":[2,52],"41":[2,52],"72":[2,52]},{"2":[2,65],"14":[2,65],"41":[2,65],"72":[2,65]},{"2":[2,53],"14":[2,53],"41":[2,53],"72":[2,53]},{"2":[2,66],"14":[2,66],"41":[2,66],"72":[2,66]},{"2":[2,54],"14":[2,54],"41":[2,54],"72":[2,54]},{"2":[2,67],"14":[2,67],"41":[2,67],"72":[2,67]},{"2":[2,55],"14":[2,55],"41":[2,55],"72":[2,55]},{"2":[2,68],"14":[2,68],"41":[2,68],"72":[2,68]},{"2":[2,56],"14":[2,56],"41":[2,56],"72":[2,56]},{"2":[2,69],"14":[2,69],"41":[2,69],"72":[2,69]},{"2":[2,57],"14":[2,57],"41":[2,57],"72":[2,57]},{"2":[2,70],"14":[2,70],"41":[2,70],"72":[2,70]},{"2":[2,58],"14":[2,58],"41":[2,58],"72":[2,58]},{"2":[2,71],"14":[2,71],"41":[2,71],"72":[2,71]},{"2":[2,59],"14":[2,59],"41":[2,59],"72":[2,59]},{"2":[2,72],"14":[2,72],"41":[2,72],"72":[2,72]},{"2":[2,60],"14":[2,60],"41":[2,60],"72":[2,60]},{"2":[2,73],"14":[2,73],"41":[2,73],"72":[2,73]},{"2":[2,61],"14":[2,61],"41":[2,61],"72":[2,61]},{"2":[2,74],"14":[2,74],"41":[2,74],"72":[2,74]},{"2":[2,50],"14":[2,50],"41":[2,50],"72":[2,50]},{"2":[2,63],"14":[2,63],"41":[2,63],"72":[2,63]},{"2":[2,13],"14":[2,13]},{"2":[2,10],"14":[2,10]},{"2":[2,11],"14":[2,11]},{"2":[2,12],"14":[2,12]},{"1":[1,278]},{"1":[1,279]},{"2":[2,22],"14":[2,22],"71":[2,22]},{"2":[1,280]},{"2":[1,281]},{"2":[1,282]},{"2":[1,283]},{"2":[2,28],"14":[2,28]},{"29":[1,145]},{"1":[1,94],"24":[1,90],"40":[1,129],"56":[1,100],"74":[1,99],"81":[1,98],"83":[1,97]},{"1":[1,94],"24":[1,90],"40":[1,129],"56":[1,100],"74":[1,99],"81":[1,98],"83":[1,97]},{"2":[2,18],"14":[2,18]},{"2":[2,19],"14":[2,19]},{"2":[2,20],"14":[2,20]},{"2":[2,21],"14":[2,21]},{"4":[2,43],"39":[2,43]},{"2":[1,287]},{"2":[1,288]},{"2":[2,15],"14":[2,15]},{"2":[2,16],"14":[2,16]}];
const SEMANTIC_ACTION = [
((x) => x),
((_, constant) => constant),
((rule) => new Ast.Program([], [], [rule], null)),
((user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })),
((stream, _, action) => new Ast.Statement.Rule(stream, [action])),
((_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])),
((_1, _2, action) => new Ast.Statement.Command(null, [action])),
((rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }),
((get) => Ast.Table.Invocation(get, null)),
((_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((x) => x),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)),
((_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
((_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)),
((_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)),
((monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null, null)),
((monitor, _1, table, _2, _3, _4, pname) => new Ast.Stream.Monitor(table, [pname.name], null)),
((monitor, _1, table, _2, _3, _4, _5, pnames, _6) => new Ast.Stream.Monitor(table, pnames.map((p) => p.name), null)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, filter, null)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, Ast.BooleanExpression.True, null)),
((x) => x),
((_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
(() => Generate.notifyAction()),
((x) => x),
((fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)),
((inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }),
((pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)),
((pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))),
((pname, _1, v) => new Ast.InputParam(pname.value, v)),
((pname) => new Ast.Value.VarRef(pname.value)),
((pname) => [pname]),
((list, _, pname) => list.concat(pname)),
((x) => x),
((f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])),
((x) => x),
((_, f) => new Ast.BooleanExpression.Not(f)),
((f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])),
((pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((slot) => slot.value === undefined ? Ast.Value.Undefined(true) : slot.value),
((_1, values, _2) => new Ast.Value.Array(values)),
((v) => [v]),
((array, _, v) => {
                                   array.push(v);
                                   return array;
                               }),
(() => new Ast.Value.Boolean(true)),
(() => new Ast.Value.Boolean(false)),
((str) => new Ast.Value.String('')),
((str) => new Ast.Value.String(str.value)),
((num, unit) => new Ast.Value.Measure(num.value, unit.value)),
((v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }),
((x) => x),
((tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)),
((num) => new Ast.Value.Number(num.value)),
(() => new Ast.Value.Number(1)),
(() => new Ast.Value.Number(0)),
((tok) => new Ast.Value.Currency(tok.value.value, tok.value.unit)),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((loc) => new Ast.Value.Location(new Ast.Location.Absolute(loc.value.latitude, loc.value.longitude, loc.value.display||null))),
((loc) => new Ast.Value.Date(null, '+', null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)),
((abs) => new Ast.Value.Date(parseDate(abs.value), '+', null)),
((date, op, offset) => new Ast.Value.Date(date.value, op, offset)),
((date, op, offset) => new Ast.Value.Date(date.value, op, offset)),
((time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second||0)),
((venum) => new Ast.Value.Enum(venum.value)),
((entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:path_name', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:device', null)),
((entity) => new Ast.Value.Entity(entity.kind + ':' + entity.device)),
((x, _) => x),
];
module.exports = require('./sr_parser')(TERMINAL_IDS, RULE_NON_TERMINALS, ARITY, GOTO, PARSER_ACTION, SEMANTIC_ACTION);
