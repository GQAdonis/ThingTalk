// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingEngine
//
// Copyright 2017 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details
"use strict";

const Ast = require('./ast');
const Generate = require('./generate');

/**
 * Differences with the actual NN Grammar (as written in
 * almond-nnparser/grammar/thingtalk.py):
 *
 * - almond-nnparser's grammar distinguishes $get and $do, while
 *   while this one uses just $call
 *   almond-nnparser can do that because it knows the full list of
 *   gets and dos (and knows that they don't interset), whereas here
 *   we have a single FUNCTION token
 * - almond-nnparser's grammar is typed around parameter types and
 *   constants, this one is not because otherwise it would be too unwieldly
 *   to write
 * - almond-nnparser uses different terminals for <entity>_i because
 *   it autogenerates the grammar; this grammar uses a single terminal
 *   <entity> plus a lexical analysis step because I was too lazy to write
 *   down all cases by hand
 *
 * Missing features, compared with full TT:
 * - single statement
 * - no complex selectors
 * - no remote primitives (yet)
 * - no declarations
 * - no multi-field projection
 * - no alias (in aggregate and as a table/stream operator)
 * - no compute
 *
 * Differences with full TT:
 * - all filter operators are infix
 * - multiple parameter passings are prefixed with on in a join
 * - function names are one token
 * - parameter names are prefixed with param:
 * - enum choices are prefixed with enum:
 * - units are prefixed with unit:
 * - relative locations are prefixed with location:
 *
 * What to keep in mind when writing the grammar:
 * - shifts are cheap, reduces are expensive
 * - adding more symbols to a rule only increases the number of shifts
 * - adding more non-terminals to the grammar increases the number of
 *   reduces
 * - splitting a rule into multiple non-terminals increases the number of
 *   reduces
 * - the breadth of reduces matters too
 * - the overall number of rules affects the breadth of reduces
 */

const identity = (x) => x;

function parseDate(form) {
    if (form instanceof Date)
        return form;
    let now = new Date;
    let year = form.year;
    if (year < 0)
        year = now.getFullYear();
    let month = form.month;
    if (month < 0)
        month = now.getMonth() + 1;
    let day = form.day;
    if (day < 0)
        day = now.getDate();
    let hour = 0, minute = 0, second = 0;
    hour = form.hour;
    if (hour < 0)
        hour = now.getHours();
    minute = form.minute;
    if (minute < 0)
        minute = now.getMinutes();
    second = form.second;
    if (second < 0)
        second = now.getSeconds();

    return new Date(year, month-1, day, hour, minute, second);
}

module.exports = {
    '$input':         [[['$program',], identity],
                       [['answer', '$constant'], (_, constant) => constant]],

    '$program':       [[['$rule',], (rule) => new Ast.Program([], [], [rule], null)],
                       [['$constant_Entity(tt:username)', ':', '$rule'], (user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })]],

    '$rule':          [[['$stream', '=>', '$action'], (stream, _, action) => new Ast.Statement.Rule(stream, [action])],
                       [['now', '=>', '$table', '=>', '$action'], (_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])],
                       [['now', '=>', '$action'], (_1, _2, action) => new Ast.Statement.Command(null, [action])],
                       [['$rule', 'on', '$param_passing'], (rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }]],

    '$table':         [[['$call',], (get) => Ast.Table.Invocation(get, null)],
                       [['(', '$table', ')', 'filter', '$filter'], (_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)],
                       [['aggregate', 'min', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'max', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'sum', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'avg', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'count', 'of', '(', '$table', ')'], (_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)],
                       [['aggregate', 'argmin', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['aggregate', 'argmax', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['$table_join'], identity],
                       [['window', '$constant_Number', ',', '$constant_Number', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)],
                       [['timeseries', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)],
                       [['sequence', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)],
                       [['history', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)]],

    '$table_join':    [[['(', '$table', ')', 'join', '(', '$table', ')'], (_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)],
                       [['$table_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$stream':        [[['timer', 'base', '=', '$constant_Date', ',', 'interval', '=', '$constant_Measure(ms)'], (_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)],
                       [['attimer', 'time', '=', '$constant_Time'], (_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)],
                       [['monitor', '(', '$table', ')'], (monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null, null)],
                       [['monitor', '(', '$table', ')', 'on', 'new', '$out_param'], (monitor, _1, table, _2, _3, _4, pname) => new Ast.Stream.Monitor(table, [pname.name], null)],
                       [['monitor', '(', '$table', ')', 'on', 'new', '[', '$out_param_list', ']'], (monitor, _1, table, _2, _3, _4, _5, pnames, _6) => new Ast.Stream.Monitor(table, pnames.map((p) => p.name), null)],
                       [['edge', '(', '$stream', ')', 'on', '$filter'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, filter, null)],
                       // edge on true is the equivalent of "only once"
                       [['edge', '(', '$stream', ')', 'on', 'true'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, Ast.BooleanExpression.True, null)],
                       [['$stream_join'], identity]],

    '$stream_join':   [[['(', '$stream', ')', 'join', '(', '$table', ')'], (_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)],
                       [['$stream_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$action':        [[['notify'], () => Generate.notifyAction()],
                       [['$call'], identity]],

    '$call':           [[['FUNCTION'], (fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)],
                       [['$call', '$const_param'], (inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }]],

    '$param_passing': [[['PARAM_NAME', '=', '$out_param'], (pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)],
                       [['PARAM_NAME', '=', 'event'], (pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))]],

    '$const_param':   [[['PARAM_NAME', '=', '$constant'], (pname, _1, v) => new Ast.InputParam(pname.value, v)]],

    '$out_param':     [[['PARAM_NAME'], (pname) => new Ast.Value.VarRef(pname.value)]],

    '$out_param_list':[[['$out_param'], (pname) => [pname]],
                       [['$out_param_list', ',', '$out_param'], (list, _, pname) => list.concat(pname)]],

    // note that $filter is not recursive!
    // it must be in CNF form
    // also note that and takes priority over or
    // this is the opposite of regular TT (which copies JS in that respect)
    // because most filters are just a list of
    // "condition and this or that and foo or bar"
    // to be read as
    // "condition and (this or that) and (foo or bar)"
    '$filter':        [[['$or_filter'], identity],
                       [['$filter', 'and', '$or_filter'], (f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])]],

    '$or_filter':     [[['$atom_filter'], identity],
                       [['not', '$atom_filter'], (_, f) => new Ast.BooleanExpression.Not(f)],
                       [['$or_filter', 'or', '$atom_filter'], (f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])]],

    '$atom_filter':   [[['PARAM_NAME', '$value_filter'], (pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)]],

    // in almond-nnparser these are strongly typed constants, so only
    // numbers and measures can be compared for order, etc
    // we're a little looser here because otherwise it becomes unwieldly
    '$value_filter':  [[['==', '$constant'], (op, v) => [op, v]],
                       [['>=', '$constant'], (op, v) => [op, v]],
                       [['<=', '$constant'], (op, v) => [op, v]],
                       [['>', '$constant'], (op, v) => [op, v]],
                       [['<', '$constant'], (op, v) => [op, v]],
                       [['=~', '$constant_String'], (op, v) => [op, v]],
                       [['~=', '$constant_String'], (op, v) => [op, v]],
                       [['starts_with', '$constant_String'], (op, v) => [op, v]],
                       [['ends_with',  '$constant_String'], (op, v) => [op, v]],
                       [['prefix_of',  '$constant_String'], (op, v) => [op, v]],
                       [['suffix_of',  '$constant_String'], (op, v) => [op, v]],
                       [['contains',  '$constant'], (op, v) => [op, v]],
                       [['in_array',  '$constant_Array'], (op, v) => [op, v]],

                       [['==', '$out_param'], (op, v) => [op, v]],
                       [['>=', '$out_param'], (op, v) => [op, v]],
                       [['<=', '$out_param'], (op, v) => [op, v]],
                       [['>', '$out_param'], (op, v) => [op, v]],
                       [['<', '$out_param'], (op, v) => [op, v]],
                       [['=~', '$out_param'], (op, v) => [op, v]],
                       [['~=', '$out_param'], (op, v) => [op, v]],
                       [['starts_with', '$out_param'], (op, v) => [op, v]],
                       [['ends_with',  '$out_param'], (op, v) => [op, v]],
                       [['prefix_of',  '$out_param'], (op, v) => [op, v]],
                       [['suffix_of',  '$out_param'], (op, v) => [op, v]],
                       [['contains',  '$out_param'], (op, v) => [op, v]],
                       [['in_array',  '$out_param'], (op, v) => [op, v]]],

    // this non-terminal exists only for convenience
    // the almond nn-parser grammar does not have it
    '$constant':      [[['$constant_Array'], identity],
                       [['$constant_Boolean'], identity],
                       [['$constant_String'], identity],
                       [['$constant_Measure'], identity],
                       [['DURATION'], (tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)],
                       [['$constant_Number'], identity],
                       [['$constant_Location'], identity],
                       [['$constant_Date'], identity],
                       [['$constant_Time'], identity],
                       [['$constant_Entity(unknown)'], identity],
                       [['$constant_Entity(tt:username)'], identity],
                       [['$constant_Entity(tt:hashtag)'], identity],
                       [['$constant_Entity(tt:phone_number)'], identity],
                       [['$constant_Entity(tt:email_address)'], identity],
                       [['$constant_Entity(tt:url)'], identity],
                       [['$constant_Entity(tt:device)'], identity],
                       [['$constant_Entity(tt:function)'], identity],
                       [['$constant_Enum'], identity]],

    // we cannot represent an empty array
    // I don't think that's useful anyway
    '$constant_Array': [[['[', '$constant_array_values', ']'], (_1, values, _2) => new Ast.Value.Array(values)]],

    '$constant_array_values': [[['$constant'], (v) => [v]],
                               [['$constant_array_values', ',', '$constant'], (array, _, v) => {
                                   array.push(v);
                                   return array;
                               }]],

    '$constant_Boolean': [[['true'], () => new Ast.Value.Boolean(true)],
                          [['false'], () => new Ast.Value.Boolean(false)]],

    '$constant_String': [[['""'], (str) => new Ast.Value.String('')],
                         [['QUOTED_STRING'], (str) => new Ast.Value.String(str.value)]],

    // play fast and loose with units here, because I don't want to write
    // everything by hand
    // almond-nnparser autogenerates this part
    '$constant_Measure': [[['$constant_Number', 'UNIT'], (num, unit) => new Ast.Value.Measure(num.value, unit.value)],
                          [['$constant_Measure', '$constant_Number', 'UNIT'], (v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }]],
    '$constant_Measure(ms)': [[['$constant_Measure'], identity],
                              [['DURATION'], (tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)]],

    '$constant_Number': [[['NUMBER'], (num) => new Ast.Value.Number(num.value)],
                         [['1'], () => new Ast.Value.Number(1)],
                         [['0'], () => new Ast.Value.Number(0)]],

    '$constant_Location': [[['location:current_location'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:home'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:work'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['LOCATION'], (loc) => new Ast.Value.Location(new Ast.Location.Absolute(loc.value.latitude, loc.value.longitude, loc.value.display||null))]],

    // start_of/end_of with less than 1h are not supported
    // (they don't make sense)
    '$constant_Date': [[['now'], (loc) => new Ast.Value.Date(null, '+', null)],
                       [['start_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)],
                       [['end_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)],
                       [['DATE'], (abs) => new Ast.Value.Date(parseDate(abs.value), '+', null)],
                       [['$constant_Date', '+', '$constant_Measure(ms)'], (date, op, offset) => new Ast.Value.Date(date.value, op, offset)],
                       [['$constant_Date', '-', '$constant_Measure(ms)'], (date, op, offset) => new Ast.Value.Date(date.value, op, offset)]],

    '$constant_Time': [[['TIME'], (time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second||0)]],

    // almond-nnparser expands this into the various enums in the right
    // place for a parameter (as the meaning of an enum changes according
    // to the parameter anyway)
    '$constant_Enum': [[['ENUM'], (venum) => new Ast.Value.Enum(venum.value)]],

    '$constant_Entity(unknown)': [[['GENERIC_ENTITY'], (entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)]],

    '$constant_Entity(tt:username)': [[['USERNAME'], (entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)]],

    '$constant_Entity(tt:hashtag)': [[['HASHTAG'], (entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)]],

    '$constant_Entity(tt:url)': [[['URL'], (entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)]],

    '$constant_Entity(tt:phone_number)': [[['PHONE_NUMBER'], (entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)]],

    '$constant_Entity(tt:email_address)': [[['EMAIL_ADDRESS'], (entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)]],

    '$constant_Entity(tt:device)': [[['DEVICE'], (entity) => new Ast.Value.Entity(entity.value, 'tt:device', null)]],

    '$constant_Entity(tt:function)': [[['FUNCTION'], (entity) => new Ast.Value.Entity(entity.kind + ':' + entity.device)]]
};

const TERMINAL_IDS = {"0":6,"1":7,"\"\"":0,"(":1,")":2,"+":3,",":4,"-":5,":":8,"<":9,"<<EOF>>":10,"<=":11,"=":12,"==":13,"=>":14,"=~":15,">":16,">=":17,"DATE":18,"DEVICE":19,"DURATION":20,"EMAIL_ADDRESS":21,"ENUM":22,"FUNCTION":23,"GENERIC_ENTITY":24,"HASHTAG":25,"LOCATION":26,"NUMBER":27,"PARAM_NAME":28,"PHONE_NUMBER":29,"QUOTED_STRING":30,"TIME":31,"UNIT":32,"URL":33,"USERNAME":34,"[":35,"]":36,"aggregate":37,"and":38,"answer":39,"argmax":40,"argmin":41,"attimer":42,"avg":43,"base":44,"contains":45,"count":46,"edge":47,"end_of":48,"ends_with":49,"event":50,"false":51,"filter":52,"history":53,"in_array":54,"interval":55,"join":56,"location:current_location":57,"location:home":58,"location:work":59,"max":60,"min":61,"monitor":62,"new":63,"not":64,"notify":65,"now":66,"of":67,"on":68,"or":69,"prefix_of":70,"sequence":71,"start_of":72,"starts_with":73,"suffix_of":74,"sum":75,"time":76,"timer":77,"timeseries":78,"true":79,"window":80,"~=":81};
const RULE_NON_TERMINALS = [26,26,31,31,32,32,32,32,35,35,35,35,35,35,35,35,35,35,35,35,35,35,36,36,33,33,33,33,33,33,33,33,34,34,1,1,3,3,30,30,4,28,29,29,25,25,27,27,27,2,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,24,24,7,7,22,22,19,19,20,20,21,21,21,18,18,18,18,8,8,8,8,8,8,23,17,16,15,12,14,13,10,9,11,0];
const ARITY = [1,2,1,3,3,5,3,3,1,5,7,7,7,7,6,10,10,1,8,8,8,8,7,3,8,4,4,7,9,6,6,1,7,3,1,1,1,2,3,3,3,1,1,3,1,3,1,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,1,1,1,1,2,3,1,1,1,1,1,1,1,1,1,1,2,2,1,3,3,1,1,1,1,1,1,1,1,1,1,2];
const GOTO = [{"15":5,"26":2,"31":9,"32":4,"33":7,"34":13},{},{},{"5":17,"6":40,"7":18,"8":24,"9":32,"10":30,"11":33,"12":28,"13":29,"14":31,"15":27,"16":26,"17":34,"18":23,"19":20,"21":22,"22":19,"23":25},{},{},{},{},{},{},{},{},{},{},{"33":69,"34":13},{},{},{},{},{},{"21":71},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"5":78,"6":40,"7":18,"8":24,"9":32,"10":30,"11":33,"12":28,"13":29,"14":31,"15":27,"16":26,"17":34,"18":23,"19":20,"21":22,"22":19,"23":25,"24":77},{"30":79},{"32":81,"33":7,"34":13},{"1":82,"3":84},{"1":90,"3":88,"35":87,"36":91},{},{"3":99,"35":98,"36":91},{"33":100,"34":13},{"30":101},{},{},{"8":104},{},{},{"19":107,"20":106,"21":109},{"19":107,"20":110,"21":109},{},{},{},{},{},{},{},{},{},{"4":114},{},{},{},{"4":114},{"3":99,"35":125,"36":91},{},{},{"21":127},{"8":128},{"21":129},{"8":130},{"23":131},{},{},{"4":114},{},{},{"3":99,"35":134,"36":91},{},{},{},{},{"21":71},{},{},{},{},{"5":137,"6":40,"7":18,"8":24,"9":32,"10":30,"11":33,"12":28,"13":29,"14":31,"15":27,"16":26,"17":34,"18":23,"19":20,"21":22,"22":19,"23":25},{"28":138},{},{},{"28":142},{"28":143},{"28":144},{"28":145},{},{"28":147},{"28":148},{"1":149,"3":84},{},{},{"30":151},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"5":161,"6":40,"7":18,"8":24,"9":32,"10":30,"11":33,"12":28,"13":29,"14":31,"15":27,"16":26,"17":34,"18":23,"19":20,"21":22,"22":19,"23":25},{},{},{},{},{},{"21":167},{"21":168},{},{},{},{"21":171},{"19":107,"20":172,"21":109},{"21":173},{"19":107,"20":174,"21":109},{},{"2":179,"25":176,"27":178},{},{"3":99,"35":182,"36":91},{},{},{},{},{},{},{"3":99,"35":188,"36":91},{},{},{"2":179,"25":191,"27":178},{},{},{},{},{},{"28":198},{},{},{},{},{"2":201},{"37":203},{},{"19":107,"20":217,"21":109},{"3":99,"35":218,"36":91},{"3":99,"35":219,"36":91},{"3":99,"35":220,"36":91},{"3":99,"35":221,"36":91},{},{"21":223},{"21":224},{},{"3":99,"35":225,"36":91},{},{},{},{},{"28":231,"29":230},{},{"2":179,"27":232},{"2":233},{},{"6":234,"28":235},{},{"5":236,"6":40,"7":18,"8":24,"9":32,"10":30,"11":33,"12":28,"13":29,"14":31,"15":27,"16":26,"17":34,"18":23,"19":20,"21":22,"22":19,"23":25,"28":237},{"5":238,"6":40,"7":18,"8":24,"9":32,"10":30,"11":33,"12":28,"13":29,"14":31,"15":27,"16":26,"17":34,"18":23,"19":20,"21":22,"22":19,"23":25,"28":239},{"5":240,"6":40,"7":18,"8":24,"9":32,"10":30,"11":33,"12":28,"13":29,"14":31,"15":27,"16":26,"17":34,"18":23,"19":20,"21":22,"22":19,"23":25,"28":241},{"5":242,"6":40,"7":18,"8":24,"9":32,"10":30,"11":33,"12":28,"13":29,"14":31,"15":27,"16":26,"17":34,"18":23,"19":20,"21":22,"22":19,"23":25,"28":243},{"22":244,"28":245},{"22":246,"28":247},{"22":248,"28":249},{"22":250,"28":251},{"22":252,"28":253},{"22":254,"28":255},{"5":256,"6":40,"7":18,"8":24,"9":32,"10":30,"11":33,"12":28,"13":29,"14":31,"15":27,"16":26,"17":34,"18":23,"19":20,"21":22,"22":19,"23":25,"28":257},{"5":258,"6":40,"7":18,"8":24,"9":32,"10":30,"11":33,"12":28,"13":29,"14":31,"15":27,"16":26,"17":34,"18":23,"19":20,"21":22,"22":19,"23":25,"28":259},{},{},{},{},{},{},{},{},{},{},{"33":267,"34":13},{"33":268,"34":13},{"3":99,"35":269,"36":91},{"3":99,"35":270,"36":91},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"28":279},{"3":99,"35":280,"36":91},{"3":99,"35":281,"36":91},{},{},{},{},{},{},{},{},{}];
const PARSER_ACTION = [{"1":[1,14],"34":[1,6],"39":[1,3],"42":[1,10],"47":[1,12],"62":[1,11],"66":[1,8],"77":[1,1]},{"44":[1,15]},{"10":[0]},{"0":[1,55],"6":[1,54],"7":[1,53],"18":[1,47],"19":[1,37],"20":[1,21],"21":[1,39],"22":[1,35],"23":[1,36],"24":[1,42],"25":[1,41],"26":[1,51],"27":[1,52],"29":[1,16],"30":[1,56],"31":[1,43],"33":[1,38],"34":[1,6],"35":[1,59],"48":[1,46],"51":[1,58],"57":[1,48],"58":[1,49],"59":[1,50],"66":[1,44],"72":[1,45],"79":[1,57]},{"10":[2,2],"68":[1,60]},{"8":[1,61]},{"2":[2,121],"4":[2,121],"8":[2,121],"10":[2,121],"14":[2,121],"28":[2,121],"36":[2,121],"38":[2,121],"68":[2,121],"69":[2,121]},{"14":[1,62]},{"14":[1,63]},{"10":[2,0]},{"76":[1,64]},{"1":[1,65]},{"1":[1,66]},{"2":[2,31],"14":[2,31],"68":[1,67]},{"1":[1,14],"42":[1,10],"47":[1,12],"62":[1,68],"77":[1,1]},{"12":[1,70]},{"2":[2,124],"4":[2,124],"10":[2,124],"14":[2,124],"28":[2,124],"36":[2,124],"38":[2,124],"68":[2,124],"69":[2,124]},{"10":[2,1]},{"2":[2,77],"4":[2,77],"10":[2,77],"14":[2,77],"28":[2,77],"36":[2,77],"38":[2,77],"68":[2,77],"69":[2,77]},{"2":[2,78],"4":[2,78],"10":[2,78],"14":[2,78],"28":[2,78],"36":[2,78],"38":[2,78],"68":[2,78],"69":[2,78]},{"2":[2,79],"4":[2,79],"6":[1,54],"7":[1,53],"10":[2,79],"14":[2,79],"27":[1,52],"28":[2,79],"36":[2,79],"38":[2,79],"68":[2,79],"69":[2,79]},{"2":[2,80],"4":[2,80],"10":[2,80],"14":[2,80],"28":[2,80],"36":[2,80],"38":[2,80],"68":[2,80],"69":[2,80]},{"2":[2,81],"4":[2,81],"10":[2,81],"14":[2,81],"28":[2,81],"32":[1,72],"36":[2,81],"38":[2,81],"68":[2,81],"69":[2,81]},{"2":[2,82],"4":[2,82],"10":[2,82],"14":[2,82],"28":[2,82],"36":[2,82],"38":[2,82],"68":[2,82],"69":[2,82]},{"2":[2,83],"3":[1,73],"4":[2,83],"5":[1,74],"10":[2,83],"14":[2,83],"28":[2,83],"36":[2,83],"38":[2,83],"68":[2,83],"69":[2,83]},{"2":[2,84],"4":[2,84],"10":[2,84],"14":[2,84],"28":[2,84],"36":[2,84],"38":[2,84],"68":[2,84],"69":[2,84]},{"2":[2,85],"4":[2,85],"10":[2,85],"14":[2,85],"28":[2,85],"36":[2,85],"38":[2,85],"68":[2,85],"69":[2,85]},{"2":[2,86],"4":[2,86],"10":[2,86],"14":[2,86],"28":[2,86],"36":[2,86],"38":[2,86],"68":[2,86],"69":[2,86]},{"2":[2,87],"4":[2,87],"10":[2,87],"14":[2,87],"28":[2,87],"36":[2,87],"38":[2,87],"68":[2,87],"69":[2,87]},{"2":[2,88],"4":[2,88],"10":[2,88],"14":[2,88],"28":[2,88],"36":[2,88],"38":[2,88],"68":[2,88],"69":[2,88]},{"2":[2,89],"4":[2,89],"10":[2,89],"14":[2,89],"28":[2,89],"36":[2,89],"38":[2,89],"68":[2,89],"69":[2,89]},{"2":[2,90],"4":[2,90],"10":[2,90],"14":[2,90],"28":[2,90],"36":[2,90],"38":[2,90],"68":[2,90],"69":[2,90]},{"2":[2,91],"4":[2,91],"10":[2,91],"14":[2,91],"28":[2,91],"36":[2,91],"38":[2,91],"68":[2,91],"69":[2,91]},{"2":[2,92],"4":[2,92],"10":[2,92],"14":[2,92],"28":[2,92],"36":[2,92],"38":[2,92],"68":[2,92],"69":[2,92]},{"2":[2,93],"4":[2,93],"10":[2,93],"14":[2,93],"28":[2,93],"36":[2,93],"38":[2,93],"68":[2,93],"69":[2,93]},{"2":[2,119],"4":[2,119],"10":[2,119],"14":[2,119],"28":[2,119],"36":[2,119],"38":[2,119],"68":[2,119],"69":[2,119]},{"2":[2,127],"4":[2,127],"10":[2,127],"14":[2,127],"28":[2,127],"36":[2,127],"38":[2,127],"68":[2,127],"69":[2,127]},{"2":[2,126],"4":[2,126],"10":[2,126],"14":[2,126],"28":[2,126],"36":[2,126],"38":[2,126],"68":[2,126],"69":[2,126]},{"2":[2,123],"4":[2,123],"10":[2,123],"14":[2,123],"28":[2,123],"36":[2,123],"38":[2,123],"68":[2,123],"69":[2,123]},{"2":[2,125],"4":[2,125],"10":[2,125],"14":[2,125],"28":[2,125],"36":[2,125],"38":[2,125],"68":[2,125],"69":[2,125]},{"2":[2,76],"4":[2,76],"10":[2,76],"14":[2,76],"28":[2,76],"36":[2,76],"38":[2,76],"68":[2,76],"69":[2,76]},{"2":[2,122],"4":[2,122],"10":[2,122],"14":[2,122],"28":[2,122],"36":[2,122],"38":[2,122],"68":[2,122],"69":[2,122]},{"2":[2,120],"4":[2,120],"10":[2,120],"14":[2,120],"28":[2,120],"36":[2,120],"38":[2,120],"68":[2,120],"69":[2,120]},{"2":[2,118],"4":[2,118],"10":[2,118],"14":[2,118],"28":[2,118],"36":[2,118],"38":[2,118],"68":[2,118],"69":[2,118]},{"2":[2,112],"3":[2,112],"4":[2,112],"5":[2,112],"10":[2,112],"14":[2,112],"28":[2,112],"36":[2,112],"38":[2,112],"68":[2,112],"69":[2,112]},{"32":[1,75]},{"32":[1,76]},{"2":[2,115],"3":[2,115],"4":[2,115],"5":[2,115],"10":[2,115],"14":[2,115],"28":[2,115],"36":[2,115],"38":[2,115],"68":[2,115],"69":[2,115]},{"2":[2,108],"4":[2,108],"10":[2,108],"14":[2,108],"28":[2,108],"36":[2,108],"38":[2,108],"68":[2,108],"69":[2,108]},{"2":[2,109],"4":[2,109],"10":[2,109],"14":[2,109],"28":[2,109],"36":[2,109],"38":[2,109],"68":[2,109],"69":[2,109]},{"2":[2,110],"4":[2,110],"10":[2,110],"14":[2,110],"28":[2,110],"36":[2,110],"38":[2,110],"68":[2,110],"69":[2,110]},{"2":[2,111],"4":[2,111],"10":[2,111],"14":[2,111],"28":[2,111],"36":[2,111],"38":[2,111],"68":[2,111],"69":[2,111]},{"2":[2,105],"4":[2,105],"10":[2,105],"14":[2,105],"28":[2,105],"32":[2,105],"36":[2,105],"38":[2,105],"67":[2,105],"68":[2,105],"69":[2,105]},{"2":[2,106],"4":[2,106],"10":[2,106],"14":[2,106],"28":[2,106],"32":[2,106],"36":[2,106],"38":[2,106],"67":[2,106],"68":[2,106],"69":[2,106]},{"2":[2,107],"4":[2,107],"10":[2,107],"14":[2,107],"28":[2,107],"32":[2,107],"36":[2,107],"38":[2,107],"67":[2,107],"68":[2,107],"69":[2,107]},{"2":[2,99],"4":[2,99],"10":[2,99],"14":[2,99],"28":[2,99],"36":[2,99],"38":[2,99],"68":[2,99],"69":[2,99]},{"2":[2,100],"4":[2,100],"10":[2,100],"14":[2,100],"28":[2,100],"36":[2,100],"38":[2,100],"68":[2,100],"69":[2,100]},{"2":[2,97],"4":[2,97],"10":[2,97],"14":[2,97],"28":[2,97],"36":[2,97],"38":[2,97],"68":[2,97],"69":[2,97]},{"2":[2,98],"4":[2,98],"10":[2,98],"14":[2,98],"28":[2,98],"36":[2,98],"38":[2,98],"68":[2,98],"69":[2,98]},{"0":[1,55],"6":[1,54],"7":[1,53],"18":[1,47],"19":[1,37],"20":[1,21],"21":[1,39],"22":[1,35],"23":[1,36],"24":[1,42],"25":[1,41],"26":[1,51],"27":[1,52],"29":[1,16],"30":[1,56],"31":[1,43],"33":[1,38],"34":[1,6],"35":[1,59],"48":[1,46],"51":[1,58],"57":[1,48],"58":[1,49],"59":[1,50],"66":[1,44],"72":[1,45],"79":[1,57]},{"28":[1,80]},{"1":[1,14],"42":[1,10],"47":[1,12],"62":[1,11],"66":[1,8],"77":[1,1]},{"23":[1,85],"65":[1,83]},{"1":[1,89],"23":[1,85],"37":[1,86],"53":[1,95],"65":[1,83],"71":[1,94],"78":[1,93],"80":[1,92]},{"12":[1,96]},{"1":[1,89],"23":[1,85],"37":[1,97],"53":[1,95],"71":[1,94],"78":[1,93],"80":[1,92]},{"1":[1,14],"42":[1,10],"47":[1,12],"62":[1,68],"77":[1,1]},{"28":[1,80]},{"1":[1,102]},{"2":[1,103]},{"18":[1,47],"48":[1,46],"66":[1,44],"72":[1,45]},{"32":[1,105]},{"2":[2,101],"3":[2,101],"4":[2,101],"5":[2,101],"6":[2,101],"7":[2,101],"10":[2,101],"14":[2,101],"27":[2,101],"28":[2,101],"36":[2,101],"38":[2,101],"67":[2,101],"68":[2,101],"69":[2,101]},{"6":[1,54],"7":[1,53],"20":[1,108],"27":[1,52]},{"6":[1,54],"7":[1,53],"20":[1,108],"27":[1,52]},{"2":[2,113],"3":[2,113],"4":[2,113],"5":[2,113],"10":[2,113],"14":[2,113],"28":[2,113],"36":[2,113],"38":[2,113],"68":[2,113],"69":[2,113]},{"2":[2,114],"3":[2,114],"4":[2,114],"5":[2,114],"10":[2,114],"14":[2,114],"28":[2,114],"36":[2,114],"38":[2,114],"68":[2,114],"69":[2,114]},{"4":[1,112],"36":[1,111]},{"4":[2,95],"36":[2,95]},{"10":[2,7],"68":[2,7]},{"12":[1,113]},{"10":[2,3],"68":[1,60]},{"10":[2,4],"68":[2,4]},{"10":[2,34],"68":[2,34]},{"10":[2,35],"28":[1,115],"68":[2,35]},{"2":[2,36],"10":[2,36],"14":[2,36],"28":[2,36],"68":[2,36]},{"40":[1,122],"41":[1,121],"43":[1,116],"46":[1,120],"60":[1,118],"61":[1,117],"75":[1,119]},{"14":[1,123]},{"2":[2,8],"10":[2,35],"14":[2,8],"28":[1,115],"68":[2,35]},{"1":[1,89],"23":[1,85],"37":[1,124],"53":[1,95],"71":[1,94],"78":[1,93],"80":[1,92]},{"10":[2,6],"68":[2,6]},{"2":[2,17],"14":[2,17],"68":[1,126]},{"6":[1,54],"7":[1,53],"27":[1,52]},{"18":[1,47],"48":[1,46],"66":[1,44],"72":[1,45]},{"6":[1,54],"7":[1,53],"27":[1,52]},{"18":[1,47],"48":[1,46],"66":[1,44],"72":[1,45]},{"31":[1,43]},{"40":[1,122],"41":[1,121],"43":[1,116],"46":[1,120],"60":[1,118],"61":[1,117],"75":[1,119]},{"2":[1,132]},{"2":[2,8],"14":[2,8],"28":[1,115]},{"2":[1,133]},{"2":[2,33],"14":[2,33],"68":[2,33]},{"1":[1,89],"23":[1,85],"37":[1,97],"53":[1,95],"71":[1,94],"78":[1,93],"80":[1,92]},{"56":[1,135]},{"3":[1,73],"4":[1,136],"5":[1,74]},{"2":[2,102],"3":[2,102],"4":[2,102],"5":[2,102],"6":[2,102],"7":[2,102],"10":[2,102],"14":[2,102],"27":[2,102],"28":[2,102],"36":[2,102],"38":[2,102],"67":[2,102],"68":[2,102],"69":[2,102]},{"2":[2,116],"3":[2,116],"4":[2,116],"5":[2,116],"10":[2,116],"14":[2,116],"28":[2,116],"36":[2,116],"38":[2,116],"68":[2,116],"69":[2,116]},{"2":[2,103],"3":[2,103],"4":[2,103],"5":[2,103],"6":[1,54],"7":[1,53],"10":[2,103],"14":[2,103],"27":[1,52],"28":[2,103],"36":[2,103],"38":[2,103],"67":[2,103],"68":[2,103],"69":[2,103]},{"2":[2,104],"3":[2,104],"4":[2,104],"5":[2,104],"10":[2,104],"14":[2,104],"28":[2,104],"36":[2,104],"38":[2,104],"67":[2,104],"68":[2,104],"69":[2,104]},{"32":[1,72]},{"2":[2,117],"3":[2,117],"4":[2,117],"5":[2,117],"10":[2,117],"14":[2,117],"28":[2,117],"36":[2,117],"38":[2,117],"68":[2,117],"69":[2,117]},{"2":[2,94],"4":[2,94],"10":[2,94],"14":[2,94],"28":[2,94],"36":[2,94],"38":[2,94],"68":[2,94],"69":[2,94]},{"0":[1,55],"6":[1,54],"7":[1,53],"18":[1,47],"19":[1,37],"20":[1,21],"21":[1,39],"22":[1,35],"23":[1,36],"24":[1,42],"25":[1,41],"26":[1,51],"27":[1,52],"29":[1,16],"30":[1,56],"31":[1,43],"33":[1,38],"34":[1,6],"35":[1,59],"48":[1,46],"51":[1,58],"57":[1,48],"58":[1,49],"59":[1,50],"66":[1,44],"72":[1,45],"79":[1,57]},{"28":[1,140],"50":[1,139]},{"2":[2,37],"10":[2,37],"14":[2,37],"28":[2,37],"68":[2,37]},{"12":[1,141]},{"28":[1,140]},{"28":[1,140]},{"28":[1,140]},{"28":[1,140]},{"67":[1,146]},{"28":[1,140]},{"28":[1,140]},{"23":[1,85],"65":[1,83]},{"40":[1,122],"41":[1,121],"43":[1,116],"46":[1,120],"60":[1,118],"61":[1,117],"75":[1,119]},{"2":[1,150]},{"28":[1,80]},{"4":[1,152]},{"3":[1,73],"4":[1,153],"5":[1,74]},{"4":[1,154]},{"3":[1,73],"4":[1,155],"5":[1,74]},{"2":[2,25],"14":[2,25]},{"2":[2,26],"14":[2,26],"68":[1,156]},{"68":[1,157]},{"2":[1,158]},{"1":[1,159]},{"55":[1,160]},{"4":[2,96],"36":[2,96]},{"2":[2,38],"10":[2,38],"14":[2,38],"68":[2,38]},{"2":[2,39],"10":[2,39],"14":[2,39],"68":[2,39]},{"2":[2,41],"4":[2,41],"6":[2,41],"7":[2,41],"10":[2,41],"14":[2,41],"27":[2,41],"36":[2,41],"38":[2,41],"67":[2,41],"68":[2,41],"69":[2,41]},{"0":[1,55],"6":[1,54],"7":[1,53],"18":[1,47],"19":[1,37],"20":[1,21],"21":[1,39],"22":[1,35],"23":[1,36],"24":[1,42],"25":[1,41],"26":[1,51],"27":[1,52],"29":[1,16],"30":[1,56],"31":[1,43],"33":[1,38],"34":[1,6],"35":[1,59],"48":[1,46],"51":[1,58],"57":[1,48],"58":[1,49],"59":[1,50],"66":[1,44],"72":[1,45],"79":[1,57]},{"67":[1,162]},{"67":[1,163]},{"67":[1,164]},{"67":[1,165]},{"1":[1,166]},{"6":[1,54],"7":[1,53],"27":[1,52]},{"6":[1,54],"7":[1,53],"27":[1,52]},{"10":[2,5],"68":[2,5]},{"52":[1,169],"56":[1,170]},{"2":[2,23],"14":[2,23],"68":[2,23]},{"6":[1,54],"7":[1,53],"27":[1,52]},{"6":[1,54],"7":[1,53],"20":[1,108],"27":[1,52]},{"6":[1,54],"7":[1,53],"27":[1,52]},{"6":[1,54],"7":[1,53],"20":[1,108],"27":[1,52]},{"63":[1,175]},{"28":[1,181],"64":[1,180],"79":[1,177]},{"2":[2,26],"14":[2,26],"68":[1,156]},{"1":[1,89],"23":[1,85],"37":[1,124],"53":[1,95],"71":[1,94],"78":[1,93],"80":[1,92]},{"12":[1,183]},{"2":[2,40],"10":[2,40],"14":[2,40],"28":[2,40],"68":[2,40]},{"1":[1,184]},{"1":[1,185]},{"1":[1,186]},{"1":[1,187]},{"1":[1,89],"23":[1,85],"37":[1,124],"53":[1,95],"71":[1,94],"78":[1,93],"80":[1,92]},{"4":[1,189]},{"4":[1,190]},{"28":[1,181],"64":[1,180]},{"1":[1,192]},{"67":[1,193]},{"67":[1,194]},{"67":[1,195]},{"67":[1,196]},{"28":[1,140],"35":[1,197]},{"2":[2,29],"14":[2,29],"38":[1,199]},{"2":[2,30],"14":[2,30]},{"2":[2,44],"14":[2,44],"38":[2,44],"69":[1,200]},{"2":[2,46],"14":[2,46],"38":[2,46],"69":[2,46]},{"28":[1,181]},{"9":[1,207],"11":[1,205],"13":[1,215],"15":[1,208],"16":[1,206],"17":[1,204],"45":[1,214],"49":[1,211],"54":[1,202],"70":[1,212],"73":[1,210],"74":[1,213],"81":[1,209]},{"2":[1,216]},{"6":[1,54],"7":[1,53],"20":[1,108],"27":[1,52]},{"1":[1,89],"23":[1,85],"37":[1,124],"53":[1,95],"71":[1,94],"78":[1,93],"80":[1,92]},{"1":[1,89],"23":[1,85],"37":[1,124],"53":[1,95],"71":[1,94],"78":[1,93],"80":[1,92]},{"1":[1,89],"23":[1,85],"37":[1,124],"53":[1,95],"71":[1,94],"78":[1,93],"80":[1,92]},{"1":[1,89],"23":[1,85],"37":[1,124],"53":[1,95],"71":[1,94],"78":[1,93],"80":[1,92]},{"2":[1,222]},{"6":[1,54],"7":[1,53],"27":[1,52]},{"6":[1,54],"7":[1,53],"27":[1,52]},{"2":[2,9],"14":[2,9],"38":[1,199]},{"1":[1,89],"23":[1,85],"37":[1,124],"53":[1,95],"71":[1,94],"78":[1,93],"80":[1,92]},{"1":[1,226]},{"1":[1,227]},{"1":[1,228]},{"1":[1,229]},{"28":[1,140]},{"2":[2,27],"14":[2,27]},{"28":[1,181],"64":[1,180]},{"28":[1,181]},{"2":[2,47],"14":[2,47],"38":[2,47],"69":[2,47]},{"28":[1,140],"35":[1,59]},{"2":[2,49],"14":[2,49],"38":[2,49],"69":[2,49]},{"0":[1,55],"6":[1,54],"7":[1,53],"18":[1,47],"19":[1,37],"20":[1,21],"21":[1,39],"22":[1,35],"23":[1,36],"24":[1,42],"25":[1,41],"26":[1,51],"27":[1,52],"28":[1,140],"29":[1,16],"30":[1,56],"31":[1,43],"33":[1,38],"34":[1,6],"35":[1,59],"48":[1,46],"51":[1,58],"57":[1,48],"58":[1,49],"59":[1,50],"66":[1,44],"72":[1,45],"79":[1,57]},{"0":[1,55],"6":[1,54],"7":[1,53],"18":[1,47],"19":[1,37],"20":[1,21],"21":[1,39],"22":[1,35],"23":[1,36],"24":[1,42],"25":[1,41],"26":[1,51],"27":[1,52],"28":[1,140],"29":[1,16],"30":[1,56],"31":[1,43],"33":[1,38],"34":[1,6],"35":[1,59],"48":[1,46],"51":[1,58],"57":[1,48],"58":[1,49],"59":[1,50],"66":[1,44],"72":[1,45],"79":[1,57]},{"0":[1,55],"6":[1,54],"7":[1,53],"18":[1,47],"19":[1,37],"20":[1,21],"21":[1,39],"22":[1,35],"23":[1,36],"24":[1,42],"25":[1,41],"26":[1,51],"27":[1,52],"28":[1,140],"29":[1,16],"30":[1,56],"31":[1,43],"33":[1,38],"34":[1,6],"35":[1,59],"48":[1,46],"51":[1,58],"57":[1,48],"58":[1,49],"59":[1,50],"66":[1,44],"72":[1,45],"79":[1,57]},{"0":[1,55],"6":[1,54],"7":[1,53],"18":[1,47],"19":[1,37],"20":[1,21],"21":[1,39],"22":[1,35],"23":[1,36],"24":[1,42],"25":[1,41],"26":[1,51],"27":[1,52],"28":[1,140],"29":[1,16],"30":[1,56],"31":[1,43],"33":[1,38],"34":[1,6],"35":[1,59],"48":[1,46],"51":[1,58],"57":[1,48],"58":[1,49],"59":[1,50],"66":[1,44],"72":[1,45],"79":[1,57]},{"0":[1,55],"28":[1,140],"30":[1,56]},{"0":[1,55],"28":[1,140],"30":[1,56]},{"0":[1,55],"28":[1,140],"30":[1,56]},{"0":[1,55],"28":[1,140],"30":[1,56]},{"0":[1,55],"28":[1,140],"30":[1,56]},{"0":[1,55],"28":[1,140],"30":[1,56]},{"0":[1,55],"6":[1,54],"7":[1,53],"18":[1,47],"19":[1,37],"20":[1,21],"21":[1,39],"22":[1,35],"23":[1,36],"24":[1,42],"25":[1,41],"26":[1,51],"27":[1,52],"28":[1,140],"29":[1,16],"30":[1,56],"31":[1,43],"33":[1,38],"34":[1,6],"35":[1,59],"48":[1,46],"51":[1,58],"57":[1,48],"58":[1,49],"59":[1,50],"66":[1,44],"72":[1,45],"79":[1,57]},{"0":[1,55],"6":[1,54],"7":[1,53],"18":[1,47],"19":[1,37],"20":[1,21],"21":[1,39],"22":[1,35],"23":[1,36],"24":[1,42],"25":[1,41],"26":[1,51],"27":[1,52],"28":[1,140],"29":[1,16],"30":[1,56],"31":[1,43],"33":[1,38],"34":[1,6],"35":[1,59],"48":[1,46],"51":[1,58],"57":[1,48],"58":[1,49],"59":[1,50],"66":[1,44],"72":[1,45],"79":[1,57]},{"2":[2,32],"14":[2,32],"68":[2,32]},{"2":[2,24],"14":[2,24]},{"2":[1,260]},{"2":[1,261]},{"2":[1,262]},{"2":[1,263]},{"2":[2,14],"14":[2,14]},{"67":[1,264]},{"67":[1,265]},{"2":[1,266]},{"1":[1,14],"42":[1,10],"47":[1,12],"62":[1,68],"77":[1,1]},{"1":[1,14],"42":[1,10],"47":[1,12],"62":[1,68],"77":[1,1]},{"1":[1,89],"23":[1,85],"37":[1,124],"53":[1,95],"71":[1,94],"78":[1,93],"80":[1,92]},{"1":[1,89],"23":[1,85],"37":[1,124],"53":[1,95],"71":[1,94],"78":[1,93],"80":[1,92]},{"4":[1,272],"36":[1,271]},{"4":[2,42],"36":[2,42]},{"2":[2,45],"14":[2,45],"38":[2,45],"69":[1,200]},{"2":[2,48],"14":[2,48],"38":[2,48],"69":[2,48]},{"2":[2,62],"14":[2,62],"38":[2,62],"69":[2,62]},{"2":[2,75],"14":[2,75],"38":[2,75],"69":[2,75]},{"2":[2,51],"14":[2,51],"38":[2,51],"69":[2,51]},{"2":[2,64],"14":[2,64],"38":[2,64],"69":[2,64]},{"2":[2,52],"14":[2,52],"38":[2,52],"69":[2,52]},{"2":[2,65],"14":[2,65],"38":[2,65],"69":[2,65]},{"2":[2,53],"14":[2,53],"38":[2,53],"69":[2,53]},{"2":[2,66],"14":[2,66],"38":[2,66],"69":[2,66]},{"2":[2,54],"14":[2,54],"38":[2,54],"69":[2,54]},{"2":[2,67],"14":[2,67],"38":[2,67],"69":[2,67]},{"2":[2,55],"14":[2,55],"38":[2,55],"69":[2,55]},{"2":[2,68],"14":[2,68],"38":[2,68],"69":[2,68]},{"2":[2,56],"14":[2,56],"38":[2,56],"69":[2,56]},{"2":[2,69],"14":[2,69],"38":[2,69],"69":[2,69]},{"2":[2,57],"14":[2,57],"38":[2,57],"69":[2,57]},{"2":[2,70],"14":[2,70],"38":[2,70],"69":[2,70]},{"2":[2,58],"14":[2,58],"38":[2,58],"69":[2,58]},{"2":[2,71],"14":[2,71],"38":[2,71],"69":[2,71]},{"2":[2,59],"14":[2,59],"38":[2,59],"69":[2,59]},{"2":[2,72],"14":[2,72],"38":[2,72],"69":[2,72]},{"2":[2,60],"14":[2,60],"38":[2,60],"69":[2,60]},{"2":[2,73],"14":[2,73],"38":[2,73],"69":[2,73]},{"2":[2,61],"14":[2,61],"38":[2,61],"69":[2,61]},{"2":[2,74],"14":[2,74],"38":[2,74],"69":[2,74]},{"2":[2,50],"14":[2,50],"38":[2,50],"69":[2,50]},{"2":[2,63],"14":[2,63],"38":[2,63],"69":[2,63]},{"2":[2,13],"14":[2,13]},{"2":[2,10],"14":[2,10]},{"2":[2,11],"14":[2,11]},{"2":[2,12],"14":[2,12]},{"1":[1,273]},{"1":[1,274]},{"2":[2,22],"14":[2,22],"68":[2,22]},{"2":[1,275]},{"2":[1,276]},{"2":[1,277]},{"2":[1,278]},{"2":[2,28],"14":[2,28]},{"28":[1,140]},{"1":[1,89],"23":[1,85],"37":[1,124],"53":[1,95],"71":[1,94],"78":[1,93],"80":[1,92]},{"1":[1,89],"23":[1,85],"37":[1,124],"53":[1,95],"71":[1,94],"78":[1,93],"80":[1,92]},{"2":[2,18],"14":[2,18]},{"2":[2,19],"14":[2,19]},{"2":[2,20],"14":[2,20]},{"2":[2,21],"14":[2,21]},{"4":[2,43],"36":[2,43]},{"2":[1,282]},{"2":[1,283]},{"2":[2,15],"14":[2,15]},{"2":[2,16],"14":[2,16]}];
const SEMANTIC_ACTION = [
((x) => x),
((_, constant) => constant),
((rule) => new Ast.Program([], [], [rule], null)),
((user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })),
((stream, _, action) => new Ast.Statement.Rule(stream, [action])),
((_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])),
((_1, _2, action) => new Ast.Statement.Command(null, [action])),
((rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }),
((get) => Ast.Table.Invocation(get, null)),
((_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((x) => x),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)),
((_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
((_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)),
((_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)),
((monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null, null)),
((monitor, _1, table, _2, _3, _4, pname) => new Ast.Stream.Monitor(table, [pname.name], null)),
((monitor, _1, table, _2, _3, _4, _5, pnames, _6) => new Ast.Stream.Monitor(table, pnames.map((p) => p.name), null)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, filter, null)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, Ast.BooleanExpression.True, null)),
((x) => x),
((_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
(() => Generate.notifyAction()),
((x) => x),
((fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)),
((inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }),
((pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)),
((pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))),
((pname, _1, v) => new Ast.InputParam(pname.value, v)),
((pname) => new Ast.Value.VarRef(pname.value)),
((pname) => [pname]),
((list, _, pname) => list.concat(pname)),
((x) => x),
((f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])),
((x) => x),
((_, f) => new Ast.BooleanExpression.Not(f)),
((f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])),
((pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((_1, values, _2) => new Ast.Value.Array(values)),
((v) => [v]),
((array, _, v) => {
                                   array.push(v);
                                   return array;
                               }),
(() => new Ast.Value.Boolean(true)),
(() => new Ast.Value.Boolean(false)),
((str) => new Ast.Value.String('')),
((str) => new Ast.Value.String(str.value)),
((num, unit) => new Ast.Value.Measure(num.value, unit.value)),
((v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }),
((x) => x),
((tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)),
((num) => new Ast.Value.Number(num.value)),
(() => new Ast.Value.Number(1)),
(() => new Ast.Value.Number(0)),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((loc) => new Ast.Value.Location(new Ast.Location.Absolute(loc.value.latitude, loc.value.longitude, loc.value.display||null))),
((loc) => new Ast.Value.Date(null, '+', null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)),
((abs) => new Ast.Value.Date(parseDate(abs.value), '+', null)),
((date, op, offset) => new Ast.Value.Date(date.value, op, offset)),
((date, op, offset) => new Ast.Value.Date(date.value, op, offset)),
((time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second||0)),
((venum) => new Ast.Value.Enum(venum.value)),
((entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:device', null)),
((entity) => new Ast.Value.Entity(entity.kind + ':' + entity.device)),
((x, _) => x),
];
module.exports = require('./sr_parser')(TERMINAL_IDS, RULE_NON_TERMINALS, ARITY, GOTO, PARSER_ACTION, SEMANTIC_ACTION);
