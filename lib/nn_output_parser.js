// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingEngine
//
// Copyright 2017 Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details
"use strict";

const Ast = require('./ast');
const Generate = require('./generate');

/**
 * Differences with the actual NN Grammar (as written in
 * almond-nnparser/grammar/thingtalk.py):
 *
 * - almond-nnparser's grammar distinguishes $get and $do, while
 *   while this one uses just $call
 *   almond-nnparser can do that because it knows the full list of
 *   gets and dos (and knows that they don't interset), whereas here
 *   we have a single FUNCTION token
 * - almond-nnparser's grammar is typed around parameter types and
 *   constants, this one is not because otherwise it would be too unwieldly
 *   to write
 * - almond-nnparser uses different terminals for <entity>_i because
 *   it autogenerates the grammar; this grammar uses a single terminal
 *   <entity> plus a lexical analysis step because I was too lazy to write
 *   down all cases by hand
 *
 * Missing features, compared with full TT:
 * - single statement
 * - no complex selectors
 * - no remote primitives (yet)
 * - no declarations
 * - no multi-field projection
 * - no alias (in aggregate and as a table/stream operator)
 * - no compute
 *
 * Differences with full TT:
 * - all filter operators are infix
 * - multiple parameter passings are prefixed with on in a join
 * - function names are one token
 * - parameter names are prefixed with param:
 * - enum choices are prefixed with enum:
 * - units are prefixed with unit:
 * - relative locations are prefixed with location:
 *
 * What to keep in mind when writing the grammar:
 * - shifts are cheap, reduces are expensive
 * - adding more symbols to a rule only increases the number of shifts
 * - adding more non-terminals to the grammar increases the number of
 *   reduces
 * - splitting a rule into multiple non-terminals increases the number of
 *   reduces
 * - the breadth of reduces matters too
 * - the overall number of rules affects the breadth of reduces
 */

const identity = (x) => x;

function parseDate(form) {
    if (form instanceof Date)
        return form;
    let now = new Date;
    let year = form.year;
    if (year < 0)
        year = now.getFullYear();
    let month = form.month;
    if (month < 0)
        month = now.getMonth() + 1;
    let day = form.day;
    if (day < 0)
        day = now.getDate();
    let hour = 0, minute = 0, second = 0;
    hour = form.hour;
    if (hour < 0)
        hour = now.getHours();
    minute = form.minute;
    if (minute < 0)
        minute = now.getMinutes();
    second = form.second;
    if (second < 0)
        second = now.getSeconds();

    return new Date(year, month-1, day, hour, minute, second);
}

module.exports = {
    '$program':       [[['$rule',], (rule) => new Ast.Program([], [], [rule], null)],
                       [['$constant_Entity(tt:username)', ':', '$rule'], (user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })]],

    '$rule':          [[['$stream', '=>', '$action'], (stream, _, action) => new Ast.Statement.Rule(stream, [action])],
                       [['now', '=>', '$table', '=>', '$action'], (_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])],
                       [['now', '=>', '$action'], (_1, _2, action) => new Ast.Statement.Command(null, [action])],
                       [['$rule', 'on', '$param_passing'], (rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }]],

    '$table':         [[['$call',], (get) => Ast.Table.Invocation(get, null)],
                       [['(', '$table', ')', 'filter', '$filter'], (_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)],
                       [['aggregate', 'min', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'max', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'sum', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'avg', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'count', 'of', '(', '$table', ')'], (_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)],
                       [['aggregate', 'argmin', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['aggregate', 'argmax', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['$table_join'], identity],
                       [['window', '$constant_Number', ',', '$constant_Number', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)],
                       [['timeseries', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)],
                       [['sequence', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)],
                       [['history', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)]],

    '$table_join':    [[['(', '$table', ')', 'join', '(', '$table', ')'], (_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)],
                       [['$table_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$stream':        [[['timer', 'base', '=', '$constant_Date', ',', 'interval', '=', '$constant_Measure(ms)'], (_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)],
                       [['attimer', 'time', '=', '$constant_Time'], (_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)],
                       [['monitor', '(', '$table', ')'], (monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null, null)],
                       [['monitor', '(', '$table', ')', 'on', 'new', '$out_param'], (monitor, _1, table, _2, _3, _4, pname) => new Ast.Stream.Monitor(table, [pname.name], null)],
                       [['monitor', '(', '$table', ')', 'on', 'new', '[', '$out_param_list', ']'], (monitor, _1, table, _2, _3, _4, _5, pnames, _6) => new Ast.Stream.Monitor(table, pnames.map((p) => p.name), null)],
                       [['edge', '(', '$stream', ')', 'on', '$filter'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeNew(stream, filter)],
                       // edge on true is the equivalent of "only once"
                       [['edge', '(', '$stream', ')', 'on', 'true'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeNew(stream, Ast.BooleanExpression.True)],
                       [['$stream_join'], identity]],

    '$stream_join':   [[['(', '$stream', ')', 'join', '(', '$table', ')'], (_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)],
                       [['$stream_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$action':        [[['notify'], () => Generate.notifyAction()],
                       [['$call'], identity]],

    '$call':           [[['FUNCTION'], (fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)],
                       [['$call', '$const_param'], (inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }]],

    '$param_passing': [[['PARAM_NAME', '=', '$out_param'], (pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)],
                       [['PARAM_NAME', '=', 'event'], (pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))]],

    '$const_param':   [[['PARAM_NAME', '=', '$constant'], (pname, _1, v) => new Ast.InputParam(pname.value, v)]],

    '$out_param':     [[['PARAM_NAME'], (pname) => new Ast.Value.VarRef(pname.value)]],

    '$out_param_list':[[['$out_param'], (pname) => [pname]],
                       [['$out_param_list', ',', '$out_param'], (list, _, pname) => list.concat(pname)]],

    // note that $filter is not recursive!
    // it must be in CNF form
    // also note that and takes priority over or
    // this is the opposite of regular TT (which copies JS in that respect)
    // because most filters are just a list of
    // "condition and this or that and foo or bar"
    // to be read as
    // "condition and (this or that) and (foo or bar)"
    '$filter':        [[['$or_filter'], identity],
                       [['$filter', 'and', '$or_filter'], (f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])]],

    '$or_filter':     [[['$atom_filter'], identity],
                       [['not', '$atom_filter'], (_, f) => new Ast.BooleanExpression.Or(f)],
                       [['$or_filter', 'or', '$atom_filter'], (f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])]],

    '$atom_filter':   [[['PARAM_NAME', '$value_filter'], (pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)]],

    // in almond-nnparser these are strongly typed constants, so only
    // numbers and measures can be compared for order, etc
    // we're a little looser here because otherwise it becomes unwieldly
    '$value_filter':  [[['==', '$constant'], (op, v) => [op, v]],
                       [['>=', '$constant'], (op, v) => [op, v]],
                       [['<=', '$constant'], (op, v) => [op, v]],
                       [['>', '$constant'], (op, v) => [op, v]],
                       [['<', '$constant'], (op, v) => [op, v]],
                       [['=~', '$constant_String'], (op, v) => [op, v]],
                       [['~=', '$constant_String'], (op, v) => [op, v]],
                       [['starts_with', '$constant_String'], (op, v) => [op, v]],
                       [['ends_with',  '$constant_String'], (op, v) => [op, v]],
                       [['prefix_of',  '$constant_String'], (op, v) => [op, v]],
                       [['suffix_of',  '$constant_String'], (op, v) => [op, v]],
                       [['contains',  '$constant'], (op, v) => [op, v]],
                       [['in_array',  '$constant_Array'], (op, v) => [op, v]],

                       [['==', '$out_param'], (op, v) => [op, v]],
                       [['>=', '$out_param'], (op, v) => [op, v]],
                       [['<=', '$out_param'], (op, v) => [op, v]],
                       [['>', '$out_param'], (op, v) => [op, v]],
                       [['<', '$out_param'], (op, v) => [op, v]],
                       [['=~', '$out_param'], (op, v) => [op, v]],
                       [['~=', '$out_param'], (op, v) => [op, v]],
                       [['starts_with', '$out_param'], (op, v) => [op, v]],
                       [['ends_with',  '$out_param'], (op, v) => [op, v]],
                       [['prefix_of',  '$out_param'], (op, v) => [op, v]],
                       [['suffix_of',  '$out_param'], (op, v) => [op, v]],
                       [['contains',  '$out_param'], (op, v) => [op, v]],
                       [['in_array',  '$out_param'], (op, v) => [op, v]]],

    // this non-terminal exists only for convenience
    // the almond nn-parser grammar does not have it
    '$constant':      [[['$constant_Array'], identity],
                       [['$constant_Boolean'], identity],
                       [['$constant_String'], identity],
                       [['$constant_Measure'], identity],
                       [['$constant_Number'], identity],
                       [['$constant_Location'], identity],
                       [['$constant_Date'], identity],
                       [['$constant_Time'], identity],
                       [['$constant_Entity(unknown)'], identity],
                       [['$constant_Entity(tt:username)'], identity],
                       [['$constant_Entity(tt:hashtag)'], identity],
                       [['$constant_Entity(tt:phone_number)'], identity],
                       [['$constant_Entity(tt:email_address)'], identity],
                       [['$constant_Entity(tt:url)'], identity],
                       [['$constant_Entity(tt:device)'], identity],
                       [['$constant_Entity(tt:function)'], identity],
                       [['$constant_Enum'], identity]],

    // we cannot represent an empty array
    // I don't think that's useful anyway
    '$constant_Array': [[['[', '$constant_array_values', ']'], (_1, values, _2) => new Ast.Value.Array(values)]],

    '$constant_array_values': [[['$constant'], (v) => [v]],
                               [['$constant_array_values', ',', '$constant'], (array, _, v) => {
                                   array.push(v);
                                   return array;
                               }]],

    '$constant_Boolean': [[['true'], () => new Ast.Value.Boolean(true)],
                          [['false'], () => new Ast.Value.Boolean(false)]],

    '$constant_String': [[['QUOTED_STRING'], (str) => new Ast.Value.String(str.value)]],

    // play fast and loose with units here, because I don't want to write
    // everything by hand
    // almond-nnparser autogenerates this part
    '$constant_Measure': [[['$constant_Number', 'UNIT'], (num, unit) => new Ast.Value.Measure(num.value, unit.value)],
                          [['$constant_Measure', '$constant_Number', 'UNIT'], (v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }]],
    '$constant_Measure(ms)': [[['$constant_Measure'], identity],
                              [['DURATION'], (tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)]],

    '$constant_Number': [[['NUMBER'], (num) => new Ast.Value.Number(num.value)],
                         [['1'], () => new Ast.Value.Number(1)],
                         [['0'], () => new Ast.Value.Number(0)]],

    '$constant_Location': [[['location:current_location'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:home'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:work'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['LOCATION'], (loc) => new Ast.Value.Location(new Ast.Location.Absolute(loc.value.latitude, loc.value.longitude, loc.value.display||null))]],

    // start_of/end_of with less than 1h are not supported
    // (they don't make sense)
    '$constant_Date': [[['now'], (loc) => new Ast.Value.Date(null, '+', null)],
                       [['start_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)],
                       [['end_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)],
                       [['DATE'], (abs) => new Ast.Value.Date(parseDate(abs.value), '+', null)],
                       [['$constant_Date', '+', '$constant_Measure(ms)'], (date, op, offset) => new Ast.Value.Date(date.value, op, offset)],
                       [['$constant_Date', '-', '$constant_Measure(ms)'], (date, op, offset) => new Ast.Value.Date(date.value, op, offset)]],

    '$constant_Time': [[['TIME'], (time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second)]],

    // almond-nnparser expands this into the various enums in the right
    // place for a parameter (as the meaning of an enum changes according
    // to the parameter anyway)
    '$constant_Enum': [[['ENUM'], (venum) => new Ast.Value.Enum(venum.value)]],

    '$constant_Entity(unknown)': [[['GENERIC_ENTITY'], (entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)]],

    '$constant_Entity(tt:username)': [[['USERNAME'], (entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)]],

    '$constant_Entity(tt:hashtag)': [[['HASHTAG'], (entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)]],

    '$constant_Entity(tt:url)': [[['URL'], (entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)]],

    '$constant_Entity(tt:phone_number)': [[['PHONE_NUMBER'], (entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)]],

    '$constant_Entity(tt:email_address)': [[['EMAIL_ADDRESS'], (entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)]],

    '$constant_Entity(tt:device)': [[['DEVICE'], (entity) => new Ast.Value.Entity(entity.value, 'tt:device', null)]],

    '$constant_Entity(tt:function)': [[['FUNCTION'], (entity) => new Ast.Value.Entity(entity.kind + ':' + entity.device)]]
};

const TERMINAL_IDS = {"0":5,"1":6,"(":0,")":1,"+":2,",":3,"-":4,":":7,"<":8,"<<EOF>>":9,"<=":10,"=":11,"==":12,"=>":13,"=~":14,">":15,">=":16,"DATE":17,"DEVICE":18,"DURATION":19,"EMAIL_ADDRESS":20,"ENUM":21,"FUNCTION":22,"GENERIC_ENTITY":23,"HASHTAG":24,"LOCATION":25,"NUMBER":26,"PARAM_NAME":27,"PHONE_NUMBER":28,"QUOTED_STRING":29,"TIME":30,"UNIT":31,"URL":32,"USERNAME":33,"[":34,"]":35,"aggregate":36,"and":37,"argmax":38,"argmin":39,"attimer":40,"avg":41,"base":42,"contains":43,"count":44,"edge":45,"end_of":46,"ends_with":47,"event":48,"false":49,"filter":50,"history":51,"in_array":52,"interval":53,"join":54,"location:current_location":55,"location:home":56,"location:work":57,"max":58,"min":59,"monitor":60,"new":61,"not":62,"notify":63,"now":64,"of":65,"on":66,"or":67,"prefix_of":68,"sequence":69,"start_of":70,"starts_with":71,"suffix_of":72,"sum":73,"time":74,"timer":75,"timeseries":76,"true":77,"window":78,"~=":79};
const RULE_NON_TERMINALS = [30,30,31,31,31,31,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,32,32,32,32,32,32,32,32,33,33,1,1,3,3,29,29,4,27,28,28,25,25,26,26,26,2,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,24,24,7,7,22,19,19,20,20,21,21,21,18,18,18,18,8,8,8,8,8,8,23,17,16,15,12,14,13,10,9,11,0];
const ARITY = [1,3,3,5,3,3,1,5,7,7,7,7,6,10,10,1,8,8,8,8,7,3,8,4,4,7,9,6,6,1,7,3,1,1,1,2,3,3,3,1,1,3,1,3,1,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,1,1,1,2,3,1,1,1,1,1,1,1,1,1,1,2,2,1,3,3,1,1,1,1,1,1,1,1,1,1,2];
const GOTO = [{"15":3,"30":2,"31":7,"32":5,"33":11},{},{},{},{},{},{},{},{},{},{},{},{"32":23,"33":11},{},{"31":25,"32":5,"33":11},{"1":26,"3":28},{"1":34,"3":32,"34":31,"35":35},{"29":40},{},{"3":45,"34":44,"35":35},{"32":46,"33":11},{"29":47},{},{},{"23":50},{},{},{},{"4":52},{},{},{},{"4":52},{"3":45,"34":63,"35":35},{},{},{"21":65},{"8":69},{"21":74},{"8":75},{},{},{"8":77},{},{},{"4":52},{},{},{"3":45,"34":80,"35":35},{},{},{},{},{},{"27":83},{"27":85},{"27":86},{"27":87},{},{"27":89},{"27":90},{"1":91,"3":28},{},{},{"29":93},{},{},{},{},{},{},{},{},{},{},{},{"27":102},{},{},{},{},{},{"5":110,"6":132,"7":111,"8":116,"9":124,"10":122,"11":125,"12":120,"13":121,"14":123,"15":119,"16":118,"17":126,"18":115,"19":113,"21":114,"22":112,"23":117},{},{},{},{},{},{},{"21":148},{"21":149},{},{},{},{"21":152},{"19":154,"20":153,"21":156},{"19":154,"20":157,"21":156},{"19":154,"20":158,"21":156},{},{},{"21":159},{"19":154,"20":160,"21":156},{},{},{},{},{"2":166,"25":163,"26":165},{},{"3":45,"34":169,"35":35},{},{},{},{},{"21":170},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"5":173,"6":132,"7":111,"8":116,"9":124,"10":122,"11":125,"12":120,"13":121,"14":123,"15":119,"16":118,"17":126,"18":115,"19":113,"21":114,"22":112,"23":117,"24":172},{},{},{},{},{"3":45,"34":178,"35":35},{},{},{"2":166,"25":181,"26":165},{},{},{},{"21":170},{},{},{},{},{},{},{},{"27":189},{},{},{},{},{"2":192},{"36":194},{},{},{},{},{},{"3":45,"34":211,"35":35},{"3":45,"34":212,"35":35},{"3":45,"34":213,"35":35},{"3":45,"34":214,"35":35},{},{"21":216},{"21":217},{},{"3":45,"34":218,"35":35},{},{},{},{},{"19":154,"20":223,"21":156},{"27":225,"28":224},{},{"2":166,"26":226},{"2":227},{},{"6":228,"27":229},{},{"5":230,"6":132,"7":111,"8":116,"9":124,"10":122,"11":125,"12":120,"13":121,"14":123,"15":119,"16":118,"17":126,"18":115,"19":113,"21":114,"22":112,"23":117,"27":231},{"5":232,"6":132,"7":111,"8":116,"9":124,"10":122,"11":125,"12":120,"13":121,"14":123,"15":119,"16":118,"17":126,"18":115,"19":113,"21":114,"22":112,"23":117,"27":233},{"5":234,"6":132,"7":111,"8":116,"9":124,"10":122,"11":125,"12":120,"13":121,"14":123,"15":119,"16":118,"17":126,"18":115,"19":113,"21":114,"22":112,"23":117,"27":235},{"5":236,"6":132,"7":111,"8":116,"9":124,"10":122,"11":125,"12":120,"13":121,"14":123,"15":119,"16":118,"17":126,"18":115,"19":113,"21":114,"22":112,"23":117,"27":237},{"22":238,"27":239},{"22":240,"27":241},{"22":242,"27":243},{"22":244,"27":245},{"22":246,"27":247},{"22":248,"27":249},{"5":250,"6":132,"7":111,"8":116,"9":124,"10":122,"11":125,"12":120,"13":121,"14":123,"15":119,"16":118,"17":126,"18":115,"19":113,"21":114,"22":112,"23":117,"27":251},{"5":252,"6":132,"7":111,"8":116,"9":124,"10":122,"11":125,"12":120,"13":121,"14":123,"15":119,"16":118,"17":126,"18":115,"19":113,"21":114,"22":112,"23":117,"27":253},{},{},{},{"5":254,"6":132,"7":111,"8":116,"9":124,"10":122,"11":125,"12":120,"13":121,"14":123,"15":119,"16":118,"17":126,"18":115,"19":113,"21":114,"22":112,"23":117},{},{},{},{},{},{},{},{},{"32":262,"33":11},{"32":263,"33":11},{"3":45,"34":264,"35":35},{"3":45,"34":265,"35":35},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"27":274},{"3":45,"34":275,"35":35},{"3":45,"34":276,"35":35},{},{},{},{},{},{},{},{},{}];
const PARSER_ACTION = [{"0":[1,12],"33":[1,4],"40":[1,1],"45":[1,10],"60":[1,9],"64":[1,6],"75":[1,8]},{"74":[1,13]},{"9":[0]},{"7":[1,14]},{"1":[2,117],"3":[2,117],"7":[2,117],"9":[2,117],"13":[2,117],"27":[2,117],"35":[2,117],"37":[2,117],"66":[2,117],"67":[2,117]},{"13":[1,15]},{"13":[1,16]},{"9":[2,0],"66":[1,17]},{"42":[1,18]},{"0":[1,19]},{"0":[1,20]},{"1":[2,29],"13":[2,29],"66":[1,21]},{"0":[1,12],"40":[1,1],"45":[1,10],"60":[1,22],"75":[1,8]},{"11":[1,24]},{"0":[1,12],"40":[1,1],"45":[1,10],"60":[1,9],"64":[1,6],"75":[1,8]},{"22":[1,29],"63":[1,27]},{"0":[1,33],"22":[1,29],"36":[1,30],"51":[1,39],"63":[1,27],"69":[1,38],"76":[1,37],"78":[1,36]},{"27":[1,41]},{"11":[1,42]},{"0":[1,33],"22":[1,29],"36":[1,43],"51":[1,39],"69":[1,38],"76":[1,37],"78":[1,36]},{"0":[1,12],"40":[1,1],"45":[1,10],"60":[1,22],"75":[1,8]},{"27":[1,41]},{"0":[1,48]},{"1":[1,49]},{"30":[1,51]},{"9":[2,1],"66":[1,17]},{"9":[2,2],"66":[2,2]},{"9":[2,32],"66":[2,32]},{"9":[2,33],"27":[1,53],"66":[2,33]},{"1":[2,34],"9":[2,34],"13":[2,34],"27":[2,34],"66":[2,34]},{"38":[1,60],"39":[1,59],"41":[1,54],"44":[1,58],"58":[1,56],"59":[1,55],"73":[1,57]},{"13":[1,61]},{"1":[2,6],"9":[2,33],"13":[2,6],"27":[1,53],"66":[2,33]},{"0":[1,33],"22":[1,29],"36":[1,62],"51":[1,39],"69":[1,38],"76":[1,37],"78":[1,36]},{"9":[2,4],"66":[2,4]},{"1":[2,15],"13":[2,15],"66":[1,64]},{"5":[1,68],"6":[1,67],"26":[1,66]},{"17":[1,73],"46":[1,72],"64":[1,70],"70":[1,71]},{"5":[1,68],"6":[1,67],"26":[1,66]},{"17":[1,73],"46":[1,72],"64":[1,70],"70":[1,71]},{"9":[2,5],"66":[2,5]},{"11":[1,76]},{"17":[1,73],"46":[1,72],"64":[1,70],"70":[1,71]},{"38":[1,60],"39":[1,59],"41":[1,54],"44":[1,58],"58":[1,56],"59":[1,55],"73":[1,57]},{"1":[1,78]},{"1":[2,6],"13":[2,6],"27":[1,53]},{"1":[1,79]},{"1":[2,31],"13":[2,31],"66":[2,31]},{"0":[1,33],"22":[1,29],"36":[1,43],"51":[1,39],"69":[1,38],"76":[1,37],"78":[1,36]},{"54":[1,81]},{"1":[2,23],"13":[2,23]},{"1":[2,114],"3":[2,114],"9":[2,114],"13":[2,114],"27":[2,114],"35":[2,114],"37":[2,114],"66":[2,114],"67":[2,114]},{"1":[2,35],"9":[2,35],"13":[2,35],"27":[2,35],"66":[2,35]},{"11":[1,82]},{"27":[1,84]},{"27":[1,84]},{"27":[1,84]},{"27":[1,84]},{"65":[1,88]},{"27":[1,84]},{"27":[1,84]},{"22":[1,29],"63":[1,27]},{"38":[1,60],"39":[1,59],"41":[1,54],"44":[1,58],"58":[1,56],"59":[1,55],"73":[1,57]},{"1":[1,92]},{"27":[1,41]},{"3":[1,94]},{"1":[2,101],"3":[2,101],"9":[2,101],"13":[2,101],"27":[2,101],"31":[2,101],"35":[2,101],"37":[2,101],"65":[2,101],"66":[2,101],"67":[2,101]},{"1":[2,102],"3":[2,102],"9":[2,102],"13":[2,102],"27":[2,102],"31":[2,102],"35":[2,102],"37":[2,102],"65":[2,102],"66":[2,102],"67":[2,102]},{"1":[2,103],"3":[2,103],"9":[2,103],"13":[2,103],"27":[2,103],"31":[2,103],"35":[2,103],"37":[2,103],"65":[2,103],"66":[2,103],"67":[2,103]},{"2":[1,96],"3":[1,95],"4":[1,97]},{"1":[2,108],"2":[2,108],"3":[2,108],"4":[2,108],"9":[2,108],"13":[2,108],"27":[2,108],"35":[2,108],"37":[2,108],"66":[2,108],"67":[2,108]},{"31":[1,98]},{"31":[1,99]},{"1":[2,111],"2":[2,111],"3":[2,111],"4":[2,111],"9":[2,111],"13":[2,111],"27":[2,111],"35":[2,111],"37":[2,111],"66":[2,111],"67":[2,111]},{"3":[1,100]},{"2":[1,96],"3":[1,101],"4":[1,97]},{"27":[1,84],"48":[1,103]},{"2":[1,96],"3":[1,104],"4":[1,97]},{"1":[2,24],"13":[2,24],"66":[1,105]},{"66":[1,106]},{"1":[1,107]},{"0":[1,108]},{"5":[1,68],"6":[1,67],"17":[1,73],"18":[1,129],"20":[1,131],"21":[1,127],"22":[1,128],"23":[1,134],"24":[1,133],"25":[1,138],"26":[1,66],"28":[1,109],"29":[1,139],"30":[1,51],"32":[1,130],"33":[1,4],"34":[1,142],"46":[1,72],"49":[1,141],"55":[1,135],"56":[1,136],"57":[1,137],"64":[1,70],"70":[1,71],"77":[1,140]},{"65":[1,143]},{"1":[2,39],"3":[2,39],"5":[2,39],"6":[2,39],"9":[2,39],"13":[2,39],"26":[2,39],"35":[2,39],"37":[2,39],"65":[2,39],"66":[2,39],"67":[2,39]},{"65":[1,144]},{"65":[1,145]},{"65":[1,146]},{"0":[1,147]},{"5":[1,68],"6":[1,67],"26":[1,66]},{"5":[1,68],"6":[1,67],"26":[1,66]},{"9":[2,3],"66":[2,3]},{"50":[1,150],"54":[1,151]},{"1":[2,21],"13":[2,21],"66":[2,21]},{"5":[1,68],"6":[1,67],"26":[1,66]},{"5":[1,68],"6":[1,67],"19":[1,155],"26":[1,66]},{"5":[1,68],"6":[1,67],"19":[1,155],"26":[1,66]},{"5":[1,68],"6":[1,67],"19":[1,155],"26":[1,66]},{"1":[2,109],"2":[2,109],"3":[2,109],"4":[2,109],"9":[2,109],"13":[2,109],"27":[2,109],"35":[2,109],"37":[2,109],"66":[2,109],"67":[2,109]},{"1":[2,110],"2":[2,110],"3":[2,110],"4":[2,110],"9":[2,110],"13":[2,110],"27":[2,110],"35":[2,110],"37":[2,110],"66":[2,110],"67":[2,110]},{"5":[1,68],"6":[1,67],"26":[1,66]},{"5":[1,68],"6":[1,67],"19":[1,155],"26":[1,66]},{"1":[2,36],"9":[2,36],"13":[2,36],"66":[2,36]},{"1":[2,37],"9":[2,37],"13":[2,37],"66":[2,37]},{"53":[1,161]},{"61":[1,162]},{"27":[1,168],"62":[1,167],"77":[1,164]},{"1":[2,24],"13":[2,24],"66":[1,105]},{"0":[1,33],"22":[1,29],"36":[1,62],"51":[1,39],"69":[1,38],"76":[1,37],"78":[1,36]},{"1":[2,120],"3":[2,120],"9":[2,120],"13":[2,120],"27":[2,120],"35":[2,120],"37":[2,120],"66":[2,120],"67":[2,120]},{"1":[2,38],"9":[2,38],"13":[2,38],"27":[2,38],"66":[2,38]},{"1":[2,75],"3":[2,75],"9":[2,75],"13":[2,75],"27":[2,75],"35":[2,75],"37":[2,75],"66":[2,75],"67":[2,75]},{"1":[2,76],"3":[2,76],"9":[2,76],"13":[2,76],"27":[2,76],"35":[2,76],"37":[2,76],"66":[2,76],"67":[2,76]},{"1":[2,77],"3":[2,77],"5":[1,68],"6":[1,67],"9":[2,77],"13":[2,77],"26":[1,66],"27":[2,77],"35":[2,77],"37":[2,77],"66":[2,77],"67":[2,77]},{"1":[2,78],"3":[2,78],"9":[2,78],"13":[2,78],"27":[2,78],"31":[1,171],"35":[2,78],"37":[2,78],"66":[2,78],"67":[2,78]},{"1":[2,79],"3":[2,79],"9":[2,79],"13":[2,79],"27":[2,79],"35":[2,79],"37":[2,79],"66":[2,79],"67":[2,79]},{"1":[2,80],"2":[1,96],"3":[2,80],"4":[1,97],"9":[2,80],"13":[2,80],"27":[2,80],"35":[2,80],"37":[2,80],"66":[2,80],"67":[2,80]},{"1":[2,81],"3":[2,81],"9":[2,81],"13":[2,81],"27":[2,81],"35":[2,81],"37":[2,81],"66":[2,81],"67":[2,81]},{"1":[2,82],"3":[2,82],"9":[2,82],"13":[2,82],"27":[2,82],"35":[2,82],"37":[2,82],"66":[2,82],"67":[2,82]},{"1":[2,83],"3":[2,83],"9":[2,83],"13":[2,83],"27":[2,83],"35":[2,83],"37":[2,83],"66":[2,83],"67":[2,83]},{"1":[2,84],"3":[2,84],"9":[2,84],"13":[2,84],"27":[2,84],"35":[2,84],"37":[2,84],"66":[2,84],"67":[2,84]},{"1":[2,85],"3":[2,85],"9":[2,85],"13":[2,85],"27":[2,85],"35":[2,85],"37":[2,85],"66":[2,85],"67":[2,85]},{"1":[2,86],"3":[2,86],"9":[2,86],"13":[2,86],"27":[2,86],"35":[2,86],"37":[2,86],"66":[2,86],"67":[2,86]},{"1":[2,87],"3":[2,87],"9":[2,87],"13":[2,87],"27":[2,87],"35":[2,87],"37":[2,87],"66":[2,87],"67":[2,87]},{"1":[2,88],"3":[2,88],"9":[2,88],"13":[2,88],"27":[2,88],"35":[2,88],"37":[2,88],"66":[2,88],"67":[2,88]},{"1":[2,89],"3":[2,89],"9":[2,89],"13":[2,89],"27":[2,89],"35":[2,89],"37":[2,89],"66":[2,89],"67":[2,89]},{"1":[2,90],"3":[2,90],"9":[2,90],"13":[2,90],"27":[2,90],"35":[2,90],"37":[2,90],"66":[2,90],"67":[2,90]},{"1":[2,115],"3":[2,115],"9":[2,115],"13":[2,115],"27":[2,115],"35":[2,115],"37":[2,115],"66":[2,115],"67":[2,115]},{"1":[2,123],"3":[2,123],"9":[2,123],"13":[2,123],"27":[2,123],"35":[2,123],"37":[2,123],"66":[2,123],"67":[2,123]},{"1":[2,122],"3":[2,122],"9":[2,122],"13":[2,122],"27":[2,122],"35":[2,122],"37":[2,122],"66":[2,122],"67":[2,122]},{"1":[2,119],"3":[2,119],"9":[2,119],"13":[2,119],"27":[2,119],"35":[2,119],"37":[2,119],"66":[2,119],"67":[2,119]},{"1":[2,121],"3":[2,121],"9":[2,121],"13":[2,121],"27":[2,121],"35":[2,121],"37":[2,121],"66":[2,121],"67":[2,121]},{"1":[2,74],"3":[2,74],"9":[2,74],"13":[2,74],"27":[2,74],"35":[2,74],"37":[2,74],"66":[2,74],"67":[2,74]},{"1":[2,118],"3":[2,118],"9":[2,118],"13":[2,118],"27":[2,118],"35":[2,118],"37":[2,118],"66":[2,118],"67":[2,118]},{"1":[2,116],"3":[2,116],"9":[2,116],"13":[2,116],"27":[2,116],"35":[2,116],"37":[2,116],"66":[2,116],"67":[2,116]},{"1":[2,104],"3":[2,104],"9":[2,104],"13":[2,104],"27":[2,104],"35":[2,104],"37":[2,104],"66":[2,104],"67":[2,104]},{"1":[2,105],"3":[2,105],"9":[2,105],"13":[2,105],"27":[2,105],"35":[2,105],"37":[2,105],"66":[2,105],"67":[2,105]},{"1":[2,106],"3":[2,106],"9":[2,106],"13":[2,106],"27":[2,106],"35":[2,106],"37":[2,106],"66":[2,106],"67":[2,106]},{"1":[2,107],"3":[2,107],"9":[2,107],"13":[2,107],"27":[2,107],"35":[2,107],"37":[2,107],"66":[2,107],"67":[2,107]},{"1":[2,96],"3":[2,96],"9":[2,96],"13":[2,96],"27":[2,96],"35":[2,96],"37":[2,96],"66":[2,96],"67":[2,96]},{"1":[2,94],"3":[2,94],"9":[2,94],"13":[2,94],"27":[2,94],"35":[2,94],"37":[2,94],"66":[2,94],"67":[2,94]},{"1":[2,95],"3":[2,95],"9":[2,95],"13":[2,95],"27":[2,95],"35":[2,95],"37":[2,95],"66":[2,95],"67":[2,95]},{"5":[1,68],"6":[1,67],"17":[1,73],"18":[1,129],"20":[1,131],"21":[1,127],"22":[1,128],"23":[1,134],"24":[1,133],"25":[1,138],"26":[1,66],"28":[1,109],"29":[1,139],"30":[1,51],"32":[1,130],"33":[1,4],"34":[1,142],"46":[1,72],"49":[1,141],"55":[1,135],"56":[1,136],"57":[1,137],"64":[1,70],"70":[1,71],"77":[1,140]},{"0":[1,174]},{"0":[1,175]},{"0":[1,176]},{"0":[1,177]},{"0":[1,33],"22":[1,29],"36":[1,62],"51":[1,39],"69":[1,38],"76":[1,37],"78":[1,36]},{"3":[1,179]},{"3":[1,180]},{"27":[1,168],"62":[1,167]},{"0":[1,182]},{"65":[1,183]},{"65":[1,184]},{"1":[2,99],"2":[2,99],"3":[2,99],"4":[2,99],"5":[1,68],"6":[1,67],"9":[2,99],"13":[2,99],"26":[1,66],"27":[2,99],"35":[2,99],"37":[2,99],"65":[2,99],"66":[2,99],"67":[2,99]},{"1":[2,100],"2":[2,100],"3":[2,100],"4":[2,100],"9":[2,100],"13":[2,100],"27":[2,100],"35":[2,100],"37":[2,100],"65":[2,100],"66":[2,100],"67":[2,100]},{"31":[1,171]},{"1":[2,112],"2":[2,112],"3":[2,112],"4":[2,112],"9":[2,112],"13":[2,112],"27":[2,112],"35":[2,112],"37":[2,112],"66":[2,112],"67":[2,112]},{"1":[2,113],"2":[2,113],"3":[2,113],"4":[2,113],"9":[2,113],"13":[2,113],"27":[2,113],"35":[2,113],"37":[2,113],"66":[2,113],"67":[2,113]},{"65":[1,185]},{"65":[1,186]},{"11":[1,187]},{"27":[1,84],"34":[1,188]},{"1":[2,27],"13":[2,27],"37":[1,190]},{"1":[2,28],"13":[2,28]},{"1":[2,42],"13":[2,42],"37":[2,42],"67":[1,191]},{"1":[2,44],"13":[2,44],"37":[2,44],"67":[2,44]},{"27":[1,168]},{"8":[1,198],"10":[1,196],"12":[1,206],"14":[1,199],"15":[1,197],"16":[1,195],"43":[1,205],"47":[1,202],"52":[1,193],"68":[1,203],"71":[1,201],"72":[1,204],"79":[1,200]},{"1":[1,207]},{"31":[1,208]},{"1":[2,97],"2":[2,97],"3":[2,97],"4":[2,97],"5":[2,97],"6":[2,97],"9":[2,97],"13":[2,97],"26":[2,97],"27":[2,97],"35":[2,97],"37":[2,97],"65":[2,97],"66":[2,97],"67":[2,97]},{"3":[1,210],"35":[1,209]},{"3":[2,92],"35":[2,92]},{"0":[1,33],"22":[1,29],"36":[1,62],"51":[1,39],"69":[1,38],"76":[1,37],"78":[1,36]},{"0":[1,33],"22":[1,29],"36":[1,62],"51":[1,39],"69":[1,38],"76":[1,37],"78":[1,36]},{"0":[1,33],"22":[1,29],"36":[1,62],"51":[1,39],"69":[1,38],"76":[1,37],"78":[1,36]},{"0":[1,33],"22":[1,29],"36":[1,62],"51":[1,39],"69":[1,38],"76":[1,37],"78":[1,36]},{"1":[1,215]},{"5":[1,68],"6":[1,67],"26":[1,66]},{"5":[1,68],"6":[1,67],"26":[1,66]},{"1":[2,7],"13":[2,7],"37":[1,190]},{"0":[1,33],"22":[1,29],"36":[1,62],"51":[1,39],"69":[1,38],"76":[1,37],"78":[1,36]},{"0":[1,219]},{"0":[1,220]},{"0":[1,221]},{"0":[1,222]},{"5":[1,68],"6":[1,67],"19":[1,155],"26":[1,66]},{"27":[1,84]},{"1":[2,25],"13":[2,25]},{"27":[1,168],"62":[1,167]},{"27":[1,168]},{"1":[2,45],"13":[2,45],"37":[2,45],"67":[2,45]},{"27":[1,84],"34":[1,142]},{"1":[2,47],"13":[2,47],"37":[2,47],"67":[2,47]},{"5":[1,68],"6":[1,67],"17":[1,73],"18":[1,129],"20":[1,131],"21":[1,127],"22":[1,128],"23":[1,134],"24":[1,133],"25":[1,138],"26":[1,66],"27":[1,84],"28":[1,109],"29":[1,139],"30":[1,51],"32":[1,130],"33":[1,4],"34":[1,142],"46":[1,72],"49":[1,141],"55":[1,135],"56":[1,136],"57":[1,137],"64":[1,70],"70":[1,71],"77":[1,140]},{"5":[1,68],"6":[1,67],"17":[1,73],"18":[1,129],"20":[1,131],"21":[1,127],"22":[1,128],"23":[1,134],"24":[1,133],"25":[1,138],"26":[1,66],"27":[1,84],"28":[1,109],"29":[1,139],"30":[1,51],"32":[1,130],"33":[1,4],"34":[1,142],"46":[1,72],"49":[1,141],"55":[1,135],"56":[1,136],"57":[1,137],"64":[1,70],"70":[1,71],"77":[1,140]},{"5":[1,68],"6":[1,67],"17":[1,73],"18":[1,129],"20":[1,131],"21":[1,127],"22":[1,128],"23":[1,134],"24":[1,133],"25":[1,138],"26":[1,66],"27":[1,84],"28":[1,109],"29":[1,139],"30":[1,51],"32":[1,130],"33":[1,4],"34":[1,142],"46":[1,72],"49":[1,141],"55":[1,135],"56":[1,136],"57":[1,137],"64":[1,70],"70":[1,71],"77":[1,140]},{"5":[1,68],"6":[1,67],"17":[1,73],"18":[1,129],"20":[1,131],"21":[1,127],"22":[1,128],"23":[1,134],"24":[1,133],"25":[1,138],"26":[1,66],"27":[1,84],"28":[1,109],"29":[1,139],"30":[1,51],"32":[1,130],"33":[1,4],"34":[1,142],"46":[1,72],"49":[1,141],"55":[1,135],"56":[1,136],"57":[1,137],"64":[1,70],"70":[1,71],"77":[1,140]},{"27":[1,84],"29":[1,139]},{"27":[1,84],"29":[1,139]},{"27":[1,84],"29":[1,139]},{"27":[1,84],"29":[1,139]},{"27":[1,84],"29":[1,139]},{"27":[1,84],"29":[1,139]},{"5":[1,68],"6":[1,67],"17":[1,73],"18":[1,129],"20":[1,131],"21":[1,127],"22":[1,128],"23":[1,134],"24":[1,133],"25":[1,138],"26":[1,66],"27":[1,84],"28":[1,109],"29":[1,139],"30":[1,51],"32":[1,130],"33":[1,4],"34":[1,142],"46":[1,72],"49":[1,141],"55":[1,135],"56":[1,136],"57":[1,137],"64":[1,70],"70":[1,71],"77":[1,140]},{"5":[1,68],"6":[1,67],"17":[1,73],"18":[1,129],"20":[1,131],"21":[1,127],"22":[1,128],"23":[1,134],"24":[1,133],"25":[1,138],"26":[1,66],"27":[1,84],"28":[1,109],"29":[1,139],"30":[1,51],"32":[1,130],"33":[1,4],"34":[1,142],"46":[1,72],"49":[1,141],"55":[1,135],"56":[1,136],"57":[1,137],"64":[1,70],"70":[1,71],"77":[1,140]},{"1":[2,30],"13":[2,30],"66":[2,30]},{"1":[2,98],"2":[2,98],"3":[2,98],"4":[2,98],"5":[2,98],"6":[2,98],"9":[2,98],"13":[2,98],"26":[2,98],"27":[2,98],"35":[2,98],"37":[2,98],"65":[2,98],"66":[2,98],"67":[2,98]},{"1":[2,91],"3":[2,91],"9":[2,91],"13":[2,91],"27":[2,91],"35":[2,91],"37":[2,91],"66":[2,91],"67":[2,91]},{"5":[1,68],"6":[1,67],"17":[1,73],"18":[1,129],"20":[1,131],"21":[1,127],"22":[1,128],"23":[1,134],"24":[1,133],"25":[1,138],"26":[1,66],"28":[1,109],"29":[1,139],"30":[1,51],"32":[1,130],"33":[1,4],"34":[1,142],"46":[1,72],"49":[1,141],"55":[1,135],"56":[1,136],"57":[1,137],"64":[1,70],"70":[1,71],"77":[1,140]},{"1":[1,255]},{"1":[1,256]},{"1":[1,257]},{"1":[1,258]},{"1":[2,12],"13":[2,12]},{"65":[1,259]},{"65":[1,260]},{"1":[1,261]},{"0":[1,12],"40":[1,1],"45":[1,10],"60":[1,22],"75":[1,8]},{"0":[1,12],"40":[1,1],"45":[1,10],"60":[1,22],"75":[1,8]},{"0":[1,33],"22":[1,29],"36":[1,62],"51":[1,39],"69":[1,38],"76":[1,37],"78":[1,36]},{"0":[1,33],"22":[1,29],"36":[1,62],"51":[1,39],"69":[1,38],"76":[1,37],"78":[1,36]},{"1":[2,22],"13":[2,22]},{"3":[1,267],"35":[1,266]},{"3":[2,40],"35":[2,40]},{"1":[2,43],"13":[2,43],"37":[2,43],"67":[1,191]},{"1":[2,46],"13":[2,46],"37":[2,46],"67":[2,46]},{"1":[2,60],"13":[2,60],"37":[2,60],"67":[2,60]},{"1":[2,73],"13":[2,73],"37":[2,73],"67":[2,73]},{"1":[2,49],"13":[2,49],"37":[2,49],"67":[2,49]},{"1":[2,62],"13":[2,62],"37":[2,62],"67":[2,62]},{"1":[2,50],"13":[2,50],"37":[2,50],"67":[2,50]},{"1":[2,63],"13":[2,63],"37":[2,63],"67":[2,63]},{"1":[2,51],"13":[2,51],"37":[2,51],"67":[2,51]},{"1":[2,64],"13":[2,64],"37":[2,64],"67":[2,64]},{"1":[2,52],"13":[2,52],"37":[2,52],"67":[2,52]},{"1":[2,65],"13":[2,65],"37":[2,65],"67":[2,65]},{"1":[2,53],"13":[2,53],"37":[2,53],"67":[2,53]},{"1":[2,66],"13":[2,66],"37":[2,66],"67":[2,66]},{"1":[2,54],"13":[2,54],"37":[2,54],"67":[2,54]},{"1":[2,67],"13":[2,67],"37":[2,67],"67":[2,67]},{"1":[2,55],"13":[2,55],"37":[2,55],"67":[2,55]},{"1":[2,68],"13":[2,68],"37":[2,68],"67":[2,68]},{"1":[2,56],"13":[2,56],"37":[2,56],"67":[2,56]},{"1":[2,69],"13":[2,69],"37":[2,69],"67":[2,69]},{"1":[2,57],"13":[2,57],"37":[2,57],"67":[2,57]},{"1":[2,70],"13":[2,70],"37":[2,70],"67":[2,70]},{"1":[2,58],"13":[2,58],"37":[2,58],"67":[2,58]},{"1":[2,71],"13":[2,71],"37":[2,71],"67":[2,71]},{"1":[2,59],"13":[2,59],"37":[2,59],"67":[2,59]},{"1":[2,72],"13":[2,72],"37":[2,72],"67":[2,72]},{"1":[2,48],"13":[2,48],"37":[2,48],"67":[2,48]},{"1":[2,61],"13":[2,61],"37":[2,61],"67":[2,61]},{"3":[2,93],"35":[2,93]},{"1":[2,11],"13":[2,11]},{"1":[2,8],"13":[2,8]},{"1":[2,9],"13":[2,9]},{"1":[2,10],"13":[2,10]},{"0":[1,268]},{"0":[1,269]},{"1":[2,20],"13":[2,20],"66":[2,20]},{"1":[1,270]},{"1":[1,271]},{"1":[1,272]},{"1":[1,273]},{"1":[2,26],"13":[2,26]},{"27":[1,84]},{"0":[1,33],"22":[1,29],"36":[1,62],"51":[1,39],"69":[1,38],"76":[1,37],"78":[1,36]},{"0":[1,33],"22":[1,29],"36":[1,62],"51":[1,39],"69":[1,38],"76":[1,37],"78":[1,36]},{"1":[2,16],"13":[2,16]},{"1":[2,17],"13":[2,17]},{"1":[2,18],"13":[2,18]},{"1":[2,19],"13":[2,19]},{"3":[2,41],"35":[2,41]},{"1":[1,277]},{"1":[1,278]},{"1":[2,13],"13":[2,13]},{"1":[2,14],"13":[2,14]}];
const SEMANTIC_ACTION = [
((rule) => new Ast.Program([], [], [rule], null)),
((user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })),
((stream, _, action) => new Ast.Statement.Rule(stream, [action])),
((_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])),
((_1, _2, action) => new Ast.Statement.Command(null, [action])),
((rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }),
((get) => Ast.Table.Invocation(get, null)),
((_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((x) => x),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)),
((_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
((_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)),
((_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)),
((monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null, null)),
((monitor, _1, table, _2, _3, _4, pname) => new Ast.Stream.Monitor(table, [pname.name], null)),
((monitor, _1, table, _2, _3, _4, _5, pnames, _6) => new Ast.Stream.Monitor(table, pnames.map((p) => p.name), null)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeNew(stream, filter)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeNew(stream, Ast.BooleanExpression.True)),
((x) => x),
((_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
(() => Generate.notifyAction()),
((x) => x),
((fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)),
((inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }),
((pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)),
((pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))),
((pname, _1, v) => new Ast.InputParam(pname.value, v)),
((pname) => new Ast.Value.VarRef(pname.value)),
((pname) => [pname]),
((list, _, pname) => list.concat(pname)),
((x) => x),
((f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])),
((x) => x),
((_, f) => new Ast.BooleanExpression.Or(f)),
((f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])),
((pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((_1, values, _2) => new Ast.Value.Array(values)),
((v) => [v]),
((array, _, v) => {
                                   array.push(v);
                                   return array;
                               }),
(() => new Ast.Value.Boolean(true)),
(() => new Ast.Value.Boolean(false)),
((str) => new Ast.Value.String(str.value)),
((num, unit) => new Ast.Value.Measure(num.value, unit.value)),
((v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }),
((x) => x),
((tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)),
((num) => new Ast.Value.Number(num.value)),
(() => new Ast.Value.Number(1)),
(() => new Ast.Value.Number(0)),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((loc) => new Ast.Value.Location(new Ast.Location.Absolute(loc.value.latitude, loc.value.longitude, loc.value.display||null))),
((loc) => new Ast.Value.Date(null, '+', null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)),
((abs) => new Ast.Value.Date(parseDate(abs.value), '+', null)),
((date, op, offset) => new Ast.Value.Date(date.value, op, offset)),
((date, op, offset) => new Ast.Value.Date(date.value, op, offset)),
((time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second)),
((venum) => new Ast.Value.Enum(venum.value)),
((entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:device', null)),
((entity) => new Ast.Value.Entity(entity.kind + ':' + entity.device)),
((x, _) => x),
];
module.exports = require('./sr_parser')(TERMINAL_IDS, RULE_NON_TERMINALS, ARITY, GOTO, PARSER_ACTION, SEMANTIC_ACTION);
