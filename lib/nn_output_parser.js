// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingEngine
//
// Copyright 2017 The Board of Trustees of the Leland Stanford Junior University
//
// Author: Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details
"use strict";

const Ast = require('./ast');
const Generate = require('./generate');

/**
 * Differences with the actual NN Grammar (as written in
 * almond-nnparser/grammar/thingtalk.py):
 *
 * - almond-nnparser's grammar distinguishes $get and $do, while
 *   while this one uses just $call
 *   almond-nnparser can do that because it knows the full list of
 *   gets and dos (and knows that they don't interset), whereas here
 *   we have a single FUNCTION token
 * - almond-nnparser's grammar is typed around parameter types and
 *   constants, this one is not because otherwise it would be too unwieldly
 *   to write
 * - almond-nnparser uses different terminals for <entity>_i because
 *   it autogenerates the grammar; this grammar uses a single terminal
 *   <entity> plus a lexical analysis step because I was too lazy to write
 *   down all cases by hand
 *
 * Missing features, compared with full TT:
 * - single statement
 * - no complex selectors
 * - no remote primitives (yet)
 * - no declarations
 * - no multi-field projection
 * - no alias (in aggregate and as a table/stream operator)
 * - no compute
 *
 * Differences with full TT:
 * - all filter operators are infix
 * - multiple parameter passings are prefixed with on in a join
 * - function names are one token
 * - parameter names are prefixed with param:
 * - enum choices are prefixed with enum:
 * - units are prefixed with unit:
 * - relative locations are prefixed with location:
 *
 * What to keep in mind when writing the grammar:
 * - shifts are cheap, reduces are expensive
 * - adding more symbols to a rule only increases the number of shifts
 * - adding more non-terminals to the grammar increases the number of
 *   reduces
 * - splitting a rule into multiple non-terminals increases the number of
 *   reduces
 * - the breadth of reduces matters too
 * - the overall number of rules affects the breadth of reduces
 */

const identity = (x) => x;

function parseDate(form) {
    if (form instanceof Date)
        return form;
    let now = new Date;
    let year = form.year;
    if (year < 0)
        year = now.getFullYear();
    let month = form.month;
    if (month < 0)
        month = now.getMonth() + 1;
    let day = form.day;
    if (day < 0)
        day = now.getDate();
    let hour = 0, minute = 0, second = 0;
    hour = form.hour;
    if (hour < 0)
        hour = now.getHours();
    minute = form.minute;
    if (minute < 0)
        minute = now.getMinutes();
    second = form.second;
    if (second < 0)
        second = now.getSeconds();

    return new Date(year, month-1, day, hour, minute, second);
}

module.exports = {
    '$input':         [[['$program',], identity],
                       [['answer', '$constant'], (_, constant) => constant],
                       [['filter', '$filter'], (_, filter) => filter]],

    '$program':       [[['$rule',], (rule) => new Ast.Program([], [], [rule], null)],
                       [['$constant_Entity(tt:username)', ':', '$rule'], (user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })]],

    '$rule':          [[['$stream', '=>', '$action'], (stream, _, action) => new Ast.Statement.Rule(stream, [action])],
                       [['now', '=>', '$table', '=>', '$action'], (_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])],
                       [['now', '=>', '$action'], (_1, _2, action) => new Ast.Statement.Command(null, [action])],
                       [['$rule', 'on', '$param_passing'], (rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }]],

    '$table':         [[['$call',], (get) => Ast.Table.Invocation(get, null)],
                       [['(', '$table', ')', 'filter', '$filter'], (_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)],
                       [['aggregate', 'min', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'max', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'sum', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'avg', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'count', 'of', '(', '$table', ')'], (_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)],
                       [['aggregate', 'argmin', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['aggregate', 'argmax', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['$table_join'], identity],
                       [['window', '$constant_Number', ',', '$constant_Number', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)],
                       [['timeseries', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)],
                       [['sequence', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)],
                       [['history', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)]],

    '$table_join':    [[['(', '$table', ')', 'join', '(', '$table', ')'], (_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)],
                       [['$table_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$stream':        [[['timer', 'base', '=', '$constant_Date', ',', 'interval', '=', '$constant_Measure(ms)'], (_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)],
                       [['attimer', 'time', '=', '$constant_Time'], (_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)],
                       [['monitor', '(', '$table', ')'], (monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null, null)],
                       [['monitor', '(', '$table', ')', 'on', 'new', '$out_param'], (monitor, _1, table, _2, _3, _4, pname) => new Ast.Stream.Monitor(table, [pname.name], null)],
                       [['monitor', '(', '$table', ')', 'on', 'new', '[', '$out_param_list', ']'], (monitor, _1, table, _2, _3, _4, _5, pnames, _6) => new Ast.Stream.Monitor(table, pnames.map((p) => p.name), null)],
                       [['edge', '(', '$stream', ')', 'on', '$filter'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, filter, null)],
                       // edge on true is the equivalent of "only once"
                       [['edge', '(', '$stream', ')', 'on', 'true'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, Ast.BooleanExpression.True, null)],
                       [['$stream_join'], identity]],

    '$stream_join':   [[['(', '$stream', ')', 'join', '(', '$table', ')'], (_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)],
                       [['$stream_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$action':        [[['notify'], () => Generate.notifyAction()],
                       [['$call'], identity]],

    '$call':           [[['FUNCTION'], (fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)],
                       [['$call', '$const_param'], (inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }]],

    '$param_passing': [[['PARAM_NAME', '=', '$out_param'], (pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)],
                       [['PARAM_NAME', '=', 'event'], (pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))]],

    '$const_param':   [[['PARAM_NAME', '=', '$constant'], (pname, _1, v) => new Ast.InputParam(pname.value, v)]],

    '$out_param':     [[['PARAM_NAME'], (pname) => new Ast.Value.VarRef(pname.value)]],

    '$out_param_list':[[['$out_param'], (pname) => [pname]],
                       [['$out_param_list', ',', '$out_param'], (list, _, pname) => list.concat(pname)]],

    // note that $filter is not recursive!
    // it must be in CNF form
    // also note that and takes priority over or
    // this is the opposite of regular TT (which copies JS in that respect)
    // because most filters are just a list of
    // "condition and this or that and foo or bar"
    // to be read as
    // "condition and (this or that) and (foo or bar)"
    '$filter':        [[['$or_filter'], identity],
                       [['$filter', 'and', '$or_filter'], (f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])]],

    '$or_filter':     [[['$atom_filter'], identity],
                       [['not', '$atom_filter'], (_, f) => new Ast.BooleanExpression.Not(f)],
                       [['$or_filter', 'or', '$atom_filter'], (f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])]],

    '$atom_filter':   [[['PARAM_NAME', '$value_filter'], (pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)]],

    // in almond-nnparser these are strongly typed constants, so only
    // numbers and measures can be compared for order, etc
    // we're a little looser here because otherwise it becomes unwieldly
    '$value_filter':  [[['==', '$constant'], (op, v) => [op, v]],
                       [['>=', '$constant'], (op, v) => [op, v]],
                       [['<=', '$constant'], (op, v) => [op, v]],
                       [['>', '$constant'], (op, v) => [op, v]],
                       [['<', '$constant'], (op, v) => [op, v]],
                       [['=~', '$constant'], (op, v) => [op, v]],
                       [['~=', '$constant'], (op, v) => [op, v]],
                       [['starts_with', '$constant'], (op, v) => [op, v]],
                       [['ends_with',  '$constant'], (op, v) => [op, v]],
                       [['prefix_of',  '$constant'], (op, v) => [op, v]],
                       [['suffix_of',  '$constant'], (op, v) => [op, v]],
                       [['contains',  '$constant'], (op, v) => [op, v]],
                       [['in_array',  '$constant_Array'], (op, v) => [op, v]],

                       [['==', '$out_param'], (op, v) => [op, v]],
                       [['>=', '$out_param'], (op, v) => [op, v]],
                       [['<=', '$out_param'], (op, v) => [op, v]],
                       [['>', '$out_param'], (op, v) => [op, v]],
                       [['<', '$out_param'], (op, v) => [op, v]],
                       [['=~', '$out_param'], (op, v) => [op, v]],
                       [['~=', '$out_param'], (op, v) => [op, v]],
                       [['starts_with', '$out_param'], (op, v) => [op, v]],
                       [['ends_with',  '$out_param'], (op, v) => [op, v]],
                       [['prefix_of',  '$out_param'], (op, v) => [op, v]],
                       [['suffix_of',  '$out_param'], (op, v) => [op, v]],
                       [['contains',  '$out_param'], (op, v) => [op, v]],
                       [['in_array',  '$out_param'], (op, v) => [op, v]]],

    // this non-terminal exists only for convenience
    // the almond nn-parser grammar does not have it
    '$constant':      [[['$constant_Array'], identity],
                       [['$constant_Boolean'], identity],
                       [['$constant_String'], identity],
                       [['$constant_Measure'], identity],
                       [['DURATION'], (tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)],
                       [['$constant_Number'], identity],
                       [['$constant_Currency'], identity],
                       [['$constant_Location'], identity],
                       [['$constant_Date'], identity],
                       [['$constant_Time'], identity],
                       [['$constant_Entity(unknown)'], identity],
                       [['$constant_Entity(tt:username)'], identity],
                       [['$constant_Entity(tt:hashtag)'], identity],
                       [['$constant_Entity(tt:phone_number)'], identity],
                       [['$constant_Entity(tt:email_address)'], identity],
                       [['$constant_Entity(tt:path_name)'], identity],
                       [['$constant_Entity(tt:url)'], identity],
                       [['$constant_Entity(tt:device)'], identity],
                       [['$constant_Entity(tt:function)'], identity],
                       [['$constant_Entity(tt:picture)'], identity],
                       [['$constant_Enum'], identity],
                       [['SLOT'], (slot) => slot.value === undefined ? Ast.Value.Undefined(true) : slot.value]],

    // we cannot represent an empty array
    // I don't think that's useful anyway
    '$constant_Array': [[['[', '$constant_array_values', ']'], (_1, values, _2) => new Ast.Value.Array(values)]],

    '$constant_array_values': [[['$constant'], (v) => [v]],
                               [['$constant_array_values', ',', '$constant'], (array, _, v) => {
                                   array.push(v);
                                   return array;
                               }]],

    '$constant_Boolean': [[['true'], () => new Ast.Value.Boolean(true)],
                          [['false'], () => new Ast.Value.Boolean(false)]],

    '$constant_String': [[['""'], (str) => new Ast.Value.String('')],
                         [['QUOTED_STRING'], (str) => new Ast.Value.String(str.value)]],

    // play fast and loose with units here, because I don't want to write
    // everything by hand
    // almond-nnparser autogenerates this part
    '$constant_Measure': [[['$constant_Number', 'UNIT'], (num, unit) => new Ast.Value.Measure(num.value, unit.value)],
                          [['$constant_Measure', '$constant_Number', 'UNIT'], (v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }]],
    '$constant_Measure(ms)': [[['$constant_Measure'], identity],
                              [['DURATION'], (tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)]],

    '$constant_Number': [[['NUMBER'], (num) => new Ast.Value.Number(num.value)],
                         [['1'], () => new Ast.Value.Number(1)],
                         [['0'], () => new Ast.Value.Number(0)]],

    '$constant_Currency': [[['CURRENCY'], (tok) => new Ast.Value.Currency(tok.value.value, tok.value.unit)]],

    '$constant_Location': [[['location:current_location'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:home'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:work'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['LOCATION'], (loc) => new Ast.Value.Location(new Ast.Location.Absolute(loc.value.latitude, loc.value.longitude, loc.value.display||null))]],

    // start_of/end_of with less than 1h are not supported
    // (they don't make sense)
    '$constant_Date': [[['now'], (loc) => new Ast.Value.Date(null, '+', null)],
                       [['start_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)],
                       [['end_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)],
                       [['DATE'], (abs) => new Ast.Value.Date(parseDate(abs.value), '+', null)],
                       [['$constant_Date', '+', '$constant_Measure(ms)'], (date, op, offset) => new Ast.Value.Date(date.value, op, offset)],
                       [['$constant_Date', '-', '$constant_Measure(ms)'], (date, op, offset) => new Ast.Value.Date(date.value, op, offset)]],

    '$constant_Time': [[['TIME'], (time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second||0)]],

    // almond-nnparser expands this into the various enums in the right
    // place for a parameter (as the meaning of an enum changes according
    // to the parameter anyway)
    '$constant_Enum': [[['ENUM'], (venum) => new Ast.Value.Enum(venum.value)]],

    '$constant_Entity(unknown)': [[['GENERIC_ENTITY'], (entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)]],

    '$constant_Entity(tt:username)': [[['USERNAME'], (entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)]],

    '$constant_Entity(tt:hashtag)': [[['HASHTAG'], (entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)]],

    '$constant_Entity(tt:url)': [[['URL'], (entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)]],

    '$constant_Entity(tt:phone_number)': [[['PHONE_NUMBER'], (entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)]],

    '$constant_Entity(tt:email_address)': [[['EMAIL_ADDRESS'], (entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)]],

    '$constant_Entity(tt:path_name)': [[['PATH_NAME'], (entity) => new Ast.Value.Entity(entity.value, 'tt:path_name', null)]],

    '$constant_Entity(tt:device)': [[['DEVICE'], (entity) => new Ast.Value.Entity(entity.value, 'tt:device', null)]],

    '$constant_Entity(tt:function)': [[['FUNCTION'], (entity) => new Ast.Value.Entity(entity.kind + ':' + entity.device, 'tt:function', null)]],

    '$constant_Entity(tt:picture)': [[['PICTURE'], (entity) => new Ast.Value.Entity(entity.value, 'tt:picture', null)]],
};

const TERMINAL_IDS = {"0":6,"1":7,"\"\"":0,"(":1,")":2,"+":3,",":4,"-":5,":":8,"<":9,"<<EOF>>":10,"<=":11,"=":12,"==":13,"=>":14,"=~":15,">":16,">=":17,"CURRENCY":18,"DATE":19,"DEVICE":20,"DURATION":21,"EMAIL_ADDRESS":22,"ENUM":23,"FUNCTION":24,"GENERIC_ENTITY":25,"HASHTAG":26,"LOCATION":27,"NUMBER":28,"PARAM_NAME":29,"PATH_NAME":30,"PHONE_NUMBER":31,"PICTURE":32,"QUOTED_STRING":33,"SLOT":34,"TIME":35,"UNIT":36,"URL":37,"USERNAME":38,"[":39,"]":40,"aggregate":41,"and":42,"answer":43,"argmax":44,"argmin":45,"attimer":46,"avg":47,"base":48,"contains":49,"count":50,"edge":51,"end_of":52,"ends_with":53,"event":54,"false":55,"filter":56,"history":57,"in_array":58,"interval":59,"join":60,"location:current_location":61,"location:home":62,"location:work":63,"max":64,"min":65,"monitor":66,"new":67,"not":68,"notify":69,"now":70,"of":71,"on":72,"or":73,"prefix_of":74,"sequence":75,"start_of":76,"starts_with":77,"suffix_of":78,"sum":79,"time":80,"timer":81,"timeseries":82,"true":83,"window":84,"~=":85};
const RULE_NON_TERMINALS = [29,29,29,34,34,35,35,35,35,38,38,38,38,38,38,38,38,38,38,38,38,38,38,39,39,36,36,36,36,36,36,36,36,37,37,1,1,3,3,33,33,4,31,32,32,28,28,30,30,30,2,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,27,27,7,7,25,25,22,22,23,23,24,24,24,8,21,21,21,21,9,9,9,9,9,9,26,20,19,18,13,17,15,11,14,10,12,16,0];
const ARITY = [1,2,2,1,3,3,5,3,3,1,5,7,7,7,7,6,10,10,1,8,8,8,8,7,3,8,4,4,7,9,6,6,1,7,3,1,1,1,2,3,3,3,1,1,3,1,3,1,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,1,1,1,1,2,3,1,1,1,1,1,1,1,1,1,1,1,2,2,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,2];
const GOTO = [{"18":5,"29":2,"34":9,"35":1,"36":7,"37":14},{},{},{"5":18,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27},{"2":70,"28":68,"30":69},{},{},{},{},{},{},{},{},{},{},{"36":82,"37":14},{"33":83},{},{},{},{},{"24":85},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"5":92,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27,"27":91},{},{},{},{"2":95},{"40":97},{"35":110,"36":7,"37":14},{"1":111,"3":113},{"1":119,"3":117,"38":116,"39":120},{},{},{"3":129,"38":128,"39":120},{"36":130,"37":14},{"33":131},{},{},{},{},{},{},{"22":137,"23":136,"24":139},{"22":137,"23":140,"24":139},{},{},{},{},{"2":70,"30":143},{"2":144},{},{"6":145,"31":146},{},{"5":148,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27,"31":149},{"5":150,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27,"31":151},{"5":152,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27,"31":153},{"5":154,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27,"31":155},{"5":156,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27,"31":157},{"5":158,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27,"31":159},{"5":160,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27,"31":161},{"5":162,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27,"31":163},{"5":164,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27,"31":165},{"5":166,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27,"31":167},{"5":168,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27,"31":169},{"5":170,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27,"31":171},{},{},{},{"4":172},{},{},{},{"4":172},{"3":129,"38":183,"39":120},{},{},{"24":185},{"9":186},{"24":187},{"9":188},{"9":189},{"26":190},{},{},{"4":172},{},{},{"3":129,"38":193,"39":120},{},{"31":195},{},{},{"24":85},{},{},{},{},{"5":197,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"31":199},{"31":200},{"31":201},{"31":202},{},{"31":204},{"31":205},{"1":206,"3":113},{},{},{"33":208},{},{},{},{},{},{},{},{},{},{},{},{},{},{"5":218,"6":45,"7":19,"8":24,"9":26,"10":35,"11":32,"12":36,"13":30,"14":33,"15":31,"16":37,"17":34,"18":29,"19":28,"20":38,"21":25,"22":21,"24":23,"25":20,"26":27},{},{},{},{},{},{"24":224},{"24":225},{},{},{},{"24":228},{"22":137,"23":229,"24":139},{"24":230},{"22":137,"23":231,"24":139},{},{},{"2":70,"28":234,"30":69},{},{"3":129,"38":236,"39":120},{},{},{},{},{},{"3":129,"38":241,"39":120},{},{},{"2":70,"28":244,"30":69},{},{},{},{},{},{},{"31":252},{},{},{},{"3":129,"38":254,"39":120},{"3":129,"38":255,"39":120},{"3":129,"38":256,"39":120},{"3":129,"38":257,"39":120},{},{"24":259},{"24":260},{},{"3":129,"38":261,"39":120},{},{},{},{},{"22":137,"23":266,"24":139},{"31":268,"32":267},{},{},{},{},{},{},{},{},{},{},{"36":276,"37":14},{"36":277,"37":14},{"3":129,"38":278,"39":120},{"3":129,"38":279,"39":120},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"31":288},{"3":129,"38":289,"39":120},{"3":129,"38":290,"39":120},{},{},{},{},{},{},{},{},{}];
const PARSER_ACTION = [{"1":[1,15],"38":[1,6],"43":[1,3],"46":[1,11],"51":[1,13],"56":[1,4],"66":[1,12],"70":[1,8],"81":[1,10]},{"10":[2,3],"72":[1,16]},{"10":[0]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"29":[1,72],"68":[1,71]},{"8":[1,73]},{"2":[2,127],"4":[2,127],"8":[2,127],"10":[2,127],"14":[2,127],"29":[2,127],"40":[2,127],"42":[2,127],"72":[2,127],"73":[2,127]},{"14":[1,74]},{"14":[1,75]},{"10":[2,0]},{"48":[1,76]},{"80":[1,77]},{"1":[1,78]},{"1":[1,79]},{"2":[2,32],"14":[2,32],"72":[1,80]},{"1":[1,15],"46":[1,11],"51":[1,13],"66":[1,81],"81":[1,10]},{"29":[1,84]},{"2":[2,132],"4":[2,132],"10":[2,132],"14":[2,132],"29":[2,132],"40":[2,132],"42":[2,132],"72":[2,132],"73":[2,132]},{"10":[2,1]},{"2":[2,78],"4":[2,78],"10":[2,78],"14":[2,78],"29":[2,78],"40":[2,78],"42":[2,78],"72":[2,78],"73":[2,78]},{"2":[2,79],"4":[2,79],"10":[2,79],"14":[2,79],"29":[2,79],"40":[2,79],"42":[2,79],"72":[2,79],"73":[2,79]},{"2":[2,80],"4":[2,80],"6":[1,62],"7":[1,61],"10":[2,80],"14":[2,80],"28":[1,60],"29":[2,80],"40":[2,80],"42":[2,80],"72":[2,80],"73":[2,80]},{"2":[2,81],"4":[2,81],"10":[2,81],"14":[2,81],"29":[2,81],"40":[2,81],"42":[2,81],"72":[2,81],"73":[2,81]},{"2":[2,82],"4":[2,82],"10":[2,82],"14":[2,82],"29":[2,82],"36":[1,86],"40":[2,82],"42":[2,82],"72":[2,82],"73":[2,82]},{"2":[2,83],"4":[2,83],"10":[2,83],"14":[2,83],"29":[2,83],"40":[2,83],"42":[2,83],"72":[2,83],"73":[2,83]},{"2":[2,84],"4":[2,84],"10":[2,84],"14":[2,84],"29":[2,84],"40":[2,84],"42":[2,84],"72":[2,84],"73":[2,84]},{"2":[2,85],"3":[1,87],"4":[2,85],"5":[1,88],"10":[2,85],"14":[2,85],"29":[2,85],"40":[2,85],"42":[2,85],"72":[2,85],"73":[2,85]},{"2":[2,86],"4":[2,86],"10":[2,86],"14":[2,86],"29":[2,86],"40":[2,86],"42":[2,86],"72":[2,86],"73":[2,86]},{"2":[2,87],"4":[2,87],"10":[2,87],"14":[2,87],"29":[2,87],"40":[2,87],"42":[2,87],"72":[2,87],"73":[2,87]},{"2":[2,88],"4":[2,88],"10":[2,88],"14":[2,88],"29":[2,88],"40":[2,88],"42":[2,88],"72":[2,88],"73":[2,88]},{"2":[2,89],"4":[2,89],"10":[2,89],"14":[2,89],"29":[2,89],"40":[2,89],"42":[2,89],"72":[2,89],"73":[2,89]},{"2":[2,90],"4":[2,90],"10":[2,90],"14":[2,90],"29":[2,90],"40":[2,90],"42":[2,90],"72":[2,90],"73":[2,90]},{"2":[2,91],"4":[2,91],"10":[2,91],"14":[2,91],"29":[2,91],"40":[2,91],"42":[2,91],"72":[2,91],"73":[2,91]},{"2":[2,92],"4":[2,92],"10":[2,92],"14":[2,92],"29":[2,92],"40":[2,92],"42":[2,92],"72":[2,92],"73":[2,92]},{"2":[2,93],"4":[2,93],"10":[2,93],"14":[2,93],"29":[2,93],"40":[2,93],"42":[2,93],"72":[2,93],"73":[2,93]},{"2":[2,94],"4":[2,94],"10":[2,94],"14":[2,94],"29":[2,94],"40":[2,94],"42":[2,94],"72":[2,94],"73":[2,94]},{"2":[2,95],"4":[2,95],"10":[2,95],"14":[2,95],"29":[2,95],"40":[2,95],"42":[2,95],"72":[2,95],"73":[2,95]},{"2":[2,96],"4":[2,96],"10":[2,96],"14":[2,96],"29":[2,96],"40":[2,96],"42":[2,96],"72":[2,96],"73":[2,96]},{"2":[2,97],"4":[2,97],"10":[2,97],"14":[2,97],"29":[2,97],"40":[2,97],"42":[2,97],"72":[2,97],"73":[2,97]},{"2":[2,98],"4":[2,98],"10":[2,98],"14":[2,98],"29":[2,98],"40":[2,98],"42":[2,98],"72":[2,98],"73":[2,98]},{"2":[2,125],"4":[2,125],"10":[2,125],"14":[2,125],"29":[2,125],"40":[2,125],"42":[2,125],"72":[2,125],"73":[2,125]},{"2":[2,135],"4":[2,135],"10":[2,135],"14":[2,135],"29":[2,135],"40":[2,135],"42":[2,135],"72":[2,135],"73":[2,135]},{"2":[2,134],"4":[2,134],"10":[2,134],"14":[2,134],"29":[2,134],"40":[2,134],"42":[2,134],"72":[2,134],"73":[2,134]},{"2":[2,133],"4":[2,133],"10":[2,133],"14":[2,133],"29":[2,133],"40":[2,133],"42":[2,133],"72":[2,133],"73":[2,133]},{"2":[2,129],"4":[2,129],"10":[2,129],"14":[2,129],"29":[2,129],"40":[2,129],"42":[2,129],"72":[2,129],"73":[2,129]},{"2":[2,77],"4":[2,77],"10":[2,77],"14":[2,77],"29":[2,77],"40":[2,77],"42":[2,77],"72":[2,77],"73":[2,77]},{"2":[2,131],"4":[2,131],"10":[2,131],"14":[2,131],"29":[2,131],"40":[2,131],"42":[2,131],"72":[2,131],"73":[2,131]},{"2":[2,130],"4":[2,130],"10":[2,130],"14":[2,130],"29":[2,130],"40":[2,130],"42":[2,130],"72":[2,130],"73":[2,130]},{"2":[2,128],"4":[2,128],"10":[2,128],"14":[2,128],"29":[2,128],"40":[2,128],"42":[2,128],"72":[2,128],"73":[2,128]},{"2":[2,126],"4":[2,126],"10":[2,126],"14":[2,126],"29":[2,126],"40":[2,126],"42":[2,126],"72":[2,126],"73":[2,126]},{"2":[2,124],"4":[2,124],"10":[2,124],"14":[2,124],"29":[2,124],"40":[2,124],"42":[2,124],"72":[2,124],"73":[2,124]},{"2":[2,118],"3":[2,118],"4":[2,118],"5":[2,118],"10":[2,118],"14":[2,118],"29":[2,118],"40":[2,118],"42":[2,118],"72":[2,118],"73":[2,118]},{"36":[1,89]},{"36":[1,90]},{"2":[2,121],"3":[2,121],"4":[2,121],"5":[2,121],"10":[2,121],"14":[2,121],"29":[2,121],"40":[2,121],"42":[2,121],"72":[2,121],"73":[2,121]},{"2":[2,114],"4":[2,114],"10":[2,114],"14":[2,114],"29":[2,114],"40":[2,114],"42":[2,114],"72":[2,114],"73":[2,114]},{"2":[2,115],"4":[2,115],"10":[2,115],"14":[2,115],"29":[2,115],"40":[2,115],"42":[2,115],"72":[2,115],"73":[2,115]},{"2":[2,116],"4":[2,116],"10":[2,116],"14":[2,116],"29":[2,116],"40":[2,116],"42":[2,116],"72":[2,116],"73":[2,116]},{"2":[2,117],"4":[2,117],"10":[2,117],"14":[2,117],"29":[2,117],"40":[2,117],"42":[2,117],"72":[2,117],"73":[2,117]},{"2":[2,113],"4":[2,113],"10":[2,113],"14":[2,113],"29":[2,113],"40":[2,113],"42":[2,113],"72":[2,113],"73":[2,113]},{"2":[2,110],"4":[2,110],"10":[2,110],"14":[2,110],"29":[2,110],"36":[2,110],"40":[2,110],"42":[2,110],"71":[2,110],"72":[2,110],"73":[2,110]},{"2":[2,111],"4":[2,111],"10":[2,111],"14":[2,111],"29":[2,111],"36":[2,111],"40":[2,111],"42":[2,111],"71":[2,111],"72":[2,111],"73":[2,111]},{"2":[2,112],"4":[2,112],"10":[2,112],"14":[2,112],"29":[2,112],"36":[2,112],"40":[2,112],"42":[2,112],"71":[2,112],"72":[2,112],"73":[2,112]},{"2":[2,104],"4":[2,104],"10":[2,104],"14":[2,104],"29":[2,104],"40":[2,104],"42":[2,104],"72":[2,104],"73":[2,104]},{"2":[2,105],"4":[2,105],"10":[2,105],"14":[2,105],"29":[2,105],"40":[2,105],"42":[2,105],"72":[2,105],"73":[2,105]},{"2":[2,102],"4":[2,102],"10":[2,102],"14":[2,102],"29":[2,102],"40":[2,102],"42":[2,102],"72":[2,102],"73":[2,102]},{"2":[2,103],"4":[2,103],"10":[2,103],"14":[2,103],"29":[2,103],"40":[2,103],"42":[2,103],"72":[2,103],"73":[2,103]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"10":[2,2],"42":[1,93]},{"2":[2,45],"10":[2,45],"14":[2,45],"42":[2,45],"73":[1,94]},{"2":[2,47],"10":[2,47],"14":[2,47],"42":[2,47],"73":[2,47]},{"29":[1,72]},{"9":[1,101],"11":[1,99],"13":[1,109],"15":[1,102],"16":[1,100],"17":[1,98],"49":[1,108],"53":[1,105],"58":[1,96],"74":[1,106],"77":[1,104],"78":[1,107],"85":[1,103]},{"1":[1,15],"46":[1,11],"51":[1,13],"66":[1,12],"70":[1,8],"81":[1,10]},{"24":[1,114],"69":[1,112]},{"1":[1,118],"24":[1,114],"41":[1,115],"57":[1,124],"69":[1,112],"75":[1,123],"82":[1,122],"84":[1,121]},{"12":[1,125]},{"12":[1,126]},{"1":[1,118],"24":[1,114],"41":[1,127],"57":[1,124],"75":[1,123],"82":[1,122],"84":[1,121]},{"1":[1,15],"46":[1,11],"51":[1,13],"66":[1,81],"81":[1,10]},{"29":[1,84]},{"1":[1,132]},{"2":[1,133]},{"10":[2,8],"72":[2,8]},{"12":[1,134]},{"36":[1,135]},{"2":[2,106],"3":[2,106],"4":[2,106],"5":[2,106],"6":[2,106],"7":[2,106],"10":[2,106],"14":[2,106],"28":[2,106],"29":[2,106],"40":[2,106],"42":[2,106],"71":[2,106],"72":[2,106],"73":[2,106]},{"6":[1,62],"7":[1,61],"21":[1,138],"28":[1,60]},{"6":[1,62],"7":[1,61],"21":[1,138],"28":[1,60]},{"2":[2,119],"3":[2,119],"4":[2,119],"5":[2,119],"10":[2,119],"14":[2,119],"29":[2,119],"40":[2,119],"42":[2,119],"72":[2,119],"73":[2,119]},{"2":[2,120],"3":[2,120],"4":[2,120],"5":[2,120],"10":[2,120],"14":[2,120],"29":[2,120],"40":[2,120],"42":[2,120],"72":[2,120],"73":[2,120]},{"4":[1,142],"40":[1,141]},{"4":[2,100],"40":[2,100]},{"29":[1,72],"68":[1,71]},{"29":[1,72]},{"2":[2,48],"10":[2,48],"14":[2,48],"42":[2,48],"73":[2,48]},{"29":[1,147],"39":[1,67]},{"2":[2,50],"10":[2,50],"14":[2,50],"42":[2,50],"73":[2,50]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"29":[1,147],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"29":[1,147],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"29":[1,147],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"29":[1,147],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"29":[1,147],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"29":[1,147],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"29":[1,147],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"29":[1,147],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"29":[1,147],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"29":[1,147],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"29":[1,147],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"29":[1,147],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"10":[2,4],"72":[1,16]},{"10":[2,5],"72":[2,5]},{"10":[2,35],"72":[2,35]},{"10":[2,36],"29":[1,173],"72":[2,36]},{"2":[2,37],"10":[2,37],"14":[2,37],"29":[2,37],"72":[2,37]},{"44":[1,180],"45":[1,179],"47":[1,174],"50":[1,178],"64":[1,176],"65":[1,175],"79":[1,177]},{"14":[1,181]},{"2":[2,9],"10":[2,36],"14":[2,9],"29":[1,173],"72":[2,36]},{"1":[1,118],"24":[1,114],"41":[1,182],"57":[1,124],"75":[1,123],"82":[1,122],"84":[1,121]},{"10":[2,7],"72":[2,7]},{"2":[2,18],"14":[2,18],"72":[1,184]},{"6":[1,62],"7":[1,61],"28":[1,60]},{"19":[1,54],"52":[1,53],"70":[1,51],"76":[1,52]},{"6":[1,62],"7":[1,61],"28":[1,60]},{"19":[1,54],"52":[1,53],"70":[1,51],"76":[1,52]},{"19":[1,54],"52":[1,53],"70":[1,51],"76":[1,52]},{"35":[1,50]},{"44":[1,180],"45":[1,179],"47":[1,174],"50":[1,178],"64":[1,176],"65":[1,175],"79":[1,177]},{"2":[1,191]},{"2":[2,9],"14":[2,9],"29":[1,173]},{"2":[1,192]},{"2":[2,34],"14":[2,34],"72":[2,34]},{"1":[1,118],"24":[1,114],"41":[1,127],"57":[1,124],"75":[1,123],"82":[1,122],"84":[1,121]},{"60":[1,194]},{"29":[1,147],"54":[1,196]},{"2":[2,107],"3":[2,107],"4":[2,107],"5":[2,107],"6":[2,107],"7":[2,107],"10":[2,107],"14":[2,107],"28":[2,107],"29":[2,107],"40":[2,107],"42":[2,107],"71":[2,107],"72":[2,107],"73":[2,107]},{"2":[2,122],"3":[2,122],"4":[2,122],"5":[2,122],"10":[2,122],"14":[2,122],"29":[2,122],"40":[2,122],"42":[2,122],"72":[2,122],"73":[2,122]},{"2":[2,108],"3":[2,108],"4":[2,108],"5":[2,108],"6":[1,62],"7":[1,61],"10":[2,108],"14":[2,108],"28":[1,60],"29":[2,108],"40":[2,108],"42":[2,108],"71":[2,108],"72":[2,108],"73":[2,108]},{"2":[2,109],"3":[2,109],"4":[2,109],"5":[2,109],"10":[2,109],"14":[2,109],"29":[2,109],"40":[2,109],"42":[2,109],"71":[2,109],"72":[2,109],"73":[2,109]},{"36":[1,86]},{"2":[2,123],"3":[2,123],"4":[2,123],"5":[2,123],"10":[2,123],"14":[2,123],"29":[2,123],"40":[2,123],"42":[2,123],"72":[2,123],"73":[2,123]},{"2":[2,99],"4":[2,99],"10":[2,99],"14":[2,99],"29":[2,99],"40":[2,99],"42":[2,99],"72":[2,99],"73":[2,99]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"2":[2,46],"10":[2,46],"14":[2,46],"42":[2,46],"73":[1,94]},{"2":[2,49],"10":[2,49],"14":[2,49],"42":[2,49],"73":[2,49]},{"2":[2,63],"10":[2,63],"14":[2,63],"42":[2,63],"73":[2,63]},{"2":[2,76],"10":[2,76],"14":[2,76],"42":[2,76],"73":[2,76]},{"2":[2,42],"4":[2,42],"6":[2,42],"7":[2,42],"10":[2,42],"14":[2,42],"28":[2,42],"40":[2,42],"42":[2,42],"71":[2,42],"72":[2,42],"73":[2,42]},{"2":[2,52],"10":[2,52],"14":[2,52],"42":[2,52],"73":[2,52]},{"2":[2,65],"10":[2,65],"14":[2,65],"42":[2,65],"73":[2,65]},{"2":[2,53],"10":[2,53],"14":[2,53],"42":[2,53],"73":[2,53]},{"2":[2,66],"10":[2,66],"14":[2,66],"42":[2,66],"73":[2,66]},{"2":[2,54],"10":[2,54],"14":[2,54],"42":[2,54],"73":[2,54]},{"2":[2,67],"10":[2,67],"14":[2,67],"42":[2,67],"73":[2,67]},{"2":[2,55],"10":[2,55],"14":[2,55],"42":[2,55],"73":[2,55]},{"2":[2,68],"10":[2,68],"14":[2,68],"42":[2,68],"73":[2,68]},{"2":[2,56],"10":[2,56],"14":[2,56],"42":[2,56],"73":[2,56]},{"2":[2,69],"10":[2,69],"14":[2,69],"42":[2,69],"73":[2,69]},{"2":[2,57],"10":[2,57],"14":[2,57],"42":[2,57],"73":[2,57]},{"2":[2,70],"10":[2,70],"14":[2,70],"42":[2,70],"73":[2,70]},{"2":[2,58],"10":[2,58],"14":[2,58],"42":[2,58],"73":[2,58]},{"2":[2,71],"10":[2,71],"14":[2,71],"42":[2,71],"73":[2,71]},{"2":[2,59],"10":[2,59],"14":[2,59],"42":[2,59],"73":[2,59]},{"2":[2,72],"10":[2,72],"14":[2,72],"42":[2,72],"73":[2,72]},{"2":[2,60],"10":[2,60],"14":[2,60],"42":[2,60],"73":[2,60]},{"2":[2,73],"10":[2,73],"14":[2,73],"42":[2,73],"73":[2,73]},{"2":[2,61],"10":[2,61],"14":[2,61],"42":[2,61],"73":[2,61]},{"2":[2,74],"10":[2,74],"14":[2,74],"42":[2,74],"73":[2,74]},{"2":[2,62],"10":[2,62],"14":[2,62],"42":[2,62],"73":[2,62]},{"2":[2,75],"10":[2,75],"14":[2,75],"42":[2,75],"73":[2,75]},{"2":[2,51],"10":[2,51],"14":[2,51],"42":[2,51],"73":[2,51]},{"2":[2,64],"10":[2,64],"14":[2,64],"42":[2,64],"73":[2,64]},{"2":[2,38],"10":[2,38],"14":[2,38],"29":[2,38],"72":[2,38]},{"12":[1,198]},{"29":[1,147]},{"29":[1,147]},{"29":[1,147]},{"29":[1,147]},{"71":[1,203]},{"29":[1,147]},{"29":[1,147]},{"24":[1,114],"69":[1,112]},{"44":[1,180],"45":[1,179],"47":[1,174],"50":[1,178],"64":[1,176],"65":[1,175],"79":[1,177]},{"2":[1,207]},{"29":[1,84]},{"4":[1,209]},{"3":[1,87],"4":[1,210],"5":[1,88]},{"4":[1,211]},{"3":[1,87],"4":[1,212],"5":[1,88]},{"3":[1,87],"4":[1,213],"5":[1,88]},{"2":[2,26],"14":[2,26]},{"2":[2,27],"14":[2,27],"72":[1,214]},{"72":[1,215]},{"2":[1,216]},{"1":[1,217]},{"2":[2,39],"10":[2,39],"14":[2,39],"72":[2,39]},{"2":[2,40],"10":[2,40],"14":[2,40],"72":[2,40]},{"4":[2,101],"40":[2,101]},{"0":[1,63],"6":[1,62],"7":[1,61],"18":[1,59],"19":[1,54],"20":[1,43],"21":[1,22],"22":[1,46],"23":[1,40],"24":[1,42],"25":[1,49],"26":[1,48],"27":[1,58],"28":[1,60],"30":[1,17],"31":[1,47],"32":[1,41],"33":[1,64],"34":[1,39],"35":[1,50],"37":[1,44],"38":[1,6],"39":[1,67],"52":[1,53],"55":[1,66],"61":[1,55],"62":[1,56],"63":[1,57],"70":[1,51],"76":[1,52],"83":[1,65]},{"71":[1,219]},{"71":[1,220]},{"71":[1,221]},{"71":[1,222]},{"1":[1,223]},{"6":[1,62],"7":[1,61],"28":[1,60]},{"6":[1,62],"7":[1,61],"28":[1,60]},{"10":[2,6],"72":[2,6]},{"56":[1,226],"60":[1,227]},{"2":[2,24],"14":[2,24],"72":[2,24]},{"6":[1,62],"7":[1,61],"28":[1,60]},{"6":[1,62],"7":[1,61],"21":[1,138],"28":[1,60]},{"6":[1,62],"7":[1,61],"28":[1,60]},{"6":[1,62],"7":[1,61],"21":[1,138],"28":[1,60]},{"59":[1,232]},{"67":[1,233]},{"29":[1,72],"68":[1,71],"83":[1,235]},{"2":[2,27],"14":[2,27],"72":[1,214]},{"1":[1,118],"24":[1,114],"41":[1,182],"57":[1,124],"75":[1,123],"82":[1,122],"84":[1,121]},{"2":[2,41],"10":[2,41],"14":[2,41],"29":[2,41],"72":[2,41]},{"1":[1,237]},{"1":[1,238]},{"1":[1,239]},{"1":[1,240]},{"1":[1,118],"24":[1,114],"41":[1,182],"57":[1,124],"75":[1,123],"82":[1,122],"84":[1,121]},{"4":[1,242]},{"4":[1,243]},{"29":[1,72],"68":[1,71]},{"1":[1,245]},{"71":[1,246]},{"71":[1,247]},{"71":[1,248]},{"71":[1,249]},{"12":[1,250]},{"29":[1,147],"39":[1,251]},{"2":[2,30],"14":[2,30],"42":[1,93]},{"2":[2,31],"14":[2,31]},{"2":[1,253]},{"1":[1,118],"24":[1,114],"41":[1,182],"57":[1,124],"75":[1,123],"82":[1,122],"84":[1,121]},{"1":[1,118],"24":[1,114],"41":[1,182],"57":[1,124],"75":[1,123],"82":[1,122],"84":[1,121]},{"1":[1,118],"24":[1,114],"41":[1,182],"57":[1,124],"75":[1,123],"82":[1,122],"84":[1,121]},{"1":[1,118],"24":[1,114],"41":[1,182],"57":[1,124],"75":[1,123],"82":[1,122],"84":[1,121]},{"2":[1,258]},{"6":[1,62],"7":[1,61],"28":[1,60]},{"6":[1,62],"7":[1,61],"28":[1,60]},{"2":[2,10],"14":[2,10],"42":[1,93]},{"1":[1,118],"24":[1,114],"41":[1,182],"57":[1,124],"75":[1,123],"82":[1,122],"84":[1,121]},{"1":[1,262]},{"1":[1,263]},{"1":[1,264]},{"1":[1,265]},{"6":[1,62],"7":[1,61],"21":[1,138],"28":[1,60]},{"29":[1,147]},{"2":[2,28],"14":[2,28]},{"2":[2,33],"14":[2,33],"72":[2,33]},{"2":[1,269]},{"2":[1,270]},{"2":[1,271]},{"2":[1,272]},{"2":[2,15],"14":[2,15]},{"71":[1,273]},{"71":[1,274]},{"2":[1,275]},{"1":[1,15],"46":[1,11],"51":[1,13],"66":[1,81],"81":[1,10]},{"1":[1,15],"46":[1,11],"51":[1,13],"66":[1,81],"81":[1,10]},{"1":[1,118],"24":[1,114],"41":[1,182],"57":[1,124],"75":[1,123],"82":[1,122],"84":[1,121]},{"1":[1,118],"24":[1,114],"41":[1,182],"57":[1,124],"75":[1,123],"82":[1,122],"84":[1,121]},{"2":[2,25],"14":[2,25]},{"4":[1,281],"40":[1,280]},{"4":[2,43],"40":[2,43]},{"2":[2,14],"14":[2,14]},{"2":[2,11],"14":[2,11]},{"2":[2,12],"14":[2,12]},{"2":[2,13],"14":[2,13]},{"1":[1,282]},{"1":[1,283]},{"2":[2,23],"14":[2,23],"72":[2,23]},{"2":[1,284]},{"2":[1,285]},{"2":[1,286]},{"2":[1,287]},{"2":[2,29],"14":[2,29]},{"29":[1,147]},{"1":[1,118],"24":[1,114],"41":[1,182],"57":[1,124],"75":[1,123],"82":[1,122],"84":[1,121]},{"1":[1,118],"24":[1,114],"41":[1,182],"57":[1,124],"75":[1,123],"82":[1,122],"84":[1,121]},{"2":[2,19],"14":[2,19]},{"2":[2,20],"14":[2,20]},{"2":[2,21],"14":[2,21]},{"2":[2,22],"14":[2,22]},{"4":[2,44],"40":[2,44]},{"2":[1,291]},{"2":[1,292]},{"2":[2,16],"14":[2,16]},{"2":[2,17],"14":[2,17]}];
const SEMANTIC_ACTION = [
((x) => x),
((_, constant) => constant),
((_, filter) => filter),
((rule) => new Ast.Program([], [], [rule], null)),
((user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })),
((stream, _, action) => new Ast.Statement.Rule(stream, [action])),
((_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])),
((_1, _2, action) => new Ast.Statement.Command(null, [action])),
((rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }),
((get) => Ast.Table.Invocation(get, null)),
((_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((x) => x),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)),
((_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
((_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)),
((_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)),
((monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null, null)),
((monitor, _1, table, _2, _3, _4, pname) => new Ast.Stream.Monitor(table, [pname.name], null)),
((monitor, _1, table, _2, _3, _4, _5, pnames, _6) => new Ast.Stream.Monitor(table, pnames.map((p) => p.name), null)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, filter, null)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeFilter(stream, Ast.BooleanExpression.True, null)),
((x) => x),
((_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
(() => Generate.notifyAction()),
((x) => x),
((fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)),
((inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }),
((pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)),
((pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))),
((pname, _1, v) => new Ast.InputParam(pname.value, v)),
((pname) => new Ast.Value.VarRef(pname.value)),
((pname) => [pname]),
((list, _, pname) => list.concat(pname)),
((x) => x),
((f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])),
((x) => x),
((_, f) => new Ast.BooleanExpression.Not(f)),
((f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])),
((pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((slot) => slot.value === undefined ? Ast.Value.Undefined(true) : slot.value),
((_1, values, _2) => new Ast.Value.Array(values)),
((v) => [v]),
((array, _, v) => {
                                   array.push(v);
                                   return array;
                               }),
(() => new Ast.Value.Boolean(true)),
(() => new Ast.Value.Boolean(false)),
((str) => new Ast.Value.String('')),
((str) => new Ast.Value.String(str.value)),
((num, unit) => new Ast.Value.Measure(num.value, unit.value)),
((v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }),
((x) => x),
((tok) => new Ast.Value.Measure(tok.value.value, tok.value.unit)),
((num) => new Ast.Value.Number(num.value)),
(() => new Ast.Value.Number(1)),
(() => new Ast.Value.Number(0)),
((tok) => new Ast.Value.Currency(tok.value.value, tok.value.unit)),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((loc) => new Ast.Value.Location(new Ast.Location.Absolute(loc.value.latitude, loc.value.longitude, loc.value.display||null))),
((loc) => new Ast.Value.Date(null, '+', null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), '+', null)),
((abs) => new Ast.Value.Date(parseDate(abs.value), '+', null)),
((date, op, offset) => new Ast.Value.Date(date.value, op, offset)),
((date, op, offset) => new Ast.Value.Date(date.value, op, offset)),
((time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second||0)),
((venum) => new Ast.Value.Enum(venum.value)),
((entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:path_name', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:device', null)),
((entity) => new Ast.Value.Entity(entity.kind + ':' + entity.device, 'tt:function', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:picture', null)),
((x, _) => x),
];
module.exports = require('./sr_parser')(TERMINAL_IDS, RULE_NON_TERMINALS, ARITY, GOTO, PARSER_ACTION, SEMANTIC_ACTION);
