// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingEngine
//
// Copyright 2017 Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details
"use strict";

const Ast = require('./ast');
const Generate = require('./generate');

/**
 * Differences with the actual NN Grammar (as written in
 * almond-nnparser/grammar/thingtalk.py):
 *
 * - almond-nnparser's grammar distinguishes $get and $do, while
 *   while this one uses just $call
 *   almond-nnparser can do that because it knows the full list of
 *   gets and dos (and knows that they don't interset), whereas here
 *   we have a single FUNCTION token
 * - almond-nnparser's grammar is typed around parameter types and
 *   constants, this one is not because otherwise it would be too unwieldly
 *   to write
 * - almond-nnparser uses different terminals for <entity>_i because
 *   it autogenerates the grammar; this grammar uses a single terminal
 *   <entity> plus a lexical analysis step because I was too lazy to write
 *   down all cases by hand
 *
 * Missing features, compared with full TT:
 * - single statement
 * - no complex selectors
 * - no remote primitives (yet)
 * - no declarations
 * - no multi-field projection
 * - no alias (in aggregate and as a table/stream operator)
 * - no compute
 *
 * Differences with full TT:
 * - all filter operators are infix
 * - multiple parameter passings are prefixed with on in a join
 * - function names are one token
 * - parameter names are prefixed with param:
 * - enum choices are prefixed with enum:
 * - units are prefixed with unit:
 * - relative locations are prefixed with location:
 *
 * What to keep in mind when writing the grammar:
 * - shifts are cheap, reduces are expensive
 * - adding more symbols to a rule only increases the number of shifts
 * - adding more non-terminals to the grammar increases the number of
 *   reduces
 * - splitting a rule into multiple non-terminals increases the number of
 *   reduces
 * - the breadth of reduces matters too
 * - the overall number of rules affects the breadth of reduces
 */

const identity = (x) => x;

module.exports = {
    '$program':       [[['$rule',], (rule) => new Ast.Program([], [], [rule], null)],
                       [['$constant_Entity(tt:username)', ':', '$rule'], (user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })]],

    '$rule':          [[['$stream', '=>', '$action'], (stream, _, action) => new Ast.Statement.Rule(stream, [action])],
                       [['now', '=>', '$table', '=>', '$action'], (_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])],
                       [['now', '=>', '$action'], (_1, _2, action) => new Ast.Statement.Command(null, [action])],
                       [['$rule', 'on', '$param_passing'], (rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }]],

    '$table':         [[['$call',], (get) => Ast.Table.Invocation(get, null)],
                       [['(', '$table', ')', 'filter', '$filter'], (_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)],
                       [['$out_param', 'of', '(', '$table', ')'], (pname, _1, _2, table, _3) => new Ast.Table.Projection(table, [pname.name], null)],
                       [['[', '$out_param_list', ']', 'of', '(', '$table', ')'], (_1, pnames, _2, _3, _4, table, _5) => new Ast.Table.Projection(table, pnames.map((p) => p.name), null)],
                       [['aggregate', 'min', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'max', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'sum', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'avg', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'count', 'of', '(', '$table', ')'], (_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)],
                       [['aggregate', 'argmin', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['aggregate', 'argmax', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['$table_join'], identity],
                       [['window', '$constant_Number', ',', '$constant_Number', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)],
                       [['timeseries', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)],
                       [['sequence', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)],
                       [['history', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)]],

    '$table_join':    [[['(', '$table', ')', 'join', '(', '$table', ')'], (_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)],
                       [['$table_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$stream':        [[['timer', 'base', '=', '$constant_Date', ',', 'interval', '=', '$constant_Measure(ms)'], (_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)],
                       [['attimer', 'time', '=', '$constant_Time'], (_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)],
                       [['monitor', '(', '$table', ')'], (monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null, null)],
                       [['monitor', '(', '$table', ')', 'on', 'new', '$out_param'], (monitor, _1, table, _2, _3, _4, pname) => new Ast.Stream.Monitor(table, [pname.name], null)],
                       [['monitor', '(', '$table', ')', 'on', 'new', '[', '$out_param_list', ']'], (monitor, _1, table, _2, _3, _4, _5, pnames, _6) => new Ast.Stream.Monitor(table, pnames.map((p) => p.name), null)],
                       [['edge', '(', '$stream', ')', 'on', 'new'], (_1, _2, stream, _3, _4, _5) => new Ast.Stream.EdgeNew(stream, null)],
                       [['edge', '(', '$stream', ')', 'on', '$filter'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeNew(stream, filter)],
                       // edge on true is the equivalent of "only once"
                       [['edge', '(', '$stream', ')', 'on', 'true'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeNew(stream, Ast.BooleanExpression.True)],
                       [['(', '$stream', ')', 'filter', '$filter'], (_1, stream, _2, _3, filter) => new Ast.Stream.Filter(stream, filter, null)],
                       [['$out_param', 'of', '(', '$stream', ')'], (pname, _1, _2, stream, _3) => new Ast.Stream.Projection(stream, [pname.name], null)],
                       [['[', '$out_param_list', ']', 'of', '(', '$stream', ')'], (_1, pnames, _2, _3, _4, stream, _5) => new Ast.Stream.Projection(stream, pnames.map((p) => p.name), null)],
                       [['$stream_join'], identity]],

    '$stream_join':   [[['(', '$stream', ')', 'join', '(', '$table', ')'], (_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)],
                       [['$stream_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$action':        [[['notify'], () => Generate.notifyAction()],
                       [['$call'], identity]],

    '$call':           [[['FUNCTION'], (fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)],
                       [['$call', '$const_param'], (inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }]],

    '$param_passing': [[['PARAM_NAME', '=', '$out_param'], (pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)],
                       [['PARAM_NAME', '=', 'event'], (pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))]],

    '$const_param':   [[['PARAM_NAME', '=', '$constant'], (pname, _1, v) => new Ast.InputParam(pname.value, v)],
                       [['PARAM_NAME', '=', 'undefined'], (pname,_1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Undefined(true))]],

    '$out_param':     [[['PARAM_NAME'], (pname) => new Ast.Value.VarRef(pname.value)]],

    '$out_param_list':[[['$out_param'], (pname) => [pname]],
                       [['$out_param_list', ',', '$out_param'], (list, _, pname) => list.concat(pname)]],

    // note that $filter is not recursive!
    // it must be in CNF form
    // also note that and takes priority over or
    // this is the opposite of regular TT (which copies JS in that respect)
    // because most filters are just a list of
    // "condition and this or that and foo or bar"
    // to be read as
    // "condition and (this or that) and (foo or bar)"
    '$filter':        [[['$or_filter'], identity],
                       [['$filter', 'and', '$or_filter'], (f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])]],

    '$or_filter':     [[['$atom_filter'], identity],
                       [['not', '$atom_filter'], (_, f) => new Ast.BooleanExpression.Or(f)],
                       [['$or_filter', 'or', '$atom_filter'], (f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])]],

    '$atom_filter':   [[['PARAM_NAME', '$value_filter'], (pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)]],

    // in almond-nnparser these are strongly typed constants, so only
    // numbers and measures can be compared for order, etc
    // we're a little looser here because otherwise it becomes unwieldly
    '$value_filter':  [[['==', '$constant'], (op, v) => [op, v]],
                       [['>=', '$constant'], (op, v) => [op, v]],
                       [['<=', '$constant'], (op, v) => [op, v]],
                       [['>', '$constant'], (op, v) => [op, v]],
                       [['<', '$constant'], (op, v) => [op, v]],
                       [['=~', '$constant_String'], (op, v) => [op, v]],
                       [['~=', '$constant_String'], (op, v) => [op, v]],
                       [['starts_with', '$constant_String'], (op, v) => [op, v]],
                       [['ends_with',  '$constant_String'], (op, v) => [op, v]],
                       [['prefix_of',  '$constant_String'], (op, v) => [op, v]],
                       [['suffix_of',  '$constant_String'], (op, v) => [op, v]],
                       [['contains',  '$constant'], (op, v) => [op, v]],
                       [['in_array',  '$constant_Array'], (op, v) => [op, v]],

                       [['==', '$out_param'], (op, v) => [op, v]],
                       [['>=', '$out_param'], (op, v) => [op, v]],
                       [['<=', '$out_param'], (op, v) => [op, v]],
                       [['>', '$out_param'], (op, v) => [op, v]],
                       [['<', '$out_param'], (op, v) => [op, v]],
                       [['=~', '$out_param'], (op, v) => [op, v]],
                       [['~=', '$out_param'], (op, v) => [op, v]],
                       [['starts_with', '$out_param'], (op, v) => [op, v]],
                       [['ends_with',  '$out_param'], (op, v) => [op, v]],
                       [['prefix_of',  '$out_param'], (op, v) => [op, v]],
                       [['suffix_of',  '$out_param'], (op, v) => [op, v]],
                       [['contains',  '$out_param'], (op, v) => [op, v]],
                       [['in_array',  '$out_param'], (op, v) => [op, v]]],

    // this non-terminal exists only for convenience
    // the almond nn-parser grammar does not have it
    '$constant':      [[['$constant_Array'], identity],
                       [['$constant_Boolean'], identity],
                       [['$constant_String'], identity],
                       [['$constant_Measure'], identity],
                       [['$constant_Number'], identity],
                       [['$constant_Location'], identity],
                       [['$constant_Date'], identity],
                       [['$constant_Time'], identity],
                       [['$constant_Entity(unknown)'], identity],
                       [['$constant_Entity(tt:username)'], identity],
                       [['$constant_Entity(tt:hashtag)'], identity],
                       [['$constant_Entity(tt:phone_number)'], identity],
                       [['$constant_Entity(tt:email_address)'], identity],
                       [['$constant_Entity(tt:url)'], identity],
                       [['$constant_Entity(tt:device)'], identity],
                       [['$constant_Entity(tt:function)'], identity],
                       [['$constant_Enum'], identity]],

    // we cannot represent an empty array
    // I don't think that's useful anyway
    '$constant_Array': [[['[', '$constant_array_values', ']'], (_1, values, _2) => new Ast.Value.Array(values)]],

    '$constant_array_values': [[['$constant'], (v) => [v]],
                               [['$constant_array_values', ',', '$constant'], (array, _, v) => {
                                   array.push(v);
                                   return v;
                               }]],

    '$constant_Boolean': [[['true'], () => new Ast.Value.Boolean(true)],
                          [['false'], () => new Ast.Value.Boolean(false)]],

    '$constant_String': [[['QUOTED_STRING'], (str) => new Ast.Value.String(str.value)]],

    // play fast and loose with units here, because I don't want to write
    // everything by hand
    // almond-nnparser autogenerates this part
    '$constant_Measure': [[['$constant_Number', 'UNIT'], (num, unit) => new Ast.Value.Measure(num.value, unit.value)],
                          [['$constant_Measure', '$constant_Number', 'UNIT'], (v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }]],
    '$constant_Measure(ms)': [[['$constant_Measure'], identity]],

    '$constant_Number': [[['NUMBER'], (num) => new Ast.Value.Number(num.value)],
                         [['1'], () => new Ast.Value.Number(1)],
                         [['0'], () => new Ast.Value.Number(0)]],

    '$constant_Location': [[['location:current_location'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:home'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:work'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['LOCATION'], (loc) => new Ast.Value.Location(loc.value)]],

    // start_of/end_of with less than 1h are not supported
    // (they don't make sense)
    '$constant_Date': [[['now'], (loc) => new Ast.Value.Date(null, null)],
                       [['start_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), null)],
                       [['end_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), null)],
                       [['DATE'], (abs) => new Ast.Value.Date(abs.value, null)],
                       [['$constant_Date', '+', '$constant_Measure(ms)'], (date, _, offset) => new Ast.Value.Date(date.value, offset)]],

    '$constant_Time': [[['TIME'], (time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second)]],

    // almond-nnparser expands this into the various enums in the right
    // place for a parameter (as the meaning of an enum changes according
    // to the parameter anyway)
    '$constant_Enum': [[['ENUM'], (venum) => new Ast.Value.Enum(venum.value)]],

    '$constant_Entity(unknown)': [[['GENERIC_ENTITY'], (entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)]],

    '$constant_Entity(tt:username)': [[['USERNAME'], (entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)]],

    '$constant_Entity(tt:hashtag)': [[['HASHTAG'], (entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)]],

    '$constant_Entity(tt:url)': [[['URL'], (entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)]],

    '$constant_Entity(tt:phone_number)': [[['PHONE_NUMBER'], (entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)]],

    '$constant_Entity(tt:email_address)': [[['EMAIL_ADDRESS'], (entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)]],

    '$constant_Entity(tt:device)': [[['DEVICE'], (entity) => new Ast.Value.Entity(entity.value, 'tt:device', null)]],

    '$constant_Entity(tt:function)': [[['FUNCTION'], (entity) => new Ast.Value.Entity(entity.kind + ':' + entity.device)]]
};

const TERMINAL_IDS = {"0":4,"1":5,"(":0,")":1,"+":2,",":3,":":6,"<":7,"<<EOF>>":8,"<=":9,"=":10,"==":11,"=>":12,"=~":13,">":14,">=":15,"DATE":16,"DEVICE":17,"EMAIL_ADDRESS":18,"ENUM":19,"FUNCTION":20,"GENERIC_ENTITY":21,"HASHTAG":22,"LOCATION":23,"NUMBER":24,"PARAM_NAME":25,"PHONE_NUMBER":26,"QUOTED_STRING":27,"TIME":28,"UNIT":29,"URL":30,"USERNAME":31,"[":32,"]":33,"aggregate":34,"and":35,"argmax":36,"argmin":37,"attimer":38,"avg":39,"base":40,"contains":41,"count":42,"edge":43,"end_of":44,"ends_with":45,"event":46,"false":47,"filter":48,"history":49,"in_array":50,"interval":51,"join":52,"location:current_location":53,"location:home":54,"location:work":55,"max":56,"min":57,"monitor":58,"new":59,"not":60,"notify":61,"now":62,"of":63,"on":64,"or":65,"prefix_of":66,"sequence":67,"start_of":68,"starts_with":69,"suffix_of":70,"sum":71,"time":72,"timer":73,"timeseries":74,"true":75,"undefined":76,"window":77,"~=":78};
const RULE_NON_TERMINALS = [30,30,31,31,31,31,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,32,32,32,32,32,32,32,32,32,32,32,32,33,33,1,1,3,3,29,29,4,4,27,28,28,25,25,26,26,26,2,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,24,24,7,7,22,19,19,20,21,21,21,18,18,18,18,8,8,8,8,8,23,17,16,15,12,14,13,10,9,11,0];
const ARITY = [1,3,3,5,3,3,1,5,5,7,7,7,7,7,6,10,10,1,8,8,8,8,7,3,8,4,4,7,9,6,6,6,5,5,7,1,7,3,1,1,1,2,3,3,3,3,1,1,3,1,3,1,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,1,1,1,2,3,1,1,1,1,1,1,1,1,1,2,2,1,3,1,1,1,1,1,1,1,1,1,1,2];
const GOTO = [{"15":3,"27":12,"30":2,"31":7,"32":5,"33":14},{},{},{},{},{},{},{},{},{},{},{"27":12,"32":25,"33":14},{},{"27":29,"28":28},{},{},{"3":33,"27":35,"34":32,"35":37},{"27":12,"31":43,"32":5,"33":14},{"1":44,"3":46},{"1":50,"3":49,"27":35,"34":48,"35":37},{"29":51},{},{},{"27":12,"32":55,"33":14},{},{},{},{},{},{},{"29":62},{},{},{"4":71},{"3":33,"27":35,"34":73,"35":37},{},{"27":29,"28":75},{},{"21":77},{"8":81},{"21":86},{"8":87},{},{},{},{},{"4":71},{},{},{"4":71},{},{},{},{"8":90},{"23":91},{},{"27":12,"32":94,"33":14},{},{"3":33,"27":35,"34":97,"35":37},{"27":12,"32":99,"33":14},{},{"27":101},{},{"27":102},{"27":103},{"27":104},{"27":105},{"27":106},{},{"27":108},{},{},{},{},{},{},{"29":114},{},{},{},{},{},{},{},{},{},{},{},{"1":122,"3":46},{"27":123},{},{},{},{},{},{"2":130,"25":128,"26":129},{},{},{},{},{},{},{"21":138},{},{},{},{},{},{"21":144},{},{"5":147,"6":148,"7":149,"8":154,"9":162,"10":160,"11":163,"12":158,"13":159,"14":161,"15":157,"16":156,"17":164,"18":153,"19":151,"21":152,"22":150,"23":155},{},{"3":33,"27":35,"34":184,"35":37},{},{},{"21":186},{"19":188,"20":187,"21":189},{"19":188,"20":190,"21":189},{},{},{"21":191},{"19":188,"20":192,"21":189},{},{},{},{},{"2":130,"25":196,"26":129},{},{},{},{},{"2":200},{"36":202},{"3":33,"27":35,"34":215,"35":37},{},{"27":12,"32":217,"33":14},{},{"27":12,"32":218,"33":14},{},{},{},{},{},{"3":33,"27":35,"34":224,"35":37},{},{"27":226},{},{},{},{},{},{"21":228},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"5":231,"6":148,"7":149,"8":154,"9":162,"10":160,"11":163,"12":158,"13":159,"14":161,"15":157,"16":156,"17":164,"18":153,"19":151,"21":152,"22":150,"23":155,"24":230},{"2":130,"25":232,"26":129},{},{},{},{},{},{},{"21":228},{},{},{},{},{},{},{},{},{"2":130,"25":196,"26":129},{"2":130,"26":241},{"2":242},{},{"6":243,"27":244},{},{"5":245,"6":148,"7":149,"8":154,"9":162,"10":160,"11":163,"12":158,"13":159,"14":161,"15":157,"16":156,"17":164,"18":153,"19":151,"21":152,"22":150,"23":155,"27":246},{"5":247,"6":148,"7":149,"8":154,"9":162,"10":160,"11":163,"12":158,"13":159,"14":161,"15":157,"16":156,"17":164,"18":153,"19":151,"21":152,"22":150,"23":155,"27":248},{"5":249,"6":148,"7":149,"8":154,"9":162,"10":160,"11":163,"12":158,"13":159,"14":161,"15":157,"16":156,"17":164,"18":153,"19":151,"21":152,"22":150,"23":155,"27":250},{"5":251,"6":148,"7":149,"8":154,"9":162,"10":160,"11":163,"12":158,"13":159,"14":161,"15":157,"16":156,"17":164,"18":153,"19":151,"21":152,"22":150,"23":155,"27":252},{"22":253,"27":254},{"22":255,"27":256},{"22":257,"27":258},{"22":259,"27":260},{"22":261,"27":262},{"22":263,"27":264},{"5":265,"6":148,"7":149,"8":154,"9":162,"10":160,"11":163,"12":158,"13":159,"14":161,"15":157,"16":156,"17":164,"18":153,"19":151,"21":152,"22":150,"23":155,"27":266},{"5":267,"6":148,"7":149,"8":154,"9":162,"10":160,"11":163,"12":158,"13":159,"14":161,"15":157,"16":156,"17":164,"18":153,"19":151,"21":152,"22":150,"23":155,"27":268},{},{},{},{},{"21":273},{"3":33,"27":35,"34":274,"35":37},{"3":33,"27":35,"34":275,"35":37},{"3":33,"27":35,"34":276,"35":37},{"3":33,"27":35,"34":277,"35":37},{},{"21":279},{},{"27":29,"28":280},{},{},{},{},{},{"3":33,"27":35,"34":284,"35":37},{},{"3":33,"27":35,"34":285,"35":37},{},{},{},{},{"19":188,"20":290,"21":189},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"27":226},{},{},{},{},{},{},{},{},{},{},{},{},{"5":299,"6":148,"7":149,"8":154,"9":162,"10":160,"11":163,"12":158,"13":159,"14":161,"15":157,"16":156,"17":164,"18":153,"19":151,"21":152,"22":150,"23":155},{},{},{"27":12,"32":302,"33":14},{"27":12,"32":303,"33":14},{"3":33,"27":35,"34":304,"35":37},{"3":33,"27":35,"34":305,"35":37},{},{"2":130,"25":196,"26":129},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"3":33,"27":35,"34":312,"35":37},{"3":33,"27":35,"34":313,"35":37},{},{},{},{},{},{},{},{}];
const PARSER_ACTION = [{"0":[1,11],"25":[1,15],"31":[1,4],"32":[1,13],"38":[1,9],"43":[1,10],"58":[1,1],"62":[1,6],"73":[1,8]},{"0":[1,16]},{"8":[0]},{"6":[1,17]},{"1":[2,122],"3":[2,122],"6":[2,122],"8":[2,122],"12":[2,122],"25":[2,122],"33":[2,122],"35":[2,122],"64":[2,122],"65":[2,122]},{"12":[1,18]},{"12":[1,19]},{"8":[2,0],"64":[1,20]},{"40":[1,21]},{"72":[1,22]},{"0":[1,23]},{"0":[1,11],"25":[1,15],"32":[1,13],"38":[1,9],"43":[1,24],"58":[1,26],"73":[1,8]},{"63":[1,27]},{"25":[1,15]},{"1":[2,35],"12":[2,35],"64":[1,30]},{"1":[2,46],"3":[2,46],"4":[2,46],"5":[2,46],"8":[2,46],"12":[2,46],"24":[2,46],"33":[2,46],"35":[2,46],"63":[2,46],"64":[2,46],"65":[2,46]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,31],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"0":[1,11],"25":[1,15],"32":[1,13],"38":[1,9],"43":[1,10],"58":[1,26],"62":[1,6],"73":[1,8]},{"20":[1,42],"61":[1,45]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,47],"49":[1,41],"61":[1,45],"67":[1,40],"74":[1,39],"77":[1,38]},{"25":[1,52]},{"10":[1,53]},{"10":[1,54]},{"0":[1,11],"25":[1,15],"32":[1,13],"38":[1,9],"43":[1,24],"58":[1,26],"73":[1,8]},{"0":[1,56]},{"1":[1,57]},{"0":[1,58]},{"0":[1,59]},{"3":[1,61],"33":[1,60]},{"3":[2,47],"33":[2,47]},{"25":[1,52]},{"36":[1,69],"37":[1,63],"39":[1,67],"42":[1,68],"56":[1,65],"57":[1,64],"71":[1,66]},{"1":[1,70]},{"1":[2,6],"12":[2,6],"25":[1,72]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,31],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"63":[1,74]},{"25":[1,15]},{"1":[2,17],"12":[2,17],"64":[1,76]},{"4":[1,80],"5":[1,79],"24":[1,78]},{"16":[1,85],"44":[1,84],"62":[1,82],"68":[1,83]},{"4":[1,80],"5":[1,79],"24":[1,78]},{"16":[1,85],"44":[1,84],"62":[1,82],"68":[1,83]},{"1":[2,40],"8":[2,40],"12":[2,40],"25":[2,40],"64":[2,40]},{"8":[2,1],"64":[1,20]},{"8":[2,2],"64":[2,2]},{"8":[2,38],"64":[2,38]},{"8":[2,39],"25":[1,72],"64":[2,39]},{"36":[1,69],"37":[1,63],"39":[1,67],"42":[1,68],"56":[1,65],"57":[1,64],"71":[1,66]},{"12":[1,88]},{"1":[2,6],"8":[2,39],"12":[2,6],"25":[1,72],"64":[2,39]},{"8":[2,4],"64":[2,4]},{"8":[2,5],"64":[2,5]},{"10":[1,89]},{"16":[1,85],"44":[1,84],"62":[1,82],"68":[1,83]},{"28":[1,92]},{"1":[1,93]},{"0":[1,11],"25":[1,15],"32":[1,13],"38":[1,9],"43":[1,24],"58":[1,26],"73":[1,8]},{"48":[1,95],"52":[1,96]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,31],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"0":[1,11],"25":[1,15],"32":[1,13],"38":[1,9],"43":[1,98],"58":[1,26],"73":[1,8]},{"63":[1,100]},{"25":[1,15]},{"1":[2,37],"12":[2,37],"64":[2,37]},{"25":[1,15]},{"25":[1,15]},{"25":[1,15]},{"25":[1,15]},{"25":[1,15]},{"63":[1,107]},{"25":[1,15]},{"1":[2,26],"12":[2,26],"64":[1,109]},{"1":[2,41],"8":[2,41],"12":[2,41],"25":[2,41],"64":[2,41]},{"10":[1,110]},{"1":[1,111]},{"0":[1,112]},{"3":[1,61],"33":[1,113]},{"25":[1,52]},{"3":[1,115]},{"1":[2,107],"3":[2,107],"8":[2,107],"12":[2,107],"25":[2,107],"29":[2,107],"33":[2,107],"35":[2,107],"63":[2,107],"64":[2,107],"65":[2,107]},{"1":[2,108],"3":[2,108],"8":[2,108],"12":[2,108],"25":[2,108],"29":[2,108],"33":[2,108],"35":[2,108],"63":[2,108],"64":[2,108],"65":[2,108]},{"1":[2,109],"3":[2,109],"8":[2,109],"12":[2,109],"25":[2,109],"29":[2,109],"33":[2,109],"35":[2,109],"63":[2,109],"64":[2,109],"65":[2,109]},{"2":[1,117],"3":[1,116]},{"1":[2,114],"2":[2,114],"3":[2,114],"8":[2,114],"12":[2,114],"25":[2,114],"33":[2,114],"35":[2,114],"64":[2,114],"65":[2,114]},{"29":[1,118]},{"29":[1,119]},{"1":[2,117],"2":[2,117],"3":[2,117],"8":[2,117],"12":[2,117],"25":[2,117],"33":[2,117],"35":[2,117],"64":[2,117],"65":[2,117]},{"3":[1,120]},{"2":[1,117],"3":[1,121]},{"20":[1,42],"61":[1,45]},{"25":[1,15],"46":[1,124]},{"2":[1,117],"3":[1,125]},{"1":[2,25],"12":[2,25]},{"1":[2,119],"3":[2,119],"8":[2,119],"12":[2,119],"25":[2,119],"33":[2,119],"35":[2,119],"64":[2,119],"65":[2,119]},{"64":[1,126]},{"1":[1,127]},{"25":[1,132],"60":[1,131]},{"0":[1,133]},{"1":[1,134]},{"0":[1,135]},{"1":[1,136]},{"0":[1,137]},{"3":[2,48],"33":[2,48]},{"4":[1,80],"5":[1,79],"24":[1,78]},{"63":[1,139]},{"63":[1,140]},{"63":[1,141]},{"63":[1,142]},{"0":[1,143]},{"4":[1,80],"5":[1,79],"24":[1,78]},{"59":[1,145]},{"4":[1,80],"5":[1,79],"16":[1,85],"17":[1,167],"18":[1,146],"19":[1,165],"20":[1,166],"21":[1,172],"22":[1,171],"23":[1,176],"24":[1,78],"26":[1,170],"27":[1,177],"28":[1,92],"30":[1,168],"31":[1,4],"32":[1,180],"44":[1,84],"47":[1,179],"53":[1,173],"54":[1,174],"55":[1,175],"62":[1,82],"68":[1,83],"75":[1,178],"76":[1,169]},{"48":[1,181],"52":[1,182]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,183],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"63":[1,185]},{"1":[2,23],"12":[2,23],"64":[2,23]},{"4":[1,80],"5":[1,79],"24":[1,78]},{"4":[1,80],"5":[1,79],"24":[1,78]},{"4":[1,80],"5":[1,79],"24":[1,78]},{"1":[2,115],"2":[2,115],"3":[2,115],"8":[2,115],"12":[2,115],"25":[2,115],"33":[2,115],"35":[2,115],"64":[2,115],"65":[2,115]},{"1":[2,116],"2":[2,116],"3":[2,116],"8":[2,116],"12":[2,116],"25":[2,116],"33":[2,116],"35":[2,116],"64":[2,116],"65":[2,116]},{"4":[1,80],"5":[1,79],"24":[1,78]},{"4":[1,80],"5":[1,79],"24":[1,78]},{"8":[2,3],"64":[2,3]},{"1":[2,42],"8":[2,42],"12":[2,42],"64":[2,42]},{"1":[2,43],"8":[2,43],"12":[2,43],"64":[2,43]},{"51":[1,193]},{"25":[1,132],"59":[1,194],"60":[1,131],"75":[1,195]},{"64":[1,197]},{"1":[2,32],"12":[2,32],"35":[1,198]},{"1":[2,49],"12":[2,49],"35":[2,49],"65":[1,199]},{"1":[2,51],"12":[2,51],"35":[2,51],"65":[2,51]},{"25":[1,132]},{"7":[1,206],"9":[1,204],"11":[1,214],"13":[1,207],"14":[1,205],"15":[1,203],"41":[1,213],"45":[1,210],"50":[1,201],"66":[1,211],"69":[1,209],"70":[1,212],"78":[1,208]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,183],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"1":[2,26],"12":[2,26],"64":[1,216]},{"0":[1,11],"25":[1,15],"32":[1,13],"38":[1,9],"43":[1,24],"58":[1,26],"73":[1,8]},{"1":[2,33],"12":[2,33]},{"0":[1,11],"25":[1,15],"32":[1,13],"38":[1,9],"43":[1,98],"58":[1,26],"73":[1,8]},{"3":[1,219]},{"0":[1,220]},{"0":[1,221]},{"0":[1,222]},{"0":[1,223]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,183],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"3":[1,225]},{"25":[1,15],"32":[1,227]},{"1":[2,126],"3":[2,126],"8":[2,126],"12":[2,126],"25":[2,126],"33":[2,126],"35":[2,126],"64":[2,126],"65":[2,126]},{"1":[2,44],"8":[2,44],"12":[2,44],"25":[2,44],"64":[2,44]},{"1":[2,81],"3":[2,81],"8":[2,81],"12":[2,81],"25":[2,81],"33":[2,81],"35":[2,81],"64":[2,81],"65":[2,81]},{"1":[2,82],"3":[2,82],"8":[2,82],"12":[2,82],"25":[2,82],"33":[2,82],"35":[2,82],"64":[2,82],"65":[2,82]},{"1":[2,83],"3":[2,83],"8":[2,83],"12":[2,83],"25":[2,83],"33":[2,83],"35":[2,83],"64":[2,83],"65":[2,83]},{"1":[2,84],"3":[2,84],"4":[1,80],"5":[1,79],"8":[2,84],"12":[2,84],"24":[1,78],"25":[2,84],"33":[2,84],"35":[2,84],"64":[2,84],"65":[2,84]},{"1":[2,85],"3":[2,85],"8":[2,85],"12":[2,85],"25":[2,85],"29":[1,229],"33":[2,85],"35":[2,85],"64":[2,85],"65":[2,85]},{"1":[2,86],"3":[2,86],"8":[2,86],"12":[2,86],"25":[2,86],"33":[2,86],"35":[2,86],"64":[2,86],"65":[2,86]},{"1":[2,87],"2":[1,117],"3":[2,87],"8":[2,87],"12":[2,87],"25":[2,87],"33":[2,87],"35":[2,87],"64":[2,87],"65":[2,87]},{"1":[2,88],"3":[2,88],"8":[2,88],"12":[2,88],"25":[2,88],"33":[2,88],"35":[2,88],"64":[2,88],"65":[2,88]},{"1":[2,89],"3":[2,89],"8":[2,89],"12":[2,89],"25":[2,89],"33":[2,89],"35":[2,89],"64":[2,89],"65":[2,89]},{"1":[2,90],"3":[2,90],"8":[2,90],"12":[2,90],"25":[2,90],"33":[2,90],"35":[2,90],"64":[2,90],"65":[2,90]},{"1":[2,91],"3":[2,91],"8":[2,91],"12":[2,91],"25":[2,91],"33":[2,91],"35":[2,91],"64":[2,91],"65":[2,91]},{"1":[2,92],"3":[2,92],"8":[2,92],"12":[2,92],"25":[2,92],"33":[2,92],"35":[2,92],"64":[2,92],"65":[2,92]},{"1":[2,93],"3":[2,93],"8":[2,93],"12":[2,93],"25":[2,93],"33":[2,93],"35":[2,93],"64":[2,93],"65":[2,93]},{"1":[2,94],"3":[2,94],"8":[2,94],"12":[2,94],"25":[2,94],"33":[2,94],"35":[2,94],"64":[2,94],"65":[2,94]},{"1":[2,95],"3":[2,95],"8":[2,95],"12":[2,95],"25":[2,95],"33":[2,95],"35":[2,95],"64":[2,95],"65":[2,95]},{"1":[2,96],"3":[2,96],"8":[2,96],"12":[2,96],"25":[2,96],"33":[2,96],"35":[2,96],"64":[2,96],"65":[2,96]},{"1":[2,97],"3":[2,97],"8":[2,97],"12":[2,97],"25":[2,97],"33":[2,97],"35":[2,97],"64":[2,97],"65":[2,97]},{"1":[2,120],"3":[2,120],"8":[2,120],"12":[2,120],"25":[2,120],"33":[2,120],"35":[2,120],"64":[2,120],"65":[2,120]},{"1":[2,128],"3":[2,128],"8":[2,128],"12":[2,128],"25":[2,128],"33":[2,128],"35":[2,128],"64":[2,128],"65":[2,128]},{"1":[2,127],"3":[2,127],"8":[2,127],"12":[2,127],"25":[2,127],"33":[2,127],"35":[2,127],"64":[2,127],"65":[2,127]},{"1":[2,124],"3":[2,124],"8":[2,124],"12":[2,124],"25":[2,124],"33":[2,124],"35":[2,124],"64":[2,124],"65":[2,124]},{"1":[2,45],"8":[2,45],"12":[2,45],"25":[2,45],"64":[2,45]},{"1":[2,125],"3":[2,125],"8":[2,125],"12":[2,125],"25":[2,125],"33":[2,125],"35":[2,125],"64":[2,125],"65":[2,125]},{"1":[2,123],"3":[2,123],"8":[2,123],"12":[2,123],"25":[2,123],"33":[2,123],"35":[2,123],"64":[2,123],"65":[2,123]},{"1":[2,121],"3":[2,121],"8":[2,121],"12":[2,121],"25":[2,121],"33":[2,121],"35":[2,121],"64":[2,121],"65":[2,121]},{"1":[2,110],"3":[2,110],"8":[2,110],"12":[2,110],"25":[2,110],"33":[2,110],"35":[2,110],"64":[2,110],"65":[2,110]},{"1":[2,111],"3":[2,111],"8":[2,111],"12":[2,111],"25":[2,111],"33":[2,111],"35":[2,111],"64":[2,111],"65":[2,111]},{"1":[2,112],"3":[2,112],"8":[2,112],"12":[2,112],"25":[2,112],"33":[2,112],"35":[2,112],"64":[2,112],"65":[2,112]},{"1":[2,113],"3":[2,113],"8":[2,113],"12":[2,113],"25":[2,113],"33":[2,113],"35":[2,113],"64":[2,113],"65":[2,113]},{"1":[2,103],"3":[2,103],"8":[2,103],"12":[2,103],"25":[2,103],"33":[2,103],"35":[2,103],"64":[2,103],"65":[2,103]},{"1":[2,101],"3":[2,101],"8":[2,101],"12":[2,101],"25":[2,101],"33":[2,101],"35":[2,101],"64":[2,101],"65":[2,101]},{"1":[2,102],"3":[2,102],"8":[2,102],"12":[2,102],"25":[2,102],"33":[2,102],"35":[2,102],"64":[2,102],"65":[2,102]},{"4":[1,80],"5":[1,79],"16":[1,85],"17":[1,167],"18":[1,146],"19":[1,165],"20":[1,166],"21":[1,172],"22":[1,171],"23":[1,176],"24":[1,78],"26":[1,170],"27":[1,177],"28":[1,92],"30":[1,168],"31":[1,4],"32":[1,180],"44":[1,84],"47":[1,179],"53":[1,173],"54":[1,174],"55":[1,175],"62":[1,82],"68":[1,83],"75":[1,178]},{"25":[1,132],"60":[1,131]},{"0":[1,233]},{"36":[1,69],"37":[1,63],"39":[1,67],"42":[1,68],"56":[1,65],"57":[1,64],"71":[1,66]},{"1":[1,234]},{"0":[1,235]},{"63":[1,236]},{"63":[1,237]},{"1":[2,106],"2":[2,106],"3":[2,106],"4":[1,80],"5":[1,79],"8":[2,106],"12":[2,106],"24":[1,78],"25":[2,106],"33":[2,106],"35":[2,106],"63":[2,106],"64":[2,106],"65":[2,106]},{"29":[1,229]},{"1":[2,118],"2":[2,118],"3":[2,118],"8":[2,118],"12":[2,118],"25":[2,118],"33":[2,118],"35":[2,118],"64":[2,118],"65":[2,118]},{"63":[1,238]},{"63":[1,239]},{"10":[1,240]},{"1":[2,29],"12":[2,29]},{"1":[2,31],"12":[2,31]},{"1":[2,30],"12":[2,30],"35":[1,198]},{"25":[1,132],"59":[1,194],"60":[1,131],"75":[1,195]},{"25":[1,132],"60":[1,131]},{"25":[1,132]},{"1":[2,52],"12":[2,52],"35":[2,52],"65":[2,52]},{"25":[1,15],"32":[1,180]},{"1":[2,54],"12":[2,54],"35":[2,54],"65":[2,54]},{"4":[1,80],"5":[1,79],"16":[1,85],"17":[1,167],"18":[1,146],"19":[1,165],"20":[1,166],"21":[1,172],"22":[1,171],"23":[1,176],"24":[1,78],"25":[1,15],"26":[1,170],"27":[1,177],"28":[1,92],"30":[1,168],"31":[1,4],"32":[1,180],"44":[1,84],"47":[1,179],"53":[1,173],"54":[1,174],"55":[1,175],"62":[1,82],"68":[1,83],"75":[1,178]},{"4":[1,80],"5":[1,79],"16":[1,85],"17":[1,167],"18":[1,146],"19":[1,165],"20":[1,166],"21":[1,172],"22":[1,171],"23":[1,176],"24":[1,78],"25":[1,15],"26":[1,170],"27":[1,177],"28":[1,92],"30":[1,168],"31":[1,4],"32":[1,180],"44":[1,84],"47":[1,179],"53":[1,173],"54":[1,174],"55":[1,175],"62":[1,82],"68":[1,83],"75":[1,178]},{"4":[1,80],"5":[1,79],"16":[1,85],"17":[1,167],"18":[1,146],"19":[1,165],"20":[1,166],"21":[1,172],"22":[1,171],"23":[1,176],"24":[1,78],"25":[1,15],"26":[1,170],"27":[1,177],"28":[1,92],"30":[1,168],"31":[1,4],"32":[1,180],"44":[1,84],"47":[1,179],"53":[1,173],"54":[1,174],"55":[1,175],"62":[1,82],"68":[1,83],"75":[1,178]},{"4":[1,80],"5":[1,79],"16":[1,85],"17":[1,167],"18":[1,146],"19":[1,165],"20":[1,166],"21":[1,172],"22":[1,171],"23":[1,176],"24":[1,78],"25":[1,15],"26":[1,170],"27":[1,177],"28":[1,92],"30":[1,168],"31":[1,4],"32":[1,180],"44":[1,84],"47":[1,179],"53":[1,173],"54":[1,174],"55":[1,175],"62":[1,82],"68":[1,83],"75":[1,178]},{"25":[1,15],"27":[1,177]},{"25":[1,15],"27":[1,177]},{"25":[1,15],"27":[1,177]},{"25":[1,15],"27":[1,177]},{"25":[1,15],"27":[1,177]},{"25":[1,15],"27":[1,177]},{"4":[1,80],"5":[1,79],"16":[1,85],"17":[1,167],"18":[1,146],"19":[1,165],"20":[1,166],"21":[1,172],"22":[1,171],"23":[1,176],"24":[1,78],"25":[1,15],"26":[1,170],"27":[1,177],"28":[1,92],"30":[1,168],"31":[1,4],"32":[1,180],"44":[1,84],"47":[1,179],"53":[1,173],"54":[1,174],"55":[1,175],"62":[1,82],"68":[1,83],"75":[1,178]},{"4":[1,80],"5":[1,79],"16":[1,85],"17":[1,167],"18":[1,146],"19":[1,165],"20":[1,166],"21":[1,172],"22":[1,171],"23":[1,176],"24":[1,78],"25":[1,15],"26":[1,170],"27":[1,177],"28":[1,92],"30":[1,168],"31":[1,4],"32":[1,180],"44":[1,84],"47":[1,179],"53":[1,173],"54":[1,174],"55":[1,175],"62":[1,82],"68":[1,83],"75":[1,178]},{"1":[1,269]},{"59":[1,270]},{"1":[1,271]},{"1":[1,272]},{"4":[1,80],"5":[1,79],"24":[1,78]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,183],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,183],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,183],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,183],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"1":[1,278]},{"4":[1,80],"5":[1,79],"24":[1,78]},{"1":[2,27],"12":[2,27]},{"25":[1,15]},{"29":[1,281]},{"1":[2,104],"2":[2,104],"3":[2,104],"4":[2,104],"5":[2,104],"8":[2,104],"12":[2,104],"24":[2,104],"25":[2,104],"33":[2,104],"35":[2,104],"63":[2,104],"64":[2,104],"65":[2,104]},{"3":[1,283],"33":[1,282]},{"3":[2,99],"33":[2,99]},{"1":[2,7],"12":[2,7],"35":[1,198]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,183],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"1":[2,8],"12":[2,8]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,183],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"0":[1,286]},{"0":[1,287]},{"0":[1,288]},{"0":[1,289]},{"4":[1,80],"5":[1,79],"24":[1,78]},{"1":[2,50],"12":[2,50],"35":[2,50],"65":[1,199]},{"1":[2,53],"12":[2,53],"35":[2,53],"65":[2,53]},{"1":[2,67],"12":[2,67],"35":[2,67],"65":[2,67]},{"1":[2,80],"12":[2,80],"35":[2,80],"65":[2,80]},{"1":[2,56],"12":[2,56],"35":[2,56],"65":[2,56]},{"1":[2,69],"12":[2,69],"35":[2,69],"65":[2,69]},{"1":[2,57],"12":[2,57],"35":[2,57],"65":[2,57]},{"1":[2,70],"12":[2,70],"35":[2,70],"65":[2,70]},{"1":[2,58],"12":[2,58],"35":[2,58],"65":[2,58]},{"1":[2,71],"12":[2,71],"35":[2,71],"65":[2,71]},{"1":[2,59],"12":[2,59],"35":[2,59],"65":[2,59]},{"1":[2,72],"12":[2,72],"35":[2,72],"65":[2,72]},{"1":[2,60],"12":[2,60],"35":[2,60],"65":[2,60]},{"1":[2,73],"12":[2,73],"35":[2,73],"65":[2,73]},{"1":[2,61],"12":[2,61],"35":[2,61],"65":[2,61]},{"1":[2,74],"12":[2,74],"35":[2,74],"65":[2,74]},{"1":[2,62],"12":[2,62],"35":[2,62],"65":[2,62]},{"1":[2,75],"12":[2,75],"35":[2,75],"65":[2,75]},{"1":[2,63],"12":[2,63],"35":[2,63],"65":[2,63]},{"1":[2,76],"12":[2,76],"35":[2,76],"65":[2,76]},{"1":[2,64],"12":[2,64],"35":[2,64],"65":[2,64]},{"1":[2,77],"12":[2,77],"35":[2,77],"65":[2,77]},{"1":[2,65],"12":[2,65],"35":[2,65],"65":[2,65]},{"1":[2,78],"12":[2,78],"35":[2,78],"65":[2,78]},{"1":[2,66],"12":[2,66],"35":[2,66],"65":[2,66]},{"1":[2,79],"12":[2,79],"35":[2,79],"65":[2,79]},{"1":[2,55],"12":[2,55],"35":[2,55],"65":[2,55]},{"1":[2,68],"12":[2,68],"35":[2,68],"65":[2,68]},{"1":[2,36],"12":[2,36],"64":[2,36]},{"25":[1,15],"32":[1,227]},{"64":[1,291]},{"1":[2,34],"12":[2,34]},{"63":[1,292]},{"1":[1,293]},{"1":[1,294]},{"1":[1,295]},{"1":[1,296]},{"1":[2,14],"12":[2,14]},{"63":[1,297]},{"3":[1,61],"33":[1,298]},{"1":[2,105],"2":[2,105],"3":[2,105],"4":[2,105],"5":[2,105],"8":[2,105],"12":[2,105],"24":[2,105],"25":[2,105],"33":[2,105],"35":[2,105],"63":[2,105],"64":[2,105],"65":[2,105]},{"1":[2,98],"3":[2,98],"8":[2,98],"12":[2,98],"25":[2,98],"33":[2,98],"35":[2,98],"64":[2,98],"65":[2,98]},{"4":[1,80],"5":[1,79],"16":[1,85],"17":[1,167],"18":[1,146],"19":[1,165],"20":[1,166],"21":[1,172],"22":[1,171],"23":[1,176],"24":[1,78],"26":[1,170],"27":[1,177],"28":[1,92],"30":[1,168],"31":[1,4],"32":[1,180],"44":[1,84],"47":[1,179],"53":[1,173],"54":[1,174],"55":[1,175],"62":[1,82],"68":[1,83],"75":[1,178]},{"1":[1,300]},{"1":[1,301]},{"0":[1,11],"25":[1,15],"32":[1,13],"38":[1,9],"43":[1,98],"58":[1,26],"73":[1,8]},{"0":[1,11],"25":[1,15],"32":[1,13],"38":[1,9],"43":[1,98],"58":[1,26],"73":[1,8]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,183],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,183],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"1":[2,24],"12":[2,24]},{"25":[1,132],"59":[1,194],"60":[1,131],"75":[1,195]},{"0":[1,306]},{"1":[2,10],"12":[2,10]},{"1":[2,11],"12":[2,11]},{"1":[2,12],"12":[2,12]},{"1":[2,13],"12":[2,13]},{"0":[1,307]},{"1":[2,28],"12":[2,28]},{"3":[2,100],"33":[2,100]},{"1":[2,22],"12":[2,22],"64":[2,22]},{"1":[2,9],"12":[2,9]},{"1":[1,308]},{"1":[1,309]},{"1":[1,310]},{"1":[1,311]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,183],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"0":[1,34],"20":[1,42],"25":[1,15],"32":[1,36],"34":[1,183],"49":[1,41],"67":[1,40],"74":[1,39],"77":[1,38]},{"1":[2,18],"12":[2,18]},{"1":[2,19],"12":[2,19]},{"1":[2,20],"12":[2,20]},{"1":[2,21],"12":[2,21]},{"1":[1,314]},{"1":[1,315]},{"1":[2,15],"12":[2,15]},{"1":[2,16],"12":[2,16]}];
const SEMANTIC_ACTION = [
((rule) => new Ast.Program([], [], [rule], null)),
((user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })),
((stream, _, action) => new Ast.Statement.Rule(stream, [action])),
((_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])),
((_1, _2, action) => new Ast.Statement.Command(null, [action])),
((rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }),
((get) => Ast.Table.Invocation(get, null)),
((_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)),
((pname, _1, _2, table, _3) => new Ast.Table.Projection(table, [pname.name], null)),
((_1, pnames, _2, _3, _4, table, _5) => new Ast.Table.Projection(table, pnames.map((p) => p.name), null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((x) => x),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)),
((_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
((_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)),
((_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)),
((monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null, null)),
((monitor, _1, table, _2, _3, _4, pname) => new Ast.Stream.Monitor(table, [pname.name], null)),
((monitor, _1, table, _2, _3, _4, _5, pnames, _6) => new Ast.Stream.Monitor(table, pnames.map((p) => p.name), null)),
((_1, _2, stream, _3, _4, _5) => new Ast.Stream.EdgeNew(stream, null)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeNew(stream, filter)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeNew(stream, Ast.BooleanExpression.True)),
((_1, stream, _2, _3, filter) => new Ast.Stream.Filter(stream, filter, null)),
((pname, _1, _2, stream, _3) => new Ast.Stream.Projection(stream, [pname.name], null)),
((_1, pnames, _2, _3, _4, stream, _5) => new Ast.Stream.Projection(stream, pnames.map((p) => p.name), null)),
((x) => x),
((_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
(() => Generate.notifyAction()),
((x) => x),
((fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)),
((inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }),
((pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)),
((pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))),
((pname, _1, v) => new Ast.InputParam(pname.value, v)),
((pname,_1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Undefined(true))),
((pname) => new Ast.Value.VarRef(pname.value)),
((pname) => [pname]),
((list, _, pname) => list.concat(pname)),
((x) => x),
((f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])),
((x) => x),
((_, f) => new Ast.BooleanExpression.Or(f)),
((f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])),
((pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((_1, values, _2) => new Ast.Value.Array(values)),
((v) => [v]),
((array, _, v) => {
                                   array.push(v);
                                   return v;
                               }),
(() => new Ast.Value.Boolean(true)),
(() => new Ast.Value.Boolean(false)),
((str) => new Ast.Value.String(str.value)),
((num, unit) => new Ast.Value.Measure(num.value, unit.value)),
((v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }),
((x) => x),
((num) => new Ast.Value.Number(num.value)),
(() => new Ast.Value.Number(1)),
(() => new Ast.Value.Number(0)),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((loc) => new Ast.Value.Location(loc.value)),
((loc) => new Ast.Value.Date(null, null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), null)),
((abs) => new Ast.Value.Date(abs.value, null)),
((date, _, offset) => new Ast.Value.Date(date.value, offset)),
((time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second)),
((venum) => new Ast.Value.Enum(venum.value)),
((entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:device', null)),
((entity) => new Ast.Value.Entity(entity.kind + ':' + entity.device)),
((x, _) => x),
];
module.exports = require('./sr_parser')(TERMINAL_IDS, RULE_NON_TERMINALS, ARITY, GOTO, PARSER_ACTION, SEMANTIC_ACTION);
