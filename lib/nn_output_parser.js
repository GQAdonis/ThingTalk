// -*- mode: js; indent-tabs-mode: nil; js-basic-offset: 4 -*-
//
// This file is part of ThingEngine
//
// Copyright 2017 Giovanni Campagna <gcampagn@cs.stanford.edu>
//
// See COPYING for details
"use strict";

const Ast = require('./ast');
const Generate = require('./generate');

/**
 * Differences with the actual NN Grammar (as written in
 * almond-nnparser/grammar/thingtalk.py):
 *
 * - almond-nnparser's grammar distinguishes $get and $do, while
 *   while this one uses just $call
 *   almond-nnparser can do that because it knows the full list of
 *   gets and dos (and knows that they don't interset), whereas here
 *   we have a single FUNCTION token
 * - almond-nnparser's grammar is typed around parameter types and
 *   constants, this one is not because otherwise it would be too unwieldly
 *   to write
 * - almond-nnparser uses different terminals for <entity>_i because
 *   it autogenerates the grammar; this grammar uses a single terminal
 *   <entity> plus a lexical analysis step because I was too lazy to write
 *   down all cases by hand
 *
 * Missing features, compared with full TT:
 * - single statement
 * - no complex selectors
 * - no remote primitives (yet)
 * - no declarations
 * - no multi-field projection
 * - no alias (in aggregate and as a table/stream operator)
 * - no compute
 * - no explicit undefined
 *
 * Differences with full TT:
 * - all filter operators are infix
 * - multiple parameter passings are prefixed with on in a join
 * - function names are one token
 * - parameter names are prefixed with param:
 * - enum choices are prefixed with enum:
 * - units are prefixed with unit:
 * - relative locations are prefixed with location:
 *
 * What to keep in mind when writing the grammar:
 * - shifts are cheap, reduces are expensive
 * - adding more symbols to a rule only increases the number of shifts
 * - adding more non-terminals to the grammar increases the number of
 *   reduces
 * - splitting a rule into multiple non-terminals increases the number of
 *   reduces
 * - the breadth of reduces matters too
 * - the overall number of rules affects the breadth of reduces
 */

const identity = (x) => x;

module.exports = {
    '$program':       [[['$rule',], (rule) => new Ast.Program([], [], [rule], null)],
                       [['$constant_Entity(tt:username)', ':', '$rule'], (user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })]],

    '$rule':          [[['$stream', '=>', '$action'], (stream, _, action) => new Ast.Statement.Rule(stream, [action])],
                       [['now', '=>', '$table', '=>', '$action'], (_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])],
                       [['now', '=>', '$action'], (_1, _2, action) => new Ast.Statement.Command(null, [action])],
                       [['$rule', 'on', '$param_passing'], (rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }]],

    '$table':         [[['$call',], (get) => Ast.Table.Invocation(get, null)],
                       [['(', '$table', ')', 'filter', '$filter'], (_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)],
                       [['$out_param', 'of', '(', '$table', ')'], (pname, _1, _2, table, _3) => new Ast.Table.Projection(table, [pname.name], null)],
                       [['aggregate', 'min', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'max', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'sum', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'avg', '$out_param', 'of', '(', '$table', ')'], (_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)],
                       [['aggregate', 'count', 'of', '(', '$table', ')'], (_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)],
                       [['aggregate', 'argmin', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['aggregate', 'argmax', '$out_param', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)],
                       [['$table_join'], identity],
                       [['window', '$constant_Number', ',', '$constant_Number', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)],
                       [['timeseries', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$stream', ')'], (_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)],
                       [['sequence', '$constant_Number', ',', '$constant_Number', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)],
                       [['history', '$constant_Date', ',', '$constant_Measure(ms)', 'of', '(', '$table', ')'], (_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)]],

    '$table_join':    [[['(', '$table', ')', 'join', '(', '$table', ')'], (_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)],
                       [['$table_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$stream':        [[['timer', 'base', '=', '$constant_Date', ',', 'interval', '=', '$constant_Measure(ms)'], (_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)],
                       [['attimer', 'time', '=', '$constant_Time'], (_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)],
                       [['monitor', '(', '$table', ')'], (monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null)],
                       [['edge', '(', '$stream', ')', 'on', 'new'], (_1, _2, stream, _3, _4, _5) => new Ast.Stream.EdgeNew(stream, null)],
                       [['edge', '(', '$stream', ')', 'on', '$filter'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeNew(stream, filter)],
                       // edge on true is the equivalent of "only once"
                       [['edge', '(', '$stream', ')', 'on', 'true'], (_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeNew(stream, Ast.BooleanExpression.True)],
                       [['(', '$stream', ')', 'filter', '$filter'], (_1, stream, _2, _3, filter) => new Ast.Stream.Filter(stream, filter, null)],
                       [['$out_param', 'of', '(', '$stream', ')'], (pname, _1, _2, stream, _3) => new Ast.Stream.Projection(stream, [pname.name], null)],
                       [['$stream_join'], identity]],

    '$stream_join':   [[['(', '$stream', ')', 'join', '(', '$table', ')'], (_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)],
                       [['$stream_join', 'on', '$param_passing'], (join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }]],

    '$action':        [[['notify'], () => Generate.notifyAction()],
                       [['$call'], identity]],

    '$call':           [[['FUNCTION'], (fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)],
                       [['$call', '$const_param'], (inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }]],

    '$param_passing': [[['PARAM_NAME', '=', '$out_param'], (pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)],
                       [['PARAM_NAME', '=', 'event'], (pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))]],

    '$const_param':   [[['PARAM_NAME', '=', '$constant'], (pname, _1, v) => new Ast.InputParam(pname.value, v)]],

    '$out_param':     [[['PARAM_NAME'], (pname) => new Ast.Value.VarRef(pname.value)]],

    // note that $filter is not recursive!
    // it must be in CNF form
    // also note that and takes priority over or
    // this is the opposite of regular TT (which copies JS in that respect)
    // because most filters are just a list of
    // "condition and this or that and foo or bar"
    // to be read as
    // "condition and (this or that) and (foo or bar)"
    '$filter':        [[['$or_filter'], identity],
                       [['$filter', 'and', '$or_filter'], (f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])]],

    '$or_filter':     [[['$atom_filter'], identity],

 [['not', '$atom_filter'], (_, f) => new Ast.BooleanExpression.Or(f)],
                       [['$or_filter', 'or', '$atom_filter'], (f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])]],

    '$atom_filter':   [[['PARAM_NAME', '$value_filter'], (pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)]],

    // in almond-nnparser these are strongly typed constants, so only
    // numbers and measures can be compared for order, etc
    // we're a little looser here because otherwise it becomes unwieldly
    '$value_filter':  [[['==', '$constant'], (op, v) => [op, v]],
                       [['>=', '$constant'], (op, v) => [op, v]],
                       [['<=', '$constant'], (op, v) => [op, v]],
                       [['>', '$constant'], (op, v) => [op, v]],
                       [['<', '$constant'], (op, v) => [op, v]],
                       [['=~', '$constant_String'], (op, v) => [op, v]],
                       [['~=', '$constant_String'], (op, v) => [op, v]],
                       [['starts_with', '$constant_String'], (op, v) => [op, v]],
                       [['ends_with',  '$constant_String'], (op, v) => [op, v]],
                       [['prefix_of',  '$constant_String'], (op, v) => [op, v]],
                       [['suffix_of',  '$constant_String'], (op, v) => [op, v]],
                       [['contains',  '$constant'], (op, v) => [op, v]],
                       [['in_array',  '$constant_Array'], (op, v) => [op, v]],

                       [['==', '$out_param'], (op, v) => [op, v]],
                       [['>=', '$out_param'], (op, v) => [op, v]],
                       [['<=', '$out_param'], (op, v) => [op, v]],
                       [['>', '$out_param'], (op, v) => [op, v]],
                       [['<', '$out_param'], (op, v) => [op, v]],
                       [['=~', '$out_param'], (op, v) => [op, v]],
                       [['~=', '$out_param'], (op, v) => [op, v]],
                       [['starts_with', '$out_param'], (op, v) => [op, v]],
                       [['ends_with',  '$out_param'], (op, v) => [op, v]],
                       [['prefix_of',  '$out_param'], (op, v) => [op, v]],
                       [['suffix_of',  '$out_param'], (op, v) => [op, v]],
                       [['contains',  '$out_param'], (op, v) => [op, v]],
                       [['in_array',  '$out_param'], (op, v) => [op, v]]],

    // this non-terminal exists only for convenience
    // the almond nn-parser grammar does not have it
    '$constant':      [[['$constant_Array'], identity],
                       [['$constant_Boolean'], identity],
                       [['$constant_String'], identity],
                       [['$constant_Measure'], identity],
                       [['$constant_Number'], identity],
                       [['$constant_Location'], identity],
                       [['$constant_Date'], identity],
                       [['$constant_Time'], identity],
                       [['$constant_Entity(unknown)'], identity],
                       [['$constant_Entity(tt:username)'], identity],
                       [['$constant_Entity(tt:hashtag)'], identity],
                       [['$constant_Entity(tt:phone_number)'], identity],
                       [['$constant_Entity(tt:email_address)'], identity],
                       [['$constant_Entity(tt:url)'], identity],
                       [['$constant_Enum'], identity]],

    // we cannot represent an empty array
    // I don't think that's useful anyway
    '$constant_Array': [[['[', '$constant_array_values', ']'], (_1, values, _2) => new Ast.Value.Array(values)]],

    '$constant_array_values': [[['$constant'], (v) => [v]],
                               [['$constant_array_values', ',', '$constant'], (array, _, v) => {
                                   array.push(v);
                                   return v;
                               }]],

    '$constant_Boolean': [[['true'], () => new Ast.Value.Boolean(true)],
                          [['false'], () => new Ast.Value.Boolean(false)]],

    '$constant_String': [[['QUOTED_STRING'], (str) => new Ast.Value.String(str.value)]],

    // play fast and loose with units here, because I don't want to write
    // everything by hand
    // almond-nnparser autogenerates this part
    '$constant_Measure': [[['$constant_Number', 'UNIT'], (num, unit) => new Ast.Value.Measure(num.value, unit.value)],
                          [['$constant_Measure', '$constant_Number', 'UNIT'], (v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }]],
    '$constant_Measure(ms)': [[['$constant_Measure'], identity]],

    '$constant_Number': [[['NUMBER'], (num) => new Ast.Value.Number(num.value)],
                         [['1'], () => new Ast.Value.Number(1)],
                         [['0'], () => new Ast.Value.Number(0)]],

    '$constant_Location': [[['location:current_location'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:home'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['location:work'], (tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))],
                           [['LOCATION'], (loc) => new Ast.Value.Location(loc.value)]],

    // start_of/end_of with less than 1h are not supported
    // (they don't make sense)
    '$constant_Date': [[['now'], (loc) => new Ast.Value.Date(null, null)],
                       [['start_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), null)],
                       [['end_of', 'UNIT'], (edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), null)],
                       [['DATE'], (abs) => new Ast.Value.Date(abs.value, null)],
                       [['$constant_Date', '+', '$constant_Measure(ms)'], (date, _, offset) => new Ast.Value.Date(date.value, offset)]],

    '$constant_Time': [[['TIME'], (time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second)]],

    // almond-nnparser expands this into the various enums in the right
    // place for a parameter (as the meaning of an enum changes according
    // to the parameter anyway)
    '$constant_Enum': [[['ENUM'], (venum) => new Ast.Value.Enum(venum.value)]],

    '$constant_Entity(unknown)': [[['GENERIC_ENTITY'], (entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)]],

    '$constant_Entity(tt:username)': [[['USERNAME'], (entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)]],

    '$constant_Entity(tt:hashtag)': [[['HASHTAG'], (entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)]],

    '$constant_Entity(tt:url)': [[['URL'], (entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)]],

    '$constant_Entity(tt:phone_number)': [[['PHONE_NUMBER'], (entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)]],

    '$constant_Entity(tt:email_address)': [[['EMAIL_ADDRESS'], (entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)]],
};

const TERMINAL_IDS = {"0":4,"1":5,"(":0,")":1,"+":2,",":3,":":6,"<":7,"<<EOF>>":8,"<=":9,"=":10,"==":11,"=>":12,"=~":13,">":14,">=":15,"DATE":16,"EMAIL_ADDRESS":17,"ENUM":18,"FUNCTION":19,"GENERIC_ENTITY":20,"HASHTAG":21,"LOCATION":22,"NUMBER":23,"PARAM_NAME":24,"PHONE_NUMBER":25,"QUOTED_STRING":26,"TIME":27,"UNIT":28,"URL":29,"USERNAME":30,"[":31,"]":32,"aggregate":33,"and":34,"argmax":35,"argmin":36,"attimer":37,"avg":38,"base":39,"contains":40,"count":41,"edge":42,"end_of":43,"ends_with":44,"event":45,"false":46,"filter":47,"history":48,"in_array":49,"interval":50,"join":51,"location:current_location":52,"location:home":53,"location:work":54,"max":55,"min":56,"monitor":57,"new":58,"not":59,"notify":60,"now":61,"of":62,"on":63,"or":64,"prefix_of":65,"sequence":66,"start_of":67,"starts_with":68,"suffix_of":69,"sum":70,"time":71,"timer":72,"timeseries":73,"true":74,"window":75,"~=":76};
const RULE_NON_TERMINALS = [27,27,28,28,28,28,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,29,29,29,29,29,29,29,29,29,30,30,1,1,3,3,26,26,4,25,23,23,24,24,24,2,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,22,22,7,7,20,17,17,18,19,19,19,16,16,16,16,8,8,8,8,8,21,15,14,13,10,12,11,9,0];
const ARITY = [1,3,3,5,3,3,1,5,5,7,7,7,7,6,10,10,1,8,8,8,8,7,3,8,4,4,6,6,6,5,5,1,7,3,1,1,1,2,3,3,3,1,1,3,1,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,3,1,1,1,2,3,1,1,1,1,1,1,1,1,1,2,2,1,3,1,1,1,1,1,1,1,1,2];
const GOTO = [{"13":3,"25":12,"27":2,"28":7,"29":5,"30":13},{},{},{},{},{},{},{},{},{},{},{"25":12,"29":24,"30":13},{},{},{},{"3":31,"25":30,"31":28,"32":32},{"25":12,"28":38,"29":5,"30":13},{"1":39,"3":41},{"1":45,"3":44,"25":30,"31":43,"32":32},{"26":46},{},{},{"25":12,"29":51,"30":13},{},{},{},{"26":55},{},{},{"3":31,"25":30,"31":64,"32":32},{},{"4":66},{},{"19":69},{"8":73},{"19":78},{"8":79},{},{},{},{},{"4":66},{},{},{"4":66},{},{},{},{"8":82},{"21":83},{},{},{"25":12,"29":87,"30":13},{},{"25":12,"29":90,"30":13},{},{"25":91},{"25":92},{"25":93},{"25":94},{"25":95},{},{"25":97},{},{},{},{},{},{"26":101},{},{},{},{},{},{},{},{},{},{},{},{"1":109,"3":41},{"25":110},{},{},{},{"25":12,"29":113,"30":13},{},{},{"2":118,"23":116,"24":117},{},{},{"19":123},{},{},{},{},{},{"19":129},{},{"3":31,"25":30,"31":132,"32":32},{"5":133,"6":153,"7":134,"8":139,"9":145,"10":143,"11":144,"12":146,"13":142,"14":141,"15":147,"16":138,"17":136,"19":137,"20":135,"21":140},{},{"19":163},{"17":165,"18":164,"19":166},{"17":165,"18":167,"19":166},{},{},{"19":168},{"17":165,"18":169,"19":166},{},{},{},{},{},{"2":118,"23":174,"24":117},{},{},{},{},{"2":178},{"33":180},{"3":31,"25":30,"31":193,"32":32},{},{},{},{},{},{},{"3":31,"25":30,"31":199,"32":32},{},{"2":118,"23":201,"24":117},{},{},{},{},{},{"19":204},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"5":207,"6":153,"7":134,"8":139,"9":145,"10":143,"11":144,"12":146,"13":142,"14":141,"15":147,"16":138,"17":136,"19":137,"20":135,"21":140,"22":206},{},{},{"19":204},{},{},{},{},{},{},{},{},{},{"2":118,"23":174,"24":117},{"2":118,"24":214},{"2":215},{},{"6":216,"25":217},{},{"5":218,"6":153,"7":134,"8":139,"9":145,"10":143,"11":144,"12":146,"13":142,"14":141,"15":147,"16":138,"17":136,"19":137,"20":135,"21":140,"25":219},{"5":220,"6":153,"7":134,"8":139,"9":145,"10":143,"11":144,"12":146,"13":142,"14":141,"15":147,"16":138,"17":136,"19":137,"20":135,"21":140,"25":221},{"5":222,"6":153,"7":134,"8":139,"9":145,"10":143,"11":144,"12":146,"13":142,"14":141,"15":147,"16":138,"17":136,"19":137,"20":135,"21":140,"25":223},{"5":224,"6":153,"7":134,"8":139,"9":145,"10":143,"11":144,"12":146,"13":142,"14":141,"15":147,"16":138,"17":136,"19":137,"20":135,"21":140,"25":225},{"20":226,"25":227},{"20":228,"25":229},{"20":230,"25":231},{"20":232,"25":233},{"20":234,"25":235},{"20":236,"25":237},{"5":238,"6":153,"7":134,"8":139,"9":145,"10":143,"11":144,"12":146,"13":142,"14":141,"15":147,"16":138,"17":136,"19":137,"20":135,"21":140,"25":239},{"5":240,"6":153,"7":134,"8":139,"9":145,"10":143,"11":144,"12":146,"13":142,"14":141,"15":147,"16":138,"17":136,"19":137,"20":135,"21":140,"25":241},{},{"19":243},{"3":31,"25":30,"31":244,"32":32},{"3":31,"25":30,"31":245,"32":32},{"3":31,"25":30,"31":246,"32":32},{"3":31,"25":30,"31":247,"32":32},{},{"19":249},{},{"3":31,"25":30,"31":250,"32":32},{},{},{},{},{},{},{},{},{},{"17":165,"18":258,"19":166},{"2":118,"23":174,"24":117},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{},{"5":266,"6":153,"7":134,"8":139,"9":145,"10":143,"11":144,"12":146,"13":142,"14":141,"15":147,"16":138,"17":136,"19":137,"20":135,"21":140},{"25":12,"29":267,"30":13},{"25":12,"29":268,"30":13},{"3":31,"25":30,"31":269,"32":32},{"3":31,"25":30,"31":270,"32":32},{},{},{},{},{},{},{},{},{},{},{},{},{},{"3":31,"25":30,"31":277,"32":32},{"3":31,"25":30,"31":278,"32":32},{},{},{},{},{},{},{},{}];
const PARSER_ACTION = [{"0":[1,11],"24":[1,14],"30":[1,4],"37":[1,9],"42":[1,10],"57":[1,1],"61":[1,6],"72":[1,8]},{"0":[1,15]},{"8":[0]},{"6":[1,16]},{"1":[2,113],"3":[2,113],"6":[2,113],"8":[2,113],"12":[2,113],"24":[2,113],"32":[2,113],"34":[2,113],"63":[2,113],"64":[2,113]},{"12":[1,17]},{"12":[1,18]},{"8":[2,0],"63":[1,19]},{"39":[1,20]},{"71":[1,21]},{"0":[1,22]},{"0":[1,11],"24":[1,14],"37":[1,9],"42":[1,23],"57":[1,1],"72":[1,8]},{"62":[1,25]},{"1":[2,31],"12":[2,31],"63":[1,26]},{"1":[2,41],"4":[2,41],"5":[2,41],"8":[2,41],"12":[2,41],"23":[2,41],"34":[2,41],"62":[2,41],"63":[2,41],"64":[2,41]},{"0":[1,29],"19":[1,37],"24":[1,14],"33":[1,27],"48":[1,36],"66":[1,35],"73":[1,34],"75":[1,33]},{"0":[1,11],"24":[1,14],"37":[1,9],"42":[1,10],"57":[1,1],"61":[1,6],"72":[1,8]},{"19":[1,37],"60":[1,40]},{"0":[1,29],"19":[1,37],"24":[1,14],"33":[1,42],"48":[1,36],"60":[1,40],"66":[1,35],"73":[1,34],"75":[1,33]},{"24":[1,47]},{"10":[1,48]},{"10":[1,49]},{"0":[1,11],"24":[1,14],"37":[1,9],"42":[1,50],"57":[1,1],"72":[1,8]},{"0":[1,52]},{"1":[1,53]},{"0":[1,54]},{"24":[1,47]},{"35":[1,56],"36":[1,62],"38":[1,60],"41":[1,61],"55":[1,58],"56":[1,57],"70":[1,59]},{"1":[1,63]},{"0":[1,29],"19":[1,37],"24":[1,14],"33":[1,27],"48":[1,36],"66":[1,35],"73":[1,34],"75":[1,33]},{"62":[1,65]},{"1":[2,6],"12":[2,6],"24":[1,67]},{"1":[2,16],"12":[2,16],"63":[1,68]},{"4":[1,72],"5":[1,71],"23":[1,70]},{"16":[1,77],"43":[1,76],"61":[1,74],"67":[1,75]},{"4":[1,72],"5":[1,71],"23":[1,70]},{"16":[1,77],"43":[1,76],"61":[1,74],"67":[1,75]},{"1":[2,36],"8":[2,36],"12":[2,36],"24":[2,36],"63":[2,36]},{"8":[2,1],"63":[1,19]},{"8":[2,2],"63":[2,2]},{"8":[2,34],"63":[2,34]},{"8":[2,35],"24":[1,67],"63":[2,35]},{"35":[1,56],"36":[1,62],"38":[1,60],"41":[1,61],"55":[1,58],"56":[1,57],"70":[1,59]},{"12":[1,80]},{"1":[2,6],"8":[2,35],"12":[2,6],"24":[1,67],"63":[2,35]},{"8":[2,4],"63":[2,4]},{"8":[2,5],"63":[2,5]},{"10":[1,81]},{"16":[1,77],"43":[1,76],"61":[1,74],"67":[1,75]},{"27":[1,84]},{"0":[1,85]},{"1":[1,86]},{"0":[1,11],"24":[1,14],"37":[1,9],"42":[1,50],"57":[1,1],"72":[1,8]},{"47":[1,88],"51":[1,89]},{"0":[1,11],"24":[1,14],"37":[1,9],"42":[1,23],"57":[1,1],"72":[1,8]},{"1":[2,33],"12":[2,33],"63":[2,33]},{"24":[1,14]},{"24":[1,14]},{"24":[1,14]},{"24":[1,14]},{"24":[1,14]},{"62":[1,96]},{"24":[1,14]},{"1":[2,25],"12":[2,25]},{"1":[1,98]},{"0":[1,99]},{"1":[2,37],"8":[2,37],"12":[2,37],"24":[2,37],"63":[2,37]},{"10":[1,100]},{"24":[1,47]},{"3":[1,102]},{"1":[2,98],"3":[2,98],"8":[2,98],"12":[2,98],"24":[2,98],"28":[2,98],"32":[2,98],"34":[2,98],"62":[2,98],"63":[2,98],"64":[2,98]},{"1":[2,99],"3":[2,99],"8":[2,99],"12":[2,99],"24":[2,99],"28":[2,99],"32":[2,99],"34":[2,99],"62":[2,99],"63":[2,99],"64":[2,99]},{"1":[2,100],"3":[2,100],"8":[2,100],"12":[2,100],"24":[2,100],"28":[2,100],"32":[2,100],"34":[2,100],"62":[2,100],"63":[2,100],"64":[2,100]},{"2":[1,104],"3":[1,103]},{"1":[2,105],"2":[2,105],"3":[2,105],"8":[2,105],"12":[2,105],"24":[2,105],"32":[2,105],"34":[2,105],"63":[2,105],"64":[2,105]},{"28":[1,105]},{"28":[1,106]},{"1":[2,108],"2":[2,108],"3":[2,108],"8":[2,108],"12":[2,108],"24":[2,108],"32":[2,108],"34":[2,108],"63":[2,108],"64":[2,108]},{"3":[1,107]},{"2":[1,104],"3":[1,108]},{"19":[1,37],"60":[1,40]},{"24":[1,14],"45":[1,111]},{"2":[1,104],"3":[1,112]},{"1":[2,24],"12":[2,24]},{"1":[2,110],"3":[2,110],"8":[2,110],"12":[2,110],"24":[2,110],"32":[2,110],"34":[2,110],"63":[2,110],"64":[2,110]},{"0":[1,11],"24":[1,14],"37":[1,9],"42":[1,50],"57":[1,1],"72":[1,8]},{"63":[1,114]},{"1":[1,115]},{"24":[1,120],"59":[1,119]},{"0":[1,121]},{"1":[1,122]},{"4":[1,72],"5":[1,71],"23":[1,70]},{"62":[1,124]},{"62":[1,125]},{"62":[1,126]},{"62":[1,127]},{"0":[1,128]},{"4":[1,72],"5":[1,71],"23":[1,70]},{"47":[1,130],"51":[1,131]},{"0":[1,29],"19":[1,37],"24":[1,14],"33":[1,27],"48":[1,36],"66":[1,35],"73":[1,34],"75":[1,33]},{"4":[1,72],"5":[1,71],"16":[1,77],"17":[1,150],"18":[1,148],"20":[1,154],"21":[1,152],"22":[1,158],"23":[1,70],"25":[1,151],"26":[1,159],"27":[1,84],"29":[1,149],"30":[1,4],"31":[1,162],"43":[1,76],"46":[1,161],"52":[1,155],"53":[1,156],"54":[1,157],"61":[1,74],"67":[1,75],"74":[1,160]},{"1":[2,22],"12":[2,22],"63":[2,22]},{"4":[1,72],"5":[1,71],"23":[1,70]},{"4":[1,72],"5":[1,71],"23":[1,70]},{"4":[1,72],"5":[1,71],"23":[1,70]},{"1":[2,106],"2":[2,106],"3":[2,106],"8":[2,106],"12":[2,106],"24":[2,106],"32":[2,106],"34":[2,106],"63":[2,106],"64":[2,106]},{"1":[2,107],"2":[2,107],"3":[2,107],"8":[2,107],"12":[2,107],"24":[2,107],"32":[2,107],"34":[2,107],"63":[2,107],"64":[2,107]},{"4":[1,72],"5":[1,71],"23":[1,70]},{"4":[1,72],"5":[1,71],"23":[1,70]},{"8":[2,3],"63":[2,3]},{"1":[2,38],"8":[2,38],"12":[2,38],"63":[2,38]},{"1":[2,39],"8":[2,39],"12":[2,39],"63":[2,39]},{"50":[1,170]},{"1":[1,171]},{"24":[1,120],"58":[1,172],"59":[1,119],"74":[1,173]},{"63":[1,175]},{"1":[2,29],"12":[2,29],"34":[1,176]},{"1":[2,42],"12":[2,42],"34":[2,42],"64":[1,177]},{"1":[2,44],"12":[2,44],"34":[2,44],"64":[2,44]},{"24":[1,120]},{"7":[1,184],"9":[1,182],"11":[1,192],"13":[1,185],"14":[1,183],"15":[1,181],"40":[1,191],"44":[1,188],"49":[1,179],"65":[1,189],"68":[1,187],"69":[1,190],"76":[1,186]},{"0":[1,29],"19":[1,37],"24":[1,14],"33":[1,27],"48":[1,36],"66":[1,35],"73":[1,34],"75":[1,33]},{"1":[2,30],"12":[2,30]},{"3":[1,194]},{"0":[1,195]},{"0":[1,196]},{"0":[1,197]},{"0":[1,198]},{"0":[1,29],"19":[1,37],"24":[1,14],"33":[1,27],"48":[1,36],"66":[1,35],"73":[1,34],"75":[1,33]},{"3":[1,200]},{"24":[1,120],"59":[1,119]},{"0":[1,202]},{"1":[1,203]},{"1":[2,40],"8":[2,40],"12":[2,40],"24":[2,40],"63":[2,40]},{"1":[2,75],"3":[2,75],"8":[2,75],"12":[2,75],"24":[2,75],"32":[2,75],"34":[2,75],"63":[2,75],"64":[2,75]},{"1":[2,76],"3":[2,76],"8":[2,76],"12":[2,76],"24":[2,76],"32":[2,76],"34":[2,76],"63":[2,76],"64":[2,76]},{"1":[2,77],"3":[2,77],"4":[1,72],"5":[1,71],"8":[2,77],"12":[2,77],"23":[1,70],"24":[2,77],"32":[2,77],"34":[2,77],"63":[2,77],"64":[2,77]},{"1":[2,78],"3":[2,78],"8":[2,78],"12":[2,78],"24":[2,78],"28":[1,205],"32":[2,78],"34":[2,78],"63":[2,78],"64":[2,78]},{"1":[2,79],"3":[2,79],"8":[2,79],"12":[2,79],"24":[2,79],"32":[2,79],"34":[2,79],"63":[2,79],"64":[2,79]},{"1":[2,80],"2":[1,104],"3":[2,80],"8":[2,80],"12":[2,80],"24":[2,80],"32":[2,80],"34":[2,80],"63":[2,80],"64":[2,80]},{"1":[2,81],"3":[2,81],"8":[2,81],"12":[2,81],"24":[2,81],"32":[2,81],"34":[2,81],"63":[2,81],"64":[2,81]},{"1":[2,82],"3":[2,82],"8":[2,82],"12":[2,82],"24":[2,82],"32":[2,82],"34":[2,82],"63":[2,82],"64":[2,82]},{"1":[2,83],"3":[2,83],"8":[2,83],"12":[2,83],"24":[2,83],"32":[2,83],"34":[2,83],"63":[2,83],"64":[2,83]},{"1":[2,84],"3":[2,84],"8":[2,84],"12":[2,84],"24":[2,84],"32":[2,84],"34":[2,84],"63":[2,84],"64":[2,84]},{"1":[2,85],"3":[2,85],"8":[2,85],"12":[2,85],"24":[2,85],"32":[2,85],"34":[2,85],"63":[2,85],"64":[2,85]},{"1":[2,86],"3":[2,86],"8":[2,86],"12":[2,86],"24":[2,86],"32":[2,86],"34":[2,86],"63":[2,86],"64":[2,86]},{"1":[2,87],"3":[2,87],"8":[2,87],"12":[2,87],"24":[2,87],"32":[2,87],"34":[2,87],"63":[2,87],"64":[2,87]},{"1":[2,88],"3":[2,88],"8":[2,88],"12":[2,88],"24":[2,88],"32":[2,88],"34":[2,88],"63":[2,88],"64":[2,88]},{"1":[2,111],"3":[2,111],"8":[2,111],"12":[2,111],"24":[2,111],"32":[2,111],"34":[2,111],"63":[2,111],"64":[2,111]},{"1":[2,115],"3":[2,115],"8":[2,115],"12":[2,115],"24":[2,115],"32":[2,115],"34":[2,115],"63":[2,115],"64":[2,115]},{"1":[2,117],"3":[2,117],"8":[2,117],"12":[2,117],"24":[2,117],"32":[2,117],"34":[2,117],"63":[2,117],"64":[2,117]},{"1":[2,116],"3":[2,116],"8":[2,116],"12":[2,116],"24":[2,116],"32":[2,116],"34":[2,116],"63":[2,116],"64":[2,116]},{"1":[2,114],"3":[2,114],"8":[2,114],"12":[2,114],"24":[2,114],"32":[2,114],"34":[2,114],"63":[2,114],"64":[2,114]},{"1":[2,74],"3":[2,74],"8":[2,74],"12":[2,74],"24":[2,74],"32":[2,74],"34":[2,74],"63":[2,74],"64":[2,74]},{"1":[2,112],"3":[2,112],"8":[2,112],"12":[2,112],"24":[2,112],"32":[2,112],"34":[2,112],"63":[2,112],"64":[2,112]},{"1":[2,101],"3":[2,101],"8":[2,101],"12":[2,101],"24":[2,101],"32":[2,101],"34":[2,101],"63":[2,101],"64":[2,101]},{"1":[2,102],"3":[2,102],"8":[2,102],"12":[2,102],"24":[2,102],"32":[2,102],"34":[2,102],"63":[2,102],"64":[2,102]},{"1":[2,103],"3":[2,103],"8":[2,103],"12":[2,103],"24":[2,103],"32":[2,103],"34":[2,103],"63":[2,103],"64":[2,103]},{"1":[2,104],"3":[2,104],"8":[2,104],"12":[2,104],"24":[2,104],"32":[2,104],"34":[2,104],"63":[2,104],"64":[2,104]},{"1":[2,94],"3":[2,94],"8":[2,94],"12":[2,94],"24":[2,94],"32":[2,94],"34":[2,94],"63":[2,94],"64":[2,94]},{"1":[2,92],"3":[2,92],"8":[2,92],"12":[2,92],"24":[2,92],"32":[2,92],"34":[2,92],"63":[2,92],"64":[2,92]},{"1":[2,93],"3":[2,93],"8":[2,93],"12":[2,93],"24":[2,93],"32":[2,93],"34":[2,93],"63":[2,93],"64":[2,93]},{"4":[1,72],"5":[1,71],"16":[1,77],"17":[1,150],"18":[1,148],"20":[1,154],"21":[1,152],"22":[1,158],"23":[1,70],"25":[1,151],"26":[1,159],"27":[1,84],"29":[1,149],"30":[1,4],"31":[1,162],"43":[1,76],"46":[1,161],"52":[1,155],"53":[1,156],"54":[1,157],"61":[1,74],"67":[1,75],"74":[1,160]},{"62":[1,208]},{"62":[1,209]},{"1":[2,97],"2":[2,97],"3":[2,97],"4":[1,72],"5":[1,71],"8":[2,97],"12":[2,97],"23":[1,70],"24":[2,97],"32":[2,97],"34":[2,97],"62":[2,97],"63":[2,97],"64":[2,97]},{"28":[1,205]},{"1":[2,109],"2":[2,109],"3":[2,109],"8":[2,109],"12":[2,109],"24":[2,109],"32":[2,109],"34":[2,109],"63":[2,109],"64":[2,109]},{"62":[1,210]},{"62":[1,211]},{"10":[1,212]},{"63":[1,213]},{"1":[2,26],"12":[2,26]},{"1":[2,28],"12":[2,28]},{"1":[2,27],"12":[2,27],"34":[1,176]},{"24":[1,120],"58":[1,172],"59":[1,119],"74":[1,173]},{"24":[1,120],"59":[1,119]},{"24":[1,120]},{"1":[2,45],"12":[2,45],"34":[2,45],"64":[2,45]},{"24":[1,14],"31":[1,162]},{"1":[2,47],"12":[2,47],"34":[2,47],"64":[2,47]},{"4":[1,72],"5":[1,71],"16":[1,77],"17":[1,150],"18":[1,148],"20":[1,154],"21":[1,152],"22":[1,158],"23":[1,70],"24":[1,14],"25":[1,151],"26":[1,159],"27":[1,84],"29":[1,149],"30":[1,4],"31":[1,162],"43":[1,76],"46":[1,161],"52":[1,155],"53":[1,156],"54":[1,157],"61":[1,74],"67":[1,75],"74":[1,160]},{"4":[1,72],"5":[1,71],"16":[1,77],"17":[1,150],"18":[1,148],"20":[1,154],"21":[1,152],"22":[1,158],"23":[1,70],"24":[1,14],"25":[1,151],"26":[1,159],"27":[1,84],"29":[1,149],"30":[1,4],"31":[1,162],"43":[1,76],"46":[1,161],"52":[1,155],"53":[1,156],"54":[1,157],"61":[1,74],"67":[1,75],"74":[1,160]},{"4":[1,72],"5":[1,71],"16":[1,77],"17":[1,150],"18":[1,148],"20":[1,154],"21":[1,152],"22":[1,158],"23":[1,70],"24":[1,14],"25":[1,151],"26":[1,159],"27":[1,84],"29":[1,149],"30":[1,4],"31":[1,162],"43":[1,76],"46":[1,161],"52":[1,155],"53":[1,156],"54":[1,157],"61":[1,74],"67":[1,75],"74":[1,160]},{"4":[1,72],"5":[1,71],"16":[1,77],"17":[1,150],"18":[1,148],"20":[1,154],"21":[1,152],"22":[1,158],"23":[1,70],"24":[1,14],"25":[1,151],"26":[1,159],"27":[1,84],"29":[1,149],"30":[1,4],"31":[1,162],"43":[1,76],"46":[1,161],"52":[1,155],"53":[1,156],"54":[1,157],"61":[1,74],"67":[1,75],"74":[1,160]},{"24":[1,14],"26":[1,159]},{"24":[1,14],"26":[1,159]},{"24":[1,14],"26":[1,159]},{"24":[1,14],"26":[1,159]},{"24":[1,14],"26":[1,159]},{"24":[1,14],"26":[1,159]},{"4":[1,72],"5":[1,71],"16":[1,77],"17":[1,150],"18":[1,148],"20":[1,154],"21":[1,152],"22":[1,158],"23":[1,70],"24":[1,14],"25":[1,151],"26":[1,159],"27":[1,84],"29":[1,149],"30":[1,4],"31":[1,162],"43":[1,76],"46":[1,161],"52":[1,155],"53":[1,156],"54":[1,157],"61":[1,74],"67":[1,75],"74":[1,160]},{"4":[1,72],"5":[1,71],"16":[1,77],"17":[1,150],"18":[1,148],"20":[1,154],"21":[1,152],"22":[1,158],"23":[1,70],"24":[1,14],"25":[1,151],"26":[1,159],"27":[1,84],"29":[1,149],"30":[1,4],"31":[1,162],"43":[1,76],"46":[1,161],"52":[1,155],"53":[1,156],"54":[1,157],"61":[1,74],"67":[1,75],"74":[1,160]},{"1":[1,242]},{"4":[1,72],"5":[1,71],"23":[1,70]},{"0":[1,29],"19":[1,37],"24":[1,14],"33":[1,27],"48":[1,36],"66":[1,35],"73":[1,34],"75":[1,33]},{"0":[1,29],"19":[1,37],"24":[1,14],"33":[1,27],"48":[1,36],"66":[1,35],"73":[1,34],"75":[1,33]},{"0":[1,29],"19":[1,37],"24":[1,14],"33":[1,27],"48":[1,36],"66":[1,35],"73":[1,34],"75":[1,33]},{"0":[1,29],"19":[1,37],"24":[1,14],"33":[1,27],"48":[1,36],"66":[1,35],"73":[1,34],"75":[1,33]},{"1":[1,248]},{"4":[1,72],"5":[1,71],"23":[1,70]},{"1":[2,7],"12":[2,7],"34":[1,176]},{"0":[1,29],"19":[1,37],"24":[1,14],"33":[1,27],"48":[1,36],"66":[1,35],"73":[1,34],"75":[1,33]},{"1":[2,8],"12":[2,8]},{"28":[1,251]},{"1":[2,95],"2":[2,95],"3":[2,95],"4":[2,95],"5":[2,95],"8":[2,95],"12":[2,95],"23":[2,95],"24":[2,95],"32":[2,95],"34":[2,95],"62":[2,95],"63":[2,95],"64":[2,95]},{"3":[1,253],"32":[1,252]},{"3":[2,90],"32":[2,90]},{"0":[1,254]},{"0":[1,255]},{"0":[1,256]},{"0":[1,257]},{"4":[1,72],"5":[1,71],"23":[1,70]},{"24":[1,120],"58":[1,172],"59":[1,119],"74":[1,173]},{"1":[2,43],"12":[2,43],"34":[2,43],"64":[1,177]},{"1":[2,46],"12":[2,46],"34":[2,46],"64":[2,46]},{"1":[2,60],"12":[2,60],"34":[2,60],"64":[2,60]},{"1":[2,73],"12":[2,73],"34":[2,73],"64":[2,73]},{"1":[2,49],"12":[2,49],"34":[2,49],"64":[2,49]},{"1":[2,62],"12":[2,62],"34":[2,62],"64":[2,62]},{"1":[2,50],"12":[2,50],"34":[2,50],"64":[2,50]},{"1":[2,63],"12":[2,63],"34":[2,63],"64":[2,63]},{"1":[2,51],"12":[2,51],"34":[2,51],"64":[2,51]},{"1":[2,64],"12":[2,64],"34":[2,64],"64":[2,64]},{"1":[2,52],"12":[2,52],"34":[2,52],"64":[2,52]},{"1":[2,65],"12":[2,65],"34":[2,65],"64":[2,65]},{"1":[2,53],"12":[2,53],"34":[2,53],"64":[2,53]},{"1":[2,66],"12":[2,66],"34":[2,66],"64":[2,66]},{"1":[2,54],"12":[2,54],"34":[2,54],"64":[2,54]},{"1":[2,67],"12":[2,67],"34":[2,67],"64":[2,67]},{"1":[2,55],"12":[2,55],"34":[2,55],"64":[2,55]},{"1":[2,68],"12":[2,68],"34":[2,68],"64":[2,68]},{"1":[2,56],"12":[2,56],"34":[2,56],"64":[2,56]},{"1":[2,69],"12":[2,69],"34":[2,69],"64":[2,69]},{"1":[2,57],"12":[2,57],"34":[2,57],"64":[2,57]},{"1":[2,70],"12":[2,70],"34":[2,70],"64":[2,70]},{"1":[2,58],"12":[2,58],"34":[2,58],"64":[2,58]},{"1":[2,71],"12":[2,71],"34":[2,71],"64":[2,71]},{"1":[2,59],"12":[2,59],"34":[2,59],"64":[2,59]},{"1":[2,72],"12":[2,72],"34":[2,72],"64":[2,72]},{"1":[2,48],"12":[2,48],"34":[2,48],"64":[2,48]},{"1":[2,61],"12":[2,61],"34":[2,61],"64":[2,61]},{"1":[2,32],"12":[2,32],"63":[2,32]},{"62":[1,259]},{"1":[1,260]},{"1":[1,261]},{"1":[1,262]},{"1":[1,263]},{"1":[2,13],"12":[2,13]},{"62":[1,264]},{"1":[1,265]},{"1":[2,96],"2":[2,96],"3":[2,96],"4":[2,96],"5":[2,96],"8":[2,96],"12":[2,96],"23":[2,96],"24":[2,96],"32":[2,96],"34":[2,96],"62":[2,96],"63":[2,96],"64":[2,96]},{"1":[2,89],"3":[2,89],"8":[2,89],"12":[2,89],"24":[2,89],"32":[2,89],"34":[2,89],"63":[2,89],"64":[2,89]},{"4":[1,72],"5":[1,71],"16":[1,77],"17":[1,150],"18":[1,148],"20":[1,154],"21":[1,152],"22":[1,158],"23":[1,70],"25":[1,151],"26":[1,159],"27":[1,84],"29":[1,149],"30":[1,4],"31":[1,162],"43":[1,76],"46":[1,161],"52":[1,155],"53":[1,156],"54":[1,157],"61":[1,74],"67":[1,75],"74":[1,160]},{"0":[1,11],"24":[1,14],"37":[1,9],"42":[1,23],"57":[1,1],"72":[1,8]},{"0":[1,11],"24":[1,14],"37":[1,9],"42":[1,23],"57":[1,1],"72":[1,8]},{"0":[1,29],"19":[1,37],"24":[1,14],"33":[1,27],"48":[1,36],"66":[1,35],"73":[1,34],"75":[1,33]},{"0":[1,29],"19":[1,37],"24":[1,14],"33":[1,27],"48":[1,36],"66":[1,35],"73":[1,34],"75":[1,33]},{"1":[2,23],"12":[2,23]},{"0":[1,271]},{"1":[2,9],"12":[2,9]},{"1":[2,10],"12":[2,10]},{"1":[2,11],"12":[2,11]},{"1":[2,12],"12":[2,12]},{"0":[1,272]},{"1":[2,21],"12":[2,21],"63":[2,21]},{"3":[2,91],"32":[2,91]},{"1":[1,273]},{"1":[1,274]},{"1":[1,275]},{"1":[1,276]},{"0":[1,29],"19":[1,37],"24":[1,14],"33":[1,27],"48":[1,36],"66":[1,35],"73":[1,34],"75":[1,33]},{"0":[1,29],"19":[1,37],"24":[1,14],"33":[1,27],"48":[1,36],"66":[1,35],"73":[1,34],"75":[1,33]},{"1":[2,17],"12":[2,17]},{"1":[2,18],"12":[2,18]},{"1":[2,19],"12":[2,19]},{"1":[2,20],"12":[2,20]},{"1":[1,279]},{"1":[1,280]},{"1":[2,15],"12":[2,15]},{"1":[2,14],"12":[2,14]}];
const SEMANTIC_ACTION = [
((rule) => new Ast.Program([], [], [rule], null)),
((user, _, prog) => prog.set({ principal: new Ast.Value.Entity(user.value, 'tt:contact_name', null) })),
((stream, _, action) => new Ast.Statement.Rule(stream, [action])),
((_1, _2, table, _3, action) => new Ast.Statement.Command(table, [action])),
((_1, _2, action) => new Ast.Statement.Command(null, [action])),
((rule, _, pp) => {
                           rule.actions[0].in_params.push(pp);
                           return rule;
                       }),
((get) => Ast.Table.Invocation(get, null)),
((_1, table, _2, _3, filter) => new Ast.Table.Filter(table, filter, null)),
((pname, _1, _2, table, _3) => new Ast.Table.Projection(table, [pname.name], null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, field, _2, _3, table, _4) => new Ast.Table.Aggregation(table, field.name, op, null, null)),
((_1, op, _2, _3, table, _4) => new Ast.Table.Aggregation(table, '*', op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((_1, op, field, base, _2, limit, _3, _4, table, _5) => new Ast.Table.ArgMinMax(table, field.name, op, null, null)),
((x) => x),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.Window(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, stream, _5) => new Ast.Table.TimeSeries(base, delta, stream, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.Sequence(base, delta, table, null)),
((_1, base, _2, delta, _3, _4, table, _5) => new Ast.Table.History(base, delta, table, null)),
((_1, t1, _2, _3, _4, t2, _5) => new Ast.Table.Join(t1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
((_1, _2, _3, base, _4, _5, _6, interval) => new Ast.Stream.Timer(base, interval, null)),
((_1, _2, _3, time) => new Ast.Stream.AtTimer(time, null)),
((monitor, _1, table, _2) => new Ast.Stream.Monitor(table, null)),
((_1, _2, stream, _3, _4, _5) => new Ast.Stream.EdgeNew(stream, null)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeNew(stream, filter)),
((_1, _2, stream, _3, _4, filter) => new Ast.Stream.EdgeNew(stream, Ast.BooleanExpression.True)),
((_1, stream, _2, _3, filter) => new Ast.Stream.Filter(stream, filter, null)),
((pname, _1, _2, stream, _3) => new Ast.Stream.Projection(stream, [pname.name], null)),
((x) => x),
((_1, s1, _2, _3, _4, t2, _5) => new Ast.Stream.Join(s1, t2, [], null)),
((join, _, pp) => {
                           join.in_params.push(pp);
                           return join;
                       }),
(() => Generate.notifyAction()),
((x) => x),
((fn) => new Ast.Invocation(new Ast.Selector.Device(fn.value.kind, null, null), fn.value.channel, [], null)),
((inv, ip) => {
                           inv.in_params.push(ip);
                           return inv;
                       }),
((pname, _1, out_param) => new Ast.InputParam(pname.value, out_param)),
((pname, _1, _2) => new Ast.InputParam(pname.value, new Ast.Value.Event(null))),
((pname, _1, v) => new Ast.InputParam(pname.value, v)),
((pname) => new Ast.Value.VarRef(pname.value)),
((x) => x),
((f1, _, f2) => new Ast.BooleanExpression.And([f1, f2])),
((x) => x),
((_, f) => new Ast.BooleanExpression.Or(f)),
((f1, _, f2) => new Ast.BooleanExpression.Or([f1, f2])),
((pname, [op, v]) => new Ast.BooleanExpression.Atom(pname.value, op, v)),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((op, v) => [op, v]),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((x) => x),
((_1, values, _2) => new Ast.Value.Array(values)),
((v) => [v]),
((array, _, v) => {
                                   array.push(v);
                                   return v;
                               }),
(() => new Ast.Value.Boolean(true)),
(() => new Ast.Value.Boolean(false)),
((str) => new Ast.Value.String(str.value)),
((num, unit) => new Ast.Value.Measure(num.value, unit.value)),
((v1, num, unit) => {
                              if (v1.isCompoundMeasure) {
                                  v1.value.push(new Ast.Value.Measure(num.value, unit.value));
                                  return v1;
                              } else {
                                  return new Ast.Value.CompoundMeasure([v1, new Ast.Value.Measure(num.value, unit.value)]);
                              }
                          }),
((x) => x),
((num) => new Ast.Value.Number(num.value)),
(() => new Ast.Value.Number(1)),
(() => new Ast.Value.Number(0)),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((tag) => new Ast.Value.Location(new Ast.Location.Relative(tag.substr('location:'.length)))),
((loc) => new Ast.Value.Location(loc.value)),
((loc) => new Ast.Value.Date(null, null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), null)),
((edge, unit) => new Ast.Value.Date(new Ast.DateEdge(edge, unit.value), null)),
((abs) => new Ast.Value.Date(abs.value, null)),
((date, _, offset) => new Ast.Value.Date(date.value, offset)),
((time) => new Ast.Value.Time(time.value.hour, time.value.minute, time.value.second)),
((venum) => new Ast.Value.Enum(venum.value)),
((entity) => new Ast.Value.Entity(entity.value.value, entity.value.type, entity.value.display)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:username', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:hashtag', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:url', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:phone_number', null)),
((entity) => new Ast.Value.Entity(entity.value, 'tt:email_address', null)),
((x, _) => x),
];
module.exports = require('./sr_parser')(TERMINAL_IDS, RULE_NON_TERMINALS, ARITY, GOTO, PARSER_ACTION, SEMANTIC_ACTION);
